

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Wed Dec 27 02:46:17 2023

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
     8                           	psect	inittext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    22                           	dabs	1,0x7E,2
    23     0000                     
    24                           ; Generated 22/03/2023 GMT
    25                           ; 
    26                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution. Publication is not required when
    40                           ;        this file is used in an embedded application.
    41                           ; 
    42                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    43                           ;        software without specific prior written permission.
    44                           ; 
    45                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    46                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    47                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    48                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    49                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    50                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    51                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    52                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    53                           ; 
    54                           ; 
    55                           ; Code-generator required, PIC16F877A Definitions
    56                           ; 
    57                           ; SFR Addresses
    58     0000                     	;# 
    59     0001                     	;# 
    60     0002                     	;# 
    61     0003                     	;# 
    62     0004                     	;# 
    63     0005                     	;# 
    64     0006                     	;# 
    65     0007                     	;# 
    66     0008                     	;# 
    67     0009                     	;# 
    68     000A                     	;# 
    69     000B                     	;# 
    70     000C                     	;# 
    71     000D                     	;# 
    72     000E                     	;# 
    73     000E                     	;# 
    74     000F                     	;# 
    75     0010                     	;# 
    76     0011                     	;# 
    77     0012                     	;# 
    78     0013                     	;# 
    79     0014                     	;# 
    80     0015                     	;# 
    81     0015                     	;# 
    82     0016                     	;# 
    83     0017                     	;# 
    84     0018                     	;# 
    85     0019                     	;# 
    86     001A                     	;# 
    87     001B                     	;# 
    88     001B                     	;# 
    89     001C                     	;# 
    90     001D                     	;# 
    91     001E                     	;# 
    92     001F                     	;# 
    93     0081                     	;# 
    94     0085                     	;# 
    95     0086                     	;# 
    96     0087                     	;# 
    97     0088                     	;# 
    98     0089                     	;# 
    99     008C                     	;# 
   100     008D                     	;# 
   101     008E                     	;# 
   102     0091                     	;# 
   103     0092                     	;# 
   104     0093                     	;# 
   105     0094                     	;# 
   106     0098                     	;# 
   107     0099                     	;# 
   108     009C                     	;# 
   109     009D                     	;# 
   110     009E                     	;# 
   111     009F                     	;# 
   112     010C                     	;# 
   113     010D                     	;# 
   114     010E                     	;# 
   115     010F                     	;# 
   116     018C                     	;# 
   117     018D                     	;# 
   118     0000                     	;# 
   119     0001                     	;# 
   120     0002                     	;# 
   121     0003                     	;# 
   122     0004                     	;# 
   123     0005                     	;# 
   124     0006                     	;# 
   125     0007                     	;# 
   126     0008                     	;# 
   127     0009                     	;# 
   128     000A                     	;# 
   129     000B                     	;# 
   130     000C                     	;# 
   131     000D                     	;# 
   132     000E                     	;# 
   133     000E                     	;# 
   134     000F                     	;# 
   135     0010                     	;# 
   136     0011                     	;# 
   137     0012                     	;# 
   138     0013                     	;# 
   139     0014                     	;# 
   140     0015                     	;# 
   141     0015                     	;# 
   142     0016                     	;# 
   143     0017                     	;# 
   144     0018                     	;# 
   145     0019                     	;# 
   146     001A                     	;# 
   147     001B                     	;# 
   148     001B                     	;# 
   149     001C                     	;# 
   150     001D                     	;# 
   151     001E                     	;# 
   152     001F                     	;# 
   153     0081                     	;# 
   154     0085                     	;# 
   155     0086                     	;# 
   156     0087                     	;# 
   157     0088                     	;# 
   158     0089                     	;# 
   159     008C                     	;# 
   160     008D                     	;# 
   161     008E                     	;# 
   162     0091                     	;# 
   163     0092                     	;# 
   164     0093                     	;# 
   165     0094                     	;# 
   166     0098                     	;# 
   167     0099                     	;# 
   168     009C                     	;# 
   169     009D                     	;# 
   170     009E                     	;# 
   171     009F                     	;# 
   172     010C                     	;# 
   173     010D                     	;# 
   174     010E                     	;# 
   175     010F                     	;# 
   176     018C                     	;# 
   177     018D                     	;# 
   178                           
   179                           	psect	idataBANK1
   180     0528                     __pidataBANK1:
   181                           
   182                           ;initializer for main@F1531
   183     0528  3406               	retlw	6
   184     0529  3400               	retlw	0
   185     052A  3400               	retlw	0
   186     052B  3400               	retlw	0
   187     052C  3406               	retlw	6
   188     052D  3400               	retlw	0
   189     052E  3401               	retlw	1
   190     052F  3400               	retlw	0
   191     0530  3406               	retlw	6
   192     0531  3400               	retlw	0
   193     0532  3402               	retlw	2
   194     0533  3400               	retlw	0
   195     0534  3406               	retlw	6
   196     0535  3400               	retlw	0
   197     0536  3403               	retlw	3
   198     0537  3400               	retlw	0
   199     0538  3406               	retlw	6
   200     0539  3400               	retlw	0
   201     053A  3404               	retlw	4
   202     053B  3400               	retlw	0
   203     053C  3406               	retlw	6
   204     053D  3400               	retlw	0
   205     053E  3405               	retlw	5
   206     053F  3400               	retlw	0
   207     0540  3406               	retlw	6
   208     0541  3400               	retlw	0
   209     0542  3406               	retlw	6
   210     0543  3400               	retlw	0
   211     0544  3406               	retlw	6
   212     0545  3400               	retlw	0
   213     0546  3407               	retlw	7
   214     0547  3400               	retlw	0
   215                           
   216                           ;initializer for main@F1529
   217     0548  3405               	retlw	5
   218     0549  3400               	retlw	0
   219     054A  3400               	retlw	0
   220     054B  3400               	retlw	0
   221     054C  3405               	retlw	5
   222     054D  3400               	retlw	0
   223     054E  3401               	retlw	1
   224     054F  3400               	retlw	0
   225     0550  3405               	retlw	5
   226     0551  3400               	retlw	0
   227     0552  3402               	retlw	2
   228     0553  3400               	retlw	0
   229     0554  3405               	retlw	5
   230     0555  3400               	retlw	0
   231     0556  3403               	retlw	3
   232     0557  3400               	retlw	0
   233     0558  3405               	retlw	5
   234     0559  3400               	retlw	0
   235     055A  3404               	retlw	4
   236     055B  3400               	retlw	0
   237     055C  3405               	retlw	5
   238     055D  3400               	retlw	0
   239     055E  3405               	retlw	5
   240     055F  3400               	retlw	0
   241     0560  3409               	retlw	9
   242     0561  3400               	retlw	0
   243     0562  3400               	retlw	0
   244     0563  3400               	retlw	0
   245     0564  3409               	retlw	9
   246     0565  3400               	retlw	0
   247     0566  3401               	retlw	1
   248     0567  3400               	retlw	0
   249     001E                     _ADRESH	set	30
   250     001F                     _ADCON0bits	set	31
   251     001F                     _ADCON0	set	31
   252     0009                     _PORTE	set	9
   253     0005                     _PORTA	set	5
   254     0006                     _PORTB	set	6
   255     0038                     _RC0	set	56
   256     00FA                     _GO_DONE	set	250
   257     0043                     _RD3	set	67
   258     0042                     _RD2	set	66
   259     0047                     _RD7	set	71
   260     0046                     _RD6	set	70
   261     0045                     _RD5	set	69
   262     0044                     _RD4	set	68
   263     0086                     _TRISB	set	134
   264     0085                     _TRISA	set	133
   265     009E                     _ADRESL	set	158
   266     009F                     _ADCON1	set	159
   267     0088                     _TRISD	set	136
   268     0438                     _TRISC0	set	1080
   269                           
   270                           	psect	strings
   271     0003                     __pstrings:
   272     0003                     stringtab:
   273     0003                     __stringtab:
   274                           
   275                           ;	String table - string pointers are 1 byte each
   276     0003  1BFF               	btfsc	btemp+1,7
   277     0004  280D               	ljmp	stringcode
   278     0005  1383               	bcf	3,7
   279     0006  187F               	btfsc	btemp+1,0
   280     0007  1783               	bsf	3,7
   281     0008  0800               	movf	0,w
   282     0009  0A84               	incf	4,f
   283     000A  1903               	skipnz
   284     000B  0AFF               	incf	btemp+1,f
   285     000C  0008               	return
   286     000D                     stringcode:
   287     000D                     stringdir:
   288     000D  3000               	movlw	high stringdir
   289     000E  008A               	movwf	10
   290     000F  0804               	movf	4,w
   291     0010  0A84               	incf	4,f
   292     0011  0782               	addwf	2,f
   293     0012                     __stringbase:
   294     0012  3400               	retlw	0
   295     0013                     __end_of__stringtab:
   296     0013                     STR_2:
   297     0013  3457               	retlw	87	;'W'
   298     0014  3465               	retlw	101	;'e'
   299     0015  346C               	retlw	108	;'l'
   300     0016  3463               	retlw	99	;'c'
   301     0017  346F               	retlw	111	;'o'
   302     0018  346D               	retlw	109	;'m'
   303     0019  3465               	retlw	101	;'e'
   304     001A  3420               	retlw	32	;' '
   305     001B  3474               	retlw	116	;'t'
   306     001C  346F               	retlw	111	;'o'
   307     001D  3420               	retlw	32	;' '
   308     001E  344C               	retlw	76	;'L'
   309     001F  3469               	retlw	105	;'i'
   310     0020  3467               	retlw	103	;'g'
   311     0021  3468               	retlw	104	;'h'
   312     0022  3474               	retlw	116	;'t'
   313     0023  3400               	retlw	0
   314     0024                     STR_3:
   315     0024  3450               	retlw	80	;'P'
   316     0025  346F               	retlw	111	;'o'
   317     0026  3477               	retlw	119	;'w'
   318     0027  3465               	retlw	101	;'e'
   319     0028  3472               	retlw	114	;'r'
   320     0029  3465               	retlw	101	;'e'
   321     002A  3464               	retlw	100	;'d'
   322     002B  3420               	retlw	32	;' '
   323     002C  3462               	retlw	98	;'b'
   324     002D  3479               	retlw	121	;'y'
   325     002E  3420               	retlw	32	;' '
   326     002F  3453               	retlw	83	;'S'
   327     0030  344C               	retlw	76	;'L'
   328     0031  3454               	retlw	84	;'T'
   329     0032  3443               	retlw	67	;'C'
   330     0033  3400               	retlw	0
   331     0034                     STR_1:
   332     0034  3425               	retlw	37	;'%'
   333     0035  3464               	retlw	100	;'d'
   334     0036  3400               	retlw	0
   335                           
   336                           	psect	cinit
   337     07EE                     start_initialization:	
   338                           ; #config settings
   339                           
   340     07EE                     __initialization:
   341                           
   342                           ; Initialize objects allocated to BANK1
   343     07EE  1383               	bcf	3,7	;select IRP bank0
   344     07EF  30E0               	movlw	low (__pdataBANK1+64)
   345     07F0  00FD               	movwf	btemp+-1
   346     07F1  3005               	movlw	high __pidataBANK1
   347     07F2  00FE               	movwf	btemp
   348     07F3  3028               	movlw	low __pidataBANK1
   349     07F4  00FF               	movwf	btemp+1
   350     07F5  30A0               	movlw	low __pdataBANK1
   351     07F6  0084               	movwf	4
   352     07F7  120A  118A  246E  120A  118A  	fcall	init_ram0
   353     07FC                     end_of_initialization:	
   354                           ;End of C runtime variable initialization code
   355                           
   356     07FC                     __end_of__initialization:
   357     07FC  0183               	clrf	3
   358     07FD  120A  118A  2E50   	ljmp	_main	;jump to C main() function
   359                           
   360                           	psect	dataBANK1
   361     00A0                     __pdataBANK1:
   362     00A0                     main@F1531:
   363     00A0                     	ds	32
   364     00C0                     main@F1529:
   365     00C0                     	ds	32
   366                           
   367                           	psect	inittext
   368     046A                     init_fetch0:	
   369                           ;	Called with low address in FSR and high address in W
   370                           
   371     046A  087E               	movf	btemp,w
   372     046B  008A               	movwf	10
   373     046C  087F               	movf	btemp+1,w
   374     046D  0082               	movwf	2
   375     046E                     init_ram0:	
   376                           ;Called with:
   377                           ;	high address of idata address in btemp 
   378                           ;	low address of idata address in btemp+1 
   379                           ;	low address of data in FSR
   380                           ;	high address + 1 of data in btemp-1
   381                           
   382     046E  120A  118A  246A  120A  118A  	fcall	init_fetch0
   383     0473  0080               	movwf	0
   384     0474  0A84               	incf	4,f
   385     0475  0804               	movf	4,w
   386     0476  067D               	xorwf	btemp+-1,w
   387     0477  1903               	btfsc	3,2
   388     0478  3400               	retlw	0
   389     0479  0AFF               	incf	btemp+1,f
   390     047A  1903               	btfsc	3,2
   391     047B  0AFE               	incf	btemp,f
   392     047C  2C6E               	goto	init_ram0
   393                           
   394                           	psect	cstackCOMMON
   395     0070                     __pcstackCOMMON:
   396     0070                     ?_Lcd_Port:
   397     0070                     ??_Lcd_Port:	
   398                           ; 1 bytes @ 0x0
   399                           
   400     0070                     ?_Lcd_Cmd:	
   401                           ; 1 bytes @ 0x0
   402                           
   403     0070                     ?_Lcd_Clear:	
   404                           ; 1 bytes @ 0x0
   405                           
   406     0070                     ?_Lcd_Init:	
   407                           ; 1 bytes @ 0x0
   408                           
   409     0070                     ?_Lcd_Write_Char:	
   410                           ; 1 bytes @ 0x0
   411                           
   412     0070                     ?_ADC_Init:	
   413                           ; 1 bytes @ 0x0
   414                           
   415     0070                     ??_ADC_Init:	
   416                           ; 1 bytes @ 0x0
   417                           
   418     0070                     ?_main:	
   419                           ; 1 bytes @ 0x0
   420                           
   421     0070                     ?_ADC_Read:	
   422                           ; 1 bytes @ 0x0
   423                           
   424     0070                     Lcd_Port@a:	
   425                           ; 2 bytes @ 0x0
   426                           
   427     0070                     ADC_Read@ANC:	
   428                           ; 1 bytes @ 0x0
   429                           
   430                           
   431                           ; 2 bytes @ 0x0
   432     0070                     	ds	1
   433     0071                     ??_Lcd_Cmd:
   434     0071                     ??_Lcd_Write_Char:	
   435                           ; 1 bytes @ 0x1
   436                           
   437                           
   438                           ; 1 bytes @ 0x1
   439     0071                     	ds	1
   440     0072                     ??_ADC_Read:
   441     0072                     Lcd_Write_Char@temp:	
   442                           ; 1 bytes @ 0x2
   443                           
   444                           
   445                           ; 1 bytes @ 0x2
   446     0072                     	ds	1
   447     0073                     Lcd_Cmd@a:
   448     0073                     Lcd_Write_Char@y:	
   449                           ; 1 bytes @ 0x3
   450                           
   451                           
   452                           ; 1 bytes @ 0x3
   453     0073                     	ds	1
   454     0074                     ??_Lcd_Clear:
   455     0074                     ?_Lcd_Set_Cursor:	
   456                           ; 1 bytes @ 0x4
   457                           
   458     0074                     ??_Lcd_Init:	
   459                           ; 1 bytes @ 0x4
   460                           
   461     0074                     Lcd_Set_Cursor@b:	
   462                           ; 1 bytes @ 0x4
   463                           
   464     0074                     Lcd_Write_Char@a:	
   465                           ; 1 bytes @ 0x4
   466                           
   467                           
   468                           ; 1 bytes @ 0x4
   469     0074                     	ds	1
   470     0075                     ??_Lcd_Set_Cursor:
   471     0075                     ?_Lcd_Write_String:	
   472                           ; 1 bytes @ 0x5
   473                           
   474     0075                     Lcd_Write_String@a:	
   475                           ; 1 bytes @ 0x5
   476                           
   477                           
   478                           ; 2 bytes @ 0x5
   479     0075                     	ds	1
   480     0076                     Lcd_Set_Cursor@a:
   481                           
   482                           ; 1 bytes @ 0x6
   483     0076                     	ds	1
   484     0077                     ??_Lcd_Write_String:
   485     0077                     Lcd_Set_Cursor@z:	
   486                           ; 1 bytes @ 0x7
   487                           
   488                           
   489                           ; 1 bytes @ 0x7
   490     0077                     	ds	1
   491     0078                     Lcd_Set_Cursor@y:
   492                           
   493                           ; 1 bytes @ 0x8
   494     0078                     	ds	1
   495     0079                     Lcd_Set_Cursor@temp:
   496                           
   497                           ; 1 bytes @ 0x9
   498     0079                     	ds	1
   499     007A                     Lcd_Write_String@i:
   500                           
   501                           ; 2 bytes @ 0xA
   502     007A                     	ds	2
   503                           
   504                           	psect	cstackBANK0
   505     0020                     __pcstackBANK0:
   506     0020                     ??_main:
   507                           
   508                           ; 1 bytes @ 0x0
   509     0020                     	ds	5
   510     0025                     main@s:
   511                           
   512                           ; 32 bytes @ 0x5
   513     0025                     	ds	32
   514     0045                     main@led:
   515                           
   516                           ; 32 bytes @ 0x25
   517     0045                     	ds	32
   518     0065                     main@val:
   519                           
   520                           ; 2 bytes @ 0x45
   521     0065                     	ds	2
   522     0067                     main@i:
   523                           
   524                           ; 2 bytes @ 0x47
   525     0067                     	ds	2
   526     0069                     main@j:
   527                           
   528                           ; 2 bytes @ 0x49
   529     0069                     	ds	2
   530     006B                     main@j_165:
   531                           
   532                           ; 2 bytes @ 0x4B
   533     006B                     	ds	2
   534     006D                     main@i_161:
   535                           
   536                           ; 2 bytes @ 0x4D
   537     006D                     	ds	2
   538                           
   539                           	psect	maintext
   540     0650                     __pmaintext:	
   541 ;;
   542 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
   543 ;;
   544 ;; *************** function _main *****************
   545 ;; Defined at:
   546 ;;		line 22 in file "main.c"
   547 ;; Parameters:    Size  Location     Type
   548 ;;		None
   549 ;; Auto vars:     Size  Location     Type
   550 ;;  j               2   75[BANK0 ] int 
   551 ;;  j               2   73[BANK0 ] int 
   552 ;;  val             2   69[BANK0 ] int 
   553 ;;  i               2   77[BANK0 ] int 
   554 ;;  i               2   71[BANK0 ] int 
   555 ;;  led            32   37[BANK0 ] struct _Pin[8]
   556 ;;  s              32    5[BANK0 ] struct _Pin[8]
   557 ;;  a               2    0        unsigned int 
   558 ;; Return value:  Size  Location     Type
   559 ;;                  1    wreg      void 
   560 ;; Registers used:
   561 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   562 ;; Tracked objects:
   563 ;;		On entry : B00/0
   564 ;;		On exit  : 0/0
   565 ;;		Unchanged: 0/0
   566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   567 ;;      Params:         0       0       0       0       0
   568 ;;      Locals:         0      74       0       0       0
   569 ;;      Temps:          0       5       0       0       0
   570 ;;      Totals:         0      79       0       0       0
   571 ;;Total ram usage:       79 bytes
   572 ;; Hardware stack levels required when called: 3
   573 ;; This function calls:
   574 ;;		_ADC_Init
   575 ;;		_ADC_Read
   576 ;;		_Lcd_Clear
   577 ;;		_Lcd_Init
   578 ;;		_Lcd_Set_Cursor
   579 ;;		_Lcd_Write_String
   580 ;; This function is called by:
   581 ;;		Startup code after reset
   582 ;; This function uses a non-reentrant model
   583 ;;
   584                           
   585     0650                     _main:	
   586                           ;psect for function _main
   587                           
   588     0650                     l1017:	
   589                           ;incstack = 0
   590                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   591                           
   592                           
   593                           ;main.c: 23:     unsigned int a;;main.c: 25:     Lcd_Init();
   594     0650  120A  118A  25F0  120A  118A  	fcall	_Lcd_Init
   595                           
   596                           ;main.c: 26:     Lcd_Clear();
   597     0655  120A  118A  245D  120A  118A  	fcall	_Lcd_Clear
   598                           
   599                           ;main.c: 27:     Lcd_Set_Cursor(1,1);
   600     065A  01F4               	clrf	Lcd_Set_Cursor@b
   601     065B  0AF4               	incf	Lcd_Set_Cursor@b,f
   602     065C  3001               	movlw	1
   603     065D  120A  118A  25AA  120A  118A  	fcall	_Lcd_Set_Cursor
   604     0662                     l1019:
   605                           
   606                           ;main.c: 28:     Lcd_Write_String("Welcome to Light");
   607     0662  3001               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   608     0663  00F5               	movwf	Lcd_Write_String@a
   609     0664  3080               	movlw	128
   610     0665  00F6               	movwf	Lcd_Write_String@a+1
   611     0666  120A  118A  2568  120A  118A  	fcall	_Lcd_Write_String
   612     066B                     l1021:
   613                           
   614                           ;main.c: 29:     Lcd_Set_Cursor(2,1);
   615     066B  01F4               	clrf	Lcd_Set_Cursor@b
   616     066C  0AF4               	incf	Lcd_Set_Cursor@b,f
   617     066D  3002               	movlw	2
   618     066E  120A  118A  25AA  120A  118A  	fcall	_Lcd_Set_Cursor
   619                           
   620                           ;main.c: 30:     Lcd_Write_String("Powered by SLTC");
   621     0673  3012               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   622     0674  00F5               	movwf	Lcd_Write_String@a
   623     0675  3080               	movlw	128
   624     0676  00F6               	movwf	Lcd_Write_String@a+1
   625     0677  120A  118A  2568  120A  118A  	fcall	_Lcd_Write_String
   626     067C                     l1023:
   627                           
   628                           ;main.c: 32:     ADC_Init();
   629     067C  120A  118A  2454  120A  118A  	fcall	_ADC_Init
   630     0681                     l1025:
   631                           
   632                           ;main.c: 34:     TRISA = 0xff;
   633     0681  30FF               	movlw	255
   634     0682  1683               	bsf	3,5	;RP0=1, select bank1
   635     0683  1303               	bcf	3,6	;RP1=0, select bank1
   636     0684  0085               	movwf	5	;volatile
   637     0685                     l1027:
   638                           
   639                           ;main.c: 35:     TRISB = 0x00;
   640     0685  0186               	clrf	6	;volatile
   641     0686                     l1029:
   642                           
   643                           ;main.c: 36:     TRISC0 = 0;
   644     0686  1007               	bcf	7,0	;volatile
   645     0687                     l1031:
   646                           
   647                           ;main.c: 38:     PORTB = 0x00;
   648     0687  1283               	bcf	3,5	;RP0=0, select bank0
   649     0688  1303               	bcf	3,6	;RP1=0, select bank0
   650     0689  0186               	clrf	6	;volatile
   651     068A                     l1033:
   652                           
   653                           ;main.c: 39:     RC0 = 0;
   654     068A  1007               	bcf	7,0	;volatile
   655     068B                     l1035:
   656                           
   657                           ;main.c: 41:     Pin s[8] = {
   658     068B  3025               	movlw	main@s& (0+255)
   659     068C  0084               	movwf	4
   660     068D  30C0               	movlw	low main@F1529
   661     068E  00A0               	movwf	??_main
   662     068F  0804               	movf	4,w
   663     0690  00A1               	movwf	??_main+1
   664     0691  3020               	movlw	32
   665     0692  00A2               	movwf	??_main+2
   666     0693                     u500:
   667     0693  0820               	movf	??_main,w
   668     0694  0084               	movwf	4
   669     0695  1383               	bcf	3,7	;select IRP bank1
   670     0696  0800               	movf	0,w
   671     0697  00A3               	movwf	??_main+3
   672     0698  0AA0               	incf	??_main,f
   673     0699  0821               	movf	??_main+1,w
   674     069A  0084               	movwf	4
   675     069B  0823               	movf	??_main+3,w
   676     069C  0080               	movwf	0
   677     069D  0AA1               	incf	??_main+1,f
   678     069E  0BA2               	decfsz	??_main+2,f
   679     069F  2E93               	goto	u500
   680     06A0                     l1037:
   681                           
   682                           ;main.c: 53:     Pin led[8] = {
   683     06A0  3045               	movlw	main@led& (0+255)
   684     06A1  0084               	movwf	4
   685     06A2  30A0               	movlw	low main@F1531
   686     06A3  00A0               	movwf	??_main
   687     06A4  0804               	movf	4,w
   688     06A5  00A1               	movwf	??_main+1
   689     06A6  3020               	movlw	32
   690     06A7  00A2               	movwf	??_main+2
   691     06A8                     u510:
   692     06A8  0820               	movf	??_main,w
   693     06A9  0084               	movwf	4
   694     06AA  1383               	bcf	3,7	;select IRP bank1
   695     06AB  0800               	movf	0,w
   696     06AC  00A3               	movwf	??_main+3
   697     06AD  0AA0               	incf	??_main,f
   698     06AE  0821               	movf	??_main+1,w
   699     06AF  0084               	movwf	4
   700     06B0  0823               	movf	??_main+3,w
   701     06B1  0080               	movwf	0
   702     06B2  0AA1               	incf	??_main+1,f
   703     06B3  0BA2               	decfsz	??_main+2,f
   704     06B4  2EA8               	goto	u510
   705     06B5                     l1039:
   706                           
   707                           ;main.c: 66:     {;main.c: 67:         for(int i = 0; i < 8; i++) {
   708     06B5  1283               	bcf	3,5	;RP0=0, select bank0
   709     06B6  1303               	bcf	3,6	;RP1=0, select bank0
   710     06B7  01E7               	clrf	main@i
   711     06B8  01E8               	clrf	main@i+1
   712     06B9                     l1045:
   713                           
   714                           ;main.c: 68:             *led[i].port = 0x00;
   715     06B9  1283               	bcf	3,5	;RP0=0, select bank0
   716     06BA  1303               	bcf	3,6	;RP1=0, select bank0
   717     06BB  0867               	movf	main@i,w
   718     06BC  00A0               	movwf	??_main
   719     06BD  3001               	movlw	1
   720     06BE                     u525:
   721     06BE  1003               	clrc
   722     06BF  0DA0               	rlf	??_main,f
   723     06C0  3EFF               	addlw	-1
   724     06C1  1D03               	skipz
   725     06C2  2EBE               	goto	u525
   726     06C3  1003               	clrc
   727     06C4  0D20               	rlf	??_main,w
   728     06C5  3E45               	addlw	(low (main@led| 0))& (0+255)
   729     06C6  0084               	movwf	4
   730     06C7  1383               	bcf	3,7	;select IRP bank0
   731     06C8  0800               	movf	0,w
   732     06C9  00A1               	movwf	??_main+1
   733     06CA  0A84               	incf	4,f
   734     06CB  0800               	movf	0,w
   735     06CC  00A2               	movwf	??_main+2
   736     06CD  0821               	movf	??_main+1,w
   737     06CE  0084               	movwf	4
   738     06CF  1783               	bsf	3,7
   739     06D0  1C22               	btfss	??_main+2,0
   740     06D1  1383               	bcf	3,7
   741     06D2  0180               	clrf	0
   742     06D3                     l1047:
   743                           
   744                           ;main.c: 69:         }
   745     06D3  3001               	movlw	1
   746     06D4  07E7               	addwf	main@i,f
   747     06D5  1803               	skipnc
   748     06D6  0AE8               	incf	main@i+1,f
   749     06D7  3000               	movlw	0
   750     06D8  07E8               	addwf	main@i+1,f
   751     06D9                     l1049:
   752     06D9  0868               	movf	main@i+1,w
   753     06DA  3A80               	xorlw	128
   754     06DB  00FF               	movwf	btemp+1
   755     06DC  3080               	movlw	128
   756     06DD  027F               	subwf	btemp+1,w
   757     06DE  1D03               	skipz
   758     06DF  2EE2               	goto	u535
   759     06E0  3008               	movlw	8
   760     06E1  0267               	subwf	main@i,w
   761     06E2                     u535:
   762     06E2  1C03               	skipc
   763     06E3  2EE5               	goto	u531
   764     06E4  2EE6               	goto	u530
   765     06E5                     u531:
   766     06E5  2EB9               	goto	l1045
   767     06E6                     u530:
   768     06E6                     l1051:
   769                           
   770                           ;main.c: 71:         for(int i = 0; i < 8; i++) {
   771     06E6  1283               	bcf	3,5	;RP0=0, select bank0
   772     06E7  1303               	bcf	3,6	;RP1=0, select bank0
   773     06E8  01ED               	clrf	main@i_161
   774     06E9  01EE               	clrf	main@i_161+1
   775     06EA                     l1057:
   776                           
   777                           ;main.c: 72:             int val = ADC_Read(i);
   778     06EA  1283               	bcf	3,5	;RP0=0, select bank0
   779     06EB  1303               	bcf	3,6	;RP1=0, select bank0
   780     06EC  086E               	movf	main@i_161+1,w
   781     06ED  00F1               	movwf	ADC_Read@ANC+1
   782     06EE  086D               	movf	main@i_161,w
   783     06EF  00F0               	movwf	ADC_Read@ANC
   784     06F0  120A  118A  24EE  120A  118A  	fcall	_ADC_Read
   785     06F5  0871               	movf	?_ADC_Read+1,w
   786     06F6  1283               	bcf	3,5	;RP0=0, select bank0
   787     06F7  1303               	bcf	3,6	;RP1=0, select bank0
   788     06F8  00E6               	movwf	main@val+1
   789     06F9  0870               	movf	?_ADC_Read,w
   790     06FA  00E5               	movwf	main@val
   791     06FB                     l1059:
   792                           
   793                           ;main.c: 74:             if(val > 512) {
   794     06FB  0866               	movf	main@val+1,w
   795     06FC  3A80               	xorlw	128
   796     06FD  00FF               	movwf	btemp+1
   797     06FE  3082               	movlw	130
   798     06FF  027F               	subwf	btemp+1,w
   799     0700  1D03               	skipz
   800     0701  2F04               	goto	u545
   801     0702  3001               	movlw	1
   802     0703  0265               	subwf	main@val,w
   803     0704                     u545:
   804     0704  1C03               	skipc
   805     0705  2F07               	goto	u541
   806     0706  2F08               	goto	u540
   807     0707                     u541:
   808     0707  2FC7               	goto	l1081
   809     0708                     u540:
   810     0708                     l1061:
   811                           
   812                           ;main.c: 75:                 for(int j = i; (j <= i + 1) && j < 8; j++) {
   813     0708  1283               	bcf	3,5	;RP0=0, select bank0
   814     0709  1303               	bcf	3,6	;RP1=0, select bank0
   815     070A  086E               	movf	main@i_161+1,w
   816     070B  00EA               	movwf	main@j+1
   817     070C  086D               	movf	main@i_161,w
   818     070D  00E9               	movwf	main@j
   819     070E  2F48               	goto	l1067
   820     070F                     l1063:
   821                           
   822                           ;main.c: 76:                     *led[j].port |= (1 << led[j].pin);
   823     070F  3001               	movlw	1
   824     0710  1283               	bcf	3,5	;RP0=0, select bank0
   825     0711  1303               	bcf	3,6	;RP1=0, select bank0
   826     0712  00A0               	movwf	??_main
   827     0713  0869               	movf	main@j,w
   828     0714  00A1               	movwf	??_main+1
   829     0715  3001               	movlw	1
   830     0716                     u555:
   831     0716  1003               	clrc
   832     0717  0DA1               	rlf	??_main+1,f
   833     0718  3EFF               	addlw	-1
   834     0719  1D03               	skipz
   835     071A  2F16               	goto	u555
   836     071B  1003               	clrc
   837     071C  0D21               	rlf	??_main+1,w
   838     071D  3E02               	addlw	2
   839     071E  3E45               	addlw	(low (main@led| 0))& (0+255)
   840     071F  0084               	movwf	4
   841     0720  1383               	bcf	3,7	;select IRP bank0
   842     0721  0A00               	incf	0,w
   843     0722  2F25               	goto	u564
   844     0723                     u565:
   845     0723  1003               	clrc
   846     0724  0DA0               	rlf	??_main,f
   847     0725                     u564:
   848     0725  3EFF               	addlw	-1
   849     0726  1D03               	skipz
   850     0727  2F23               	goto	u565
   851     0728  0820               	movf	??_main,w
   852     0729  00FF               	movwf	btemp+1
   853     072A  0869               	movf	main@j,w
   854     072B  00A2               	movwf	??_main+2
   855     072C  3001               	movlw	1
   856     072D                     u575:
   857     072D  1003               	clrc
   858     072E  0DA2               	rlf	??_main+2,f
   859     072F  3EFF               	addlw	-1
   860     0730  1D03               	skipz
   861     0731  2F2D               	goto	u575
   862     0732  1003               	clrc
   863     0733  0D22               	rlf	??_main+2,w
   864     0734  3E45               	addlw	(low (main@led| 0))& (0+255)
   865     0735  0084               	movwf	4
   866     0736  0800               	movf	0,w
   867     0737  00A3               	movwf	??_main+3
   868     0738  0A84               	incf	4,f
   869     0739  0800               	movf	0,w
   870     073A  00A4               	movwf	??_main+4
   871     073B  0823               	movf	??_main+3,w
   872     073C  0084               	movwf	4
   873     073D  1783               	bsf	3,7
   874     073E  1C24               	btfss	??_main+4,0
   875     073F  1383               	bcf	3,7
   876     0740  087F               	movf	btemp+1,w
   877     0741  0480               	iorwf	0,f
   878     0742                     l1065:
   879                           
   880                           ;main.c: 77:                 }
   881     0742  3001               	movlw	1
   882     0743  07E9               	addwf	main@j,f
   883     0744  1803               	skipnc
   884     0745  0AEA               	incf	main@j+1,f
   885     0746  3000               	movlw	0
   886     0747  07EA               	addwf	main@j+1,f
   887     0748                     l1067:
   888     0748  086D               	movf	main@i_161,w
   889     0749  3E01               	addlw	1
   890     074A  00A0               	movwf	??_main
   891     074B  086E               	movf	main@i_161+1,w
   892     074C  1803               	skipnc
   893     074D  3E01               	addlw	1
   894     074E  3E00               	addlw	0
   895     074F  00A1               	movwf	??_main+1
   896     0750  0821               	movf	??_main+1,w
   897     0751  3A80               	xorlw	128
   898     0752  00A2               	movwf	??_main+2
   899     0753  086A               	movf	main@j+1,w
   900     0754  3A80               	xorlw	128
   901     0755  0222               	subwf	??_main+2,w
   902     0756  1D03               	skipz
   903     0757  2F5A               	goto	u585
   904     0758  0869               	movf	main@j,w
   905     0759  0220               	subwf	??_main,w
   906     075A                     u585:
   907     075A  1C03               	skipc
   908     075B  2F5D               	goto	u581
   909     075C  2F5E               	goto	u580
   910     075D                     u581:
   911     075D  2F6D               	goto	l1071
   912     075E                     u580:
   913     075E                     l1069:
   914     075E  1283               	bcf	3,5	;RP0=0, select bank0
   915     075F  1303               	bcf	3,6	;RP1=0, select bank0
   916     0760  086A               	movf	main@j+1,w
   917     0761  3A80               	xorlw	128
   918     0762  00FF               	movwf	btemp+1
   919     0763  3080               	movlw	128
   920     0764  027F               	subwf	btemp+1,w
   921     0765  1D03               	skipz
   922     0766  2F69               	goto	u595
   923     0767  3008               	movlw	8
   924     0768  0269               	subwf	main@j,w
   925     0769                     u595:
   926     0769  1C03               	skipc
   927     076A  2F6C               	goto	u591
   928     076B  2F6D               	goto	u590
   929     076C                     u591:
   930     076C  2F0F               	goto	l1063
   931     076D                     u590:
   932     076D                     l1071:
   933                           
   934                           ;main.c: 78:                 for(int j = i; (j >= i - 1) && j >= 0; j--) {
   935     076D  1283               	bcf	3,5	;RP0=0, select bank0
   936     076E  1303               	bcf	3,6	;RP1=0, select bank0
   937     076F  086E               	movf	main@i_161+1,w
   938     0770  00EC               	movwf	main@j_165+1
   939     0771  086D               	movf	main@i_161,w
   940     0772  00EB               	movwf	main@j_165
   941     0773  2FAB               	goto	l1077
   942     0774                     l1073:
   943                           
   944                           ;main.c: 79:                     *led[j].port |= (1 << led[j].pin);
   945     0774  3001               	movlw	1
   946     0775  00A0               	movwf	??_main
   947     0776  086B               	movf	main@j_165,w
   948     0777  00A1               	movwf	??_main+1
   949     0778  3001               	movlw	1
   950     0779                     u605:
   951     0779  1003               	clrc
   952     077A  0DA1               	rlf	??_main+1,f
   953     077B  3EFF               	addlw	-1
   954     077C  1D03               	skipz
   955     077D  2F79               	goto	u605
   956     077E  1003               	clrc
   957     077F  0D21               	rlf	??_main+1,w
   958     0780  3E02               	addlw	2
   959     0781  3E45               	addlw	(low (main@led| 0))& (0+255)
   960     0782  0084               	movwf	4
   961     0783  1383               	bcf	3,7	;select IRP bank0
   962     0784  0A00               	incf	0,w
   963     0785  2F88               	goto	u614
   964     0786                     u615:
   965     0786  1003               	clrc
   966     0787  0DA0               	rlf	??_main,f
   967     0788                     u614:
   968     0788  3EFF               	addlw	-1
   969     0789  1D03               	skipz
   970     078A  2F86               	goto	u615
   971     078B  0820               	movf	??_main,w
   972     078C  00FF               	movwf	btemp+1
   973     078D  086B               	movf	main@j_165,w
   974     078E  00A2               	movwf	??_main+2
   975     078F  3001               	movlw	1
   976     0790                     u625:
   977     0790  1003               	clrc
   978     0791  0DA2               	rlf	??_main+2,f
   979     0792  3EFF               	addlw	-1
   980     0793  1D03               	skipz
   981     0794  2F90               	goto	u625
   982     0795  1003               	clrc
   983     0796  0D22               	rlf	??_main+2,w
   984     0797  3E45               	addlw	(low (main@led| 0))& (0+255)
   985     0798  0084               	movwf	4
   986     0799  0800               	movf	0,w
   987     079A  00A3               	movwf	??_main+3
   988     079B  0A84               	incf	4,f
   989     079C  0800               	movf	0,w
   990     079D  00A4               	movwf	??_main+4
   991     079E  0823               	movf	??_main+3,w
   992     079F  0084               	movwf	4
   993     07A0  1783               	bsf	3,7
   994     07A1  1C24               	btfss	??_main+4,0
   995     07A2  1383               	bcf	3,7
   996     07A3  087F               	movf	btemp+1,w
   997     07A4  0480               	iorwf	0,f
   998     07A5                     l1075:
   999                           
  1000                           ;main.c: 80:                 }
  1001     07A5  30FF               	movlw	255
  1002     07A6  07EB               	addwf	main@j_165,f
  1003     07A7  1803               	skipnc
  1004     07A8  0AEC               	incf	main@j_165+1,f
  1005     07A9  30FF               	movlw	255
  1006     07AA  07EC               	addwf	main@j_165+1,f
  1007     07AB                     l1077:
  1008     07AB  086D               	movf	main@i_161,w
  1009     07AC  3EFF               	addlw	255
  1010     07AD  00A0               	movwf	??_main
  1011     07AE  086E               	movf	main@i_161+1,w
  1012     07AF  1803               	skipnc
  1013     07B0  3E01               	addlw	1
  1014     07B1  3EFF               	addlw	255
  1015     07B2  00A1               	movwf	??_main+1
  1016     07B3  086C               	movf	main@j_165+1,w
  1017     07B4  3A80               	xorlw	128
  1018     07B5  00A2               	movwf	??_main+2
  1019     07B6  0821               	movf	??_main+1,w
  1020     07B7  3A80               	xorlw	128
  1021     07B8  0222               	subwf	??_main+2,w
  1022     07B9  1D03               	skipz
  1023     07BA  2FBD               	goto	u635
  1024     07BB  0820               	movf	??_main,w
  1025     07BC  026B               	subwf	main@j_165,w
  1026     07BD                     u635:
  1027     07BD  1C03               	skipc
  1028     07BE  2FC0               	goto	u631
  1029     07BF  2FC1               	goto	u630
  1030     07C0                     u631:
  1031     07C0  2FC7               	goto	l1081
  1032     07C1                     u630:
  1033     07C1                     l1079:
  1034     07C1  1283               	bcf	3,5	;RP0=0, select bank0
  1035     07C2  1303               	bcf	3,6	;RP1=0, select bank0
  1036     07C3  1FEC               	btfss	main@j_165+1,7
  1037     07C4  2FC6               	goto	u641
  1038     07C5  2FC7               	goto	u640
  1039     07C6                     u641:
  1040     07C6  2F74               	goto	l1073
  1041     07C7                     u640:
  1042     07C7                     l1081:
  1043                           
  1044                           ;main.c: 82:         }
  1045     07C7  3001               	movlw	1
  1046     07C8  1283               	bcf	3,5	;RP0=0, select bank0
  1047     07C9  1303               	bcf	3,6	;RP1=0, select bank0
  1048     07CA  07ED               	addwf	main@i_161,f
  1049     07CB  1803               	skipnc
  1050     07CC  0AEE               	incf	main@i_161+1,f
  1051     07CD  3000               	movlw	0
  1052     07CE  07EE               	addwf	main@i_161+1,f
  1053     07CF                     l1083:
  1054     07CF  086E               	movf	main@i_161+1,w
  1055     07D0  3A80               	xorlw	128
  1056     07D1  00FF               	movwf	btemp+1
  1057     07D2  3080               	movlw	128
  1058     07D3  027F               	subwf	btemp+1,w
  1059     07D4  1D03               	skipz
  1060     07D5  2FD8               	goto	u655
  1061     07D6  3008               	movlw	8
  1062     07D7  026D               	subwf	main@i_161,w
  1063     07D8                     u655:
  1064     07D8  1C03               	skipc
  1065     07D9  2FDB               	goto	u651
  1066     07DA  2FDC               	goto	u650
  1067     07DB                     u651:
  1068     07DB  2EEA               	goto	l1057
  1069     07DC                     u650:
  1070     07DC                     l1085:
  1071                           
  1072                           ;main.c: 83:         _delay((unsigned long)((1000)*(8000000/4000.0)));
  1073     07DC  300B               	movlw	11
  1074     07DD  1283               	bcf	3,5	;RP0=0, select bank0
  1075     07DE  1303               	bcf	3,6	;RP1=0, select bank0
  1076     07DF  00A2               	movwf	??_main+2
  1077     07E0  3026               	movlw	38
  1078     07E1  00A1               	movwf	??_main+1
  1079     07E2  305D               	movlw	93
  1080     07E3  00A0               	movwf	??_main
  1081     07E4                     u667:
  1082     07E4  0BA0               	decfsz	??_main,f
  1083     07E5  2FE4               	goto	u667
  1084     07E6  0BA1               	decfsz	??_main+1,f
  1085     07E7  2FE4               	goto	u667
  1086     07E8  0BA2               	decfsz	??_main+2,f
  1087     07E9  2FE4               	goto	u667
  1088     07EA  2EB5               	goto	l1039
  1089     07EB  120A  118A  2800   	ljmp	start
  1090     07EE                     __end_of_main:
  1091                           
  1092                           	psect	text1
  1093     0568                     __ptext1:	
  1094 ;; *************** function _Lcd_Write_String *****************
  1095 ;; Defined at:
  1096 ;;		line 110 in file "./lcd.h"
  1097 ;; Parameters:    Size  Location     Type
  1098 ;;  a               2    5[COMMON] PTR unsigned char 
  1099 ;;		 -> STR_3(16), STR_2(17), Lcd_Write_Int@str(16), 
  1100 ;; Auto vars:     Size  Location     Type
  1101 ;;  i               2   10[COMMON] int 
  1102 ;; Return value:  Size  Location     Type
  1103 ;;                  1    wreg      void 
  1104 ;; Registers used:
  1105 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1106 ;; Tracked objects:
  1107 ;;		On entry : 0/0
  1108 ;;		On exit  : 0/0
  1109 ;;		Unchanged: 0/0
  1110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1111 ;;      Params:         2       0       0       0       0
  1112 ;;      Locals:         2       0       0       0       0
  1113 ;;      Temps:          3       0       0       0       0
  1114 ;;      Totals:         7       0       0       0       0
  1115 ;;Total ram usage:        7 bytes
  1116 ;; Hardware stack levels used: 1
  1117 ;; Hardware stack levels required when called: 2
  1118 ;; This function calls:
  1119 ;;		_Lcd_Write_Char
  1120 ;; This function is called by:
  1121 ;;		_main
  1122 ;;		_Lcd_Write_Int
  1123 ;; This function uses a non-reentrant model
  1124 ;;
  1125                           
  1126     0568                     _Lcd_Write_String:	
  1127                           ;psect for function _Lcd_Write_String
  1128                           
  1129     0568                     l981:	
  1130                           ;incstack = 0
  1131                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1132                           
  1133                           
  1134                           ;./lcd.h: 110: void Lcd_Write_String(char *a);./lcd.h: 111: {;./lcd.h: 112:  int i;;./lc
      +                          d.h: 113:  for(i=0;a[i]!='\0';i++)
  1135     0568  01FA               	clrf	Lcd_Write_String@i
  1136     0569  01FB               	clrf	Lcd_Write_String@i+1
  1137     056A  2D8D               	goto	l987
  1138     056B                     l983:
  1139                           
  1140                           ;./lcd.h: 114:     Lcd_Write_Char(a[i]);
  1141     056B  087A               	movf	Lcd_Write_String@i,w
  1142     056C  0775               	addwf	Lcd_Write_String@a,w
  1143     056D  00F8               	movwf	??_Lcd_Write_String+1
  1144     056E  0876               	movf	Lcd_Write_String@a+1,w
  1145     056F  00F7               	movwf	??_Lcd_Write_String
  1146     0570  1803               	skipnc
  1147     0571  0AF7               	incf	??_Lcd_Write_String,f
  1148     0572  1FFA               	btfss	Lcd_Write_String@i,7
  1149     0573  2D75               	goto	u430
  1150     0574  03F7               	decf	??_Lcd_Write_String,f
  1151     0575                     u430:
  1152     0575  0877               	movf	??_Lcd_Write_String,w
  1153     0576  00F9               	movwf	??_Lcd_Write_String+2
  1154     0577  0879               	movf	??_Lcd_Write_String+2,w
  1155     0578  1283               	bcf	3,5	;RP0=0, select bank0
  1156     0579  1303               	bcf	3,6	;RP1=0, select bank0
  1157     057A  00FF               	movwf	btemp+1
  1158     057B  0878               	movf	??_Lcd_Write_String+1,w
  1159     057C  0084               	movwf	4
  1160     057D  120A  118A  2003  120A  118A  	fcall	stringtab
  1161     0582  120A  118A  24B9  120A  118A  	fcall	_Lcd_Write_Char
  1162     0587                     l985:
  1163     0587  3001               	movlw	1
  1164     0588  07FA               	addwf	Lcd_Write_String@i,f
  1165     0589  1803               	skipnc
  1166     058A  0AFB               	incf	Lcd_Write_String@i+1,f
  1167     058B  3000               	movlw	0
  1168     058C  07FB               	addwf	Lcd_Write_String@i+1,f
  1169     058D                     l987:
  1170     058D  087A               	movf	Lcd_Write_String@i,w
  1171     058E  0775               	addwf	Lcd_Write_String@a,w
  1172     058F  00F8               	movwf	??_Lcd_Write_String+1
  1173     0590  0876               	movf	Lcd_Write_String@a+1,w
  1174     0591  00F7               	movwf	??_Lcd_Write_String
  1175     0592  1803               	skipnc
  1176     0593  0AF7               	incf	??_Lcd_Write_String,f
  1177     0594  1FFA               	btfss	Lcd_Write_String@i,7
  1178     0595  2D97               	goto	u440
  1179     0596  03F7               	decf	??_Lcd_Write_String,f
  1180     0597                     u440:
  1181     0597  0877               	movf	??_Lcd_Write_String,w
  1182     0598  00F9               	movwf	??_Lcd_Write_String+2
  1183     0599  0879               	movf	??_Lcd_Write_String+2,w
  1184     059A  1283               	bcf	3,5	;RP0=0, select bank0
  1185     059B  1303               	bcf	3,6	;RP1=0, select bank0
  1186     059C  00FF               	movwf	btemp+1
  1187     059D  0878               	movf	??_Lcd_Write_String+1,w
  1188     059E  0084               	movwf	4
  1189     059F  120A  118A  2003  120A  118A  	fcall	stringtab
  1190     05A4  3A00               	xorlw	0
  1191     05A5  1D03               	skipz
  1192     05A6  2DA8               	goto	u451
  1193     05A7  2DA9               	goto	u450
  1194     05A8                     u451:
  1195     05A8  2D6B               	goto	l983
  1196     05A9                     u450:
  1197     05A9                     l79:
  1198     05A9  0008               	return
  1199     05AA                     __end_of_Lcd_Write_String:
  1200                           
  1201                           	psect	text2
  1202     04B9                     __ptext2:	
  1203 ;; *************** function _Lcd_Write_Char *****************
  1204 ;; Defined at:
  1205 ;;		line 94 in file "./lcd.h"
  1206 ;; Parameters:    Size  Location     Type
  1207 ;;  a               1    wreg     unsigned char 
  1208 ;; Auto vars:     Size  Location     Type
  1209 ;;  a               1    4[COMMON] unsigned char 
  1210 ;;  y               1    3[COMMON] unsigned char 
  1211 ;;  temp            1    2[COMMON] unsigned char 
  1212 ;; Return value:  Size  Location     Type
  1213 ;;                  1    wreg      void 
  1214 ;; Registers used:
  1215 ;;		wreg, status,2, status,0, pclath, cstack
  1216 ;; Tracked objects:
  1217 ;;		On entry : 0/0
  1218 ;;		On exit  : 0/0
  1219 ;;		Unchanged: 0/0
  1220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1221 ;;      Params:         0       0       0       0       0
  1222 ;;      Locals:         3       0       0       0       0
  1223 ;;      Temps:          1       0       0       0       0
  1224 ;;      Totals:         4       0       0       0       0
  1225 ;;Total ram usage:        4 bytes
  1226 ;; Hardware stack levels used: 1
  1227 ;; Hardware stack levels required when called: 1
  1228 ;; This function calls:
  1229 ;;		_Lcd_Port
  1230 ;; This function is called by:
  1231 ;;		_Lcd_Write_String
  1232 ;; This function uses a non-reentrant model
  1233 ;;
  1234                           
  1235     04B9                     _Lcd_Write_Char:	
  1236                           ;psect for function _Lcd_Write_Char
  1237                           
  1238                           
  1239                           ;incstack = 0
  1240                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  1241                           ;Lcd_Write_Char@a stored from wreg
  1242     04B9  00F4               	movwf	Lcd_Write_Char@a
  1243     04BA                     l909:
  1244                           
  1245                           ;./lcd.h: 94: void Lcd_Write_Char(char a);./lcd.h: 95: {;./lcd.h: 96:    char temp,y;;./
      +                          lcd.h: 97:    temp = a&0x0F;
  1246     04BA  0874               	movf	Lcd_Write_Char@a,w
  1247     04BB  390F               	andlw	15
  1248     04BC  00F2               	movwf	Lcd_Write_Char@temp
  1249                           
  1250                           ;./lcd.h: 98:    y = a&0xF0;
  1251     04BD  0874               	movf	Lcd_Write_Char@a,w
  1252     04BE  39F0               	andlw	240
  1253     04BF  00F3               	movwf	Lcd_Write_Char@y
  1254     04C0                     l911:
  1255                           
  1256                           ;./lcd.h: 99:    RD2 = 1;
  1257     04C0  1283               	bcf	3,5	;RP0=0, select bank0
  1258     04C1  1303               	bcf	3,6	;RP1=0, select bank0
  1259     04C2  1508               	bsf	8,2	;volatile
  1260     04C3                     l913:
  1261                           
  1262                           ;./lcd.h: 100:    Lcd_Port(y>>4);
  1263     04C3  0873               	movf	Lcd_Write_Char@y,w
  1264     04C4  00F1               	movwf	??_Lcd_Write_Char
  1265     04C5  3004               	movlw	4
  1266     04C6                     u385:
  1267     04C6  1003               	clrc
  1268     04C7  0CF1               	rrf	??_Lcd_Write_Char,f
  1269     04C8  3EFF               	addlw	-1
  1270     04C9  1D03               	skipz
  1271     04CA  2CC6               	goto	u385
  1272     04CB  0871               	movf	??_Lcd_Write_Char,w
  1273     04CC  120A  118A  2497  120A  118A  	fcall	_Lcd_Port
  1274     04D1                     l915:
  1275                           
  1276                           ;./lcd.h: 101:    RD3 = 1;
  1277     04D1  1283               	bcf	3,5	;RP0=0, select bank0
  1278     04D2  1303               	bcf	3,6	;RP1=0, select bank0
  1279     04D3  1588               	bsf	8,3	;volatile
  1280     04D4                     l917:
  1281                           
  1282                           ;./lcd.h: 102:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  1283     04D4  301A               	movlw	26
  1284     04D5  00F1               	movwf	??_Lcd_Write_Char
  1285     04D6                     u677:
  1286     04D6  0BF1               	decfsz	??_Lcd_Write_Char,f
  1287     04D7  2CD6               	goto	u677
  1288     04D8  0000               	nop
  1289     04D9                     l919:
  1290                           
  1291                           ;./lcd.h: 103:    RD3 = 0;
  1292     04D9  1283               	bcf	3,5	;RP0=0, select bank0
  1293     04DA  1303               	bcf	3,6	;RP1=0, select bank0
  1294     04DB  1188               	bcf	8,3	;volatile
  1295     04DC                     l921:
  1296                           
  1297                           ;./lcd.h: 104:    Lcd_Port(temp);
  1298     04DC  0872               	movf	Lcd_Write_Char@temp,w
  1299     04DD  120A  118A  2497  120A  118A  	fcall	_Lcd_Port
  1300     04E2                     l923:
  1301                           
  1302                           ;./lcd.h: 105:    RD3 = 1;
  1303     04E2  1283               	bcf	3,5	;RP0=0, select bank0
  1304     04E3  1303               	bcf	3,6	;RP1=0, select bank0
  1305     04E4  1588               	bsf	8,3	;volatile
  1306     04E5                     l925:
  1307                           
  1308                           ;./lcd.h: 106:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  1309     04E5  301A               	movlw	26
  1310     04E6  00F1               	movwf	??_Lcd_Write_Char
  1311     04E7                     u687:
  1312     04E7  0BF1               	decfsz	??_Lcd_Write_Char,f
  1313     04E8  2CE7               	goto	u687
  1314     04E9  0000               	nop
  1315     04EA                     l927:
  1316                           
  1317                           ;./lcd.h: 107:    RD3 = 0;
  1318     04EA  1283               	bcf	3,5	;RP0=0, select bank0
  1319     04EB  1303               	bcf	3,6	;RP1=0, select bank0
  1320     04EC  1188               	bcf	8,3	;volatile
  1321     04ED                     l73:
  1322     04ED  0008               	return
  1323     04EE                     __end_of_Lcd_Write_Char:
  1324                           
  1325                           	psect	text3
  1326     05AA                     __ptext3:	
  1327 ;; *************** function _Lcd_Set_Cursor *****************
  1328 ;; Defined at:
  1329 ;;		line 52 in file "./lcd.h"
  1330 ;; Parameters:    Size  Location     Type
  1331 ;;  a               1    wreg     unsigned char 
  1332 ;;  b               1    4[COMMON] unsigned char 
  1333 ;; Auto vars:     Size  Location     Type
  1334 ;;  a               1    6[COMMON] unsigned char 
  1335 ;;  temp            1    9[COMMON] unsigned char 
  1336 ;;  y               1    8[COMMON] unsigned char 
  1337 ;;  z               1    7[COMMON] unsigned char 
  1338 ;; Return value:  Size  Location     Type
  1339 ;;                  1    wreg      void 
  1340 ;; Registers used:
  1341 ;;		wreg, status,2, status,0, pclath, cstack
  1342 ;; Tracked objects:
  1343 ;;		On entry : 0/0
  1344 ;;		On exit  : 0/0
  1345 ;;		Unchanged: 0/0
  1346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1347 ;;      Params:         1       0       0       0       0
  1348 ;;      Locals:         4       0       0       0       0
  1349 ;;      Temps:          1       0       0       0       0
  1350 ;;      Totals:         6       0       0       0       0
  1351 ;;Total ram usage:        6 bytes
  1352 ;; Hardware stack levels used: 1
  1353 ;; Hardware stack levels required when called: 2
  1354 ;; This function calls:
  1355 ;;		_Lcd_Cmd
  1356 ;; This function is called by:
  1357 ;;		_main
  1358 ;; This function uses a non-reentrant model
  1359 ;;
  1360                           
  1361     05AA                     _Lcd_Set_Cursor:	
  1362                           ;psect for function _Lcd_Set_Cursor
  1363                           
  1364                           
  1365                           ;incstack = 0
  1366                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  1367                           ;Lcd_Set_Cursor@a stored from wreg
  1368     05AA  00F6               	movwf	Lcd_Set_Cursor@a
  1369     05AB                     l931:
  1370                           
  1371                           ;./lcd.h: 52: void Lcd_Set_Cursor(char a, char b);./lcd.h: 53: {;./lcd.h: 54:  char temp
      +                          ,z,y;;./lcd.h: 55:  if(a == 1)
  1372     05AB  0376               	decf	Lcd_Set_Cursor@a,w
  1373     05AC  1D03               	btfss	3,2
  1374     05AD  2DAF               	goto	u391
  1375     05AE  2DB0               	goto	u390
  1376     05AF                     u391:
  1377     05AF  2DCD               	goto	l941
  1378     05B0                     u390:
  1379     05B0                     l933:
  1380                           
  1381                           ;./lcd.h: 56:  {;./lcd.h: 57:    temp = 0x80 + b - 1;
  1382     05B0  0874               	movf	Lcd_Set_Cursor@b,w
  1383     05B1  3E7F               	addlw	127
  1384     05B2  00F9               	movwf	Lcd_Set_Cursor@temp
  1385                           
  1386                           ;./lcd.h: 58:   z = temp>>4;
  1387     05B3  0879               	movf	Lcd_Set_Cursor@temp,w
  1388     05B4  00F5               	movwf	??_Lcd_Set_Cursor
  1389     05B5  3004               	movlw	4
  1390     05B6                     u405:
  1391     05B6  1003               	clrc
  1392     05B7  0CF5               	rrf	??_Lcd_Set_Cursor,f
  1393     05B8  3EFF               	addlw	-1
  1394     05B9  1D03               	skipz
  1395     05BA  2DB6               	goto	u405
  1396     05BB  0875               	movf	??_Lcd_Set_Cursor,w
  1397     05BC  00F7               	movwf	Lcd_Set_Cursor@z
  1398     05BD                     l935:
  1399                           
  1400                           ;./lcd.h: 59:   y = temp & 0x0F;
  1401     05BD  0879               	movf	Lcd_Set_Cursor@temp,w
  1402     05BE  390F               	andlw	15
  1403     05BF  00F8               	movwf	Lcd_Set_Cursor@y
  1404     05C0                     l937:
  1405                           
  1406                           ;./lcd.h: 60:   Lcd_Cmd(z);
  1407     05C0  0877               	movf	Lcd_Set_Cursor@z,w
  1408     05C1  120A  118A  247D  120A  118A  	fcall	_Lcd_Cmd
  1409     05C6                     l939:
  1410                           
  1411                           ;./lcd.h: 61:   Lcd_Cmd(y);
  1412     05C6  0878               	movf	Lcd_Set_Cursor@y,w
  1413     05C7  120A  118A  247D  120A  118A  	fcall	_Lcd_Cmd
  1414                           
  1415                           ;./lcd.h: 62:  }
  1416     05CC  2DEF               	goto	l67
  1417     05CD                     l941:
  1418     05CD  3002               	movlw	2
  1419     05CE  0676               	xorwf	Lcd_Set_Cursor@a,w
  1420     05CF  1D03               	btfss	3,2
  1421     05D0  2DD2               	goto	u411
  1422     05D1  2DD3               	goto	u410
  1423     05D2                     u411:
  1424     05D2  2DEF               	goto	l67
  1425     05D3                     u410:
  1426     05D3                     l943:
  1427                           
  1428                           ;./lcd.h: 64:  {;./lcd.h: 65:   temp = 0xC0 + b - 1;
  1429     05D3  0874               	movf	Lcd_Set_Cursor@b,w
  1430     05D4  3EBF               	addlw	191
  1431     05D5  00F9               	movwf	Lcd_Set_Cursor@temp
  1432                           
  1433                           ;./lcd.h: 66:   z = temp>>4;
  1434     05D6  0879               	movf	Lcd_Set_Cursor@temp,w
  1435     05D7  00F5               	movwf	??_Lcd_Set_Cursor
  1436     05D8  3004               	movlw	4
  1437     05D9                     u425:
  1438     05D9  1003               	clrc
  1439     05DA  0CF5               	rrf	??_Lcd_Set_Cursor,f
  1440     05DB  3EFF               	addlw	-1
  1441     05DC  1D03               	skipz
  1442     05DD  2DD9               	goto	u425
  1443     05DE  0875               	movf	??_Lcd_Set_Cursor,w
  1444     05DF  00F7               	movwf	Lcd_Set_Cursor@z
  1445     05E0                     l945:
  1446                           
  1447                           ;./lcd.h: 67:   y = temp & 0x0F;
  1448     05E0  0879               	movf	Lcd_Set_Cursor@temp,w
  1449     05E1  390F               	andlw	15
  1450     05E2  00F8               	movwf	Lcd_Set_Cursor@y
  1451     05E3                     l947:
  1452                           
  1453                           ;./lcd.h: 68:   Lcd_Cmd(z);
  1454     05E3  0877               	movf	Lcd_Set_Cursor@z,w
  1455     05E4  120A  118A  247D  120A  118A  	fcall	_Lcd_Cmd
  1456     05E9                     l949:
  1457                           
  1458                           ;./lcd.h: 69:   Lcd_Cmd(y);
  1459     05E9  0878               	movf	Lcd_Set_Cursor@y,w
  1460     05EA  120A  118A  247D  120A  118A  	fcall	_Lcd_Cmd
  1461     05EF                     l67:
  1462     05EF  0008               	return
  1463     05F0                     __end_of_Lcd_Set_Cursor:
  1464                           
  1465                           	psect	text4
  1466     05F0                     __ptext4:	
  1467 ;; *************** function _Lcd_Init *****************
  1468 ;; Defined at:
  1469 ;;		line 73 in file "./lcd.h"
  1470 ;; Parameters:    Size  Location     Type
  1471 ;;		None
  1472 ;; Auto vars:     Size  Location     Type
  1473 ;;		None
  1474 ;; Return value:  Size  Location     Type
  1475 ;;                  1    wreg      void 
  1476 ;; Registers used:
  1477 ;;		wreg, status,2, status,0, pclath, cstack
  1478 ;; Tracked objects:
  1479 ;;		On entry : 0/0
  1480 ;;		On exit  : 0/0
  1481 ;;		Unchanged: 0/0
  1482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1483 ;;      Params:         0       0       0       0       0
  1484 ;;      Locals:         0       0       0       0       0
  1485 ;;      Temps:          2       0       0       0       0
  1486 ;;      Totals:         2       0       0       0       0
  1487 ;;Total ram usage:        2 bytes
  1488 ;; Hardware stack levels used: 1
  1489 ;; Hardware stack levels required when called: 2
  1490 ;; This function calls:
  1491 ;;		_Lcd_Cmd
  1492 ;;		_Lcd_Port
  1493 ;; This function is called by:
  1494 ;;		_main
  1495 ;; This function uses a non-reentrant model
  1496 ;;
  1497                           
  1498     05F0                     _Lcd_Init:	
  1499                           ;psect for function _Lcd_Init
  1500                           
  1501     05F0                     l951:	
  1502                           ;incstack = 0
  1503                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  1504                           
  1505                           
  1506                           ;./lcd.h: 75:     TRISD = 0x00;
  1507     05F0  1683               	bsf	3,5	;RP0=1, select bank1
  1508     05F1  1303               	bcf	3,6	;RP1=0, select bank1
  1509     05F2  0188               	clrf	8	;volatile
  1510     05F3                     l953:
  1511                           
  1512                           ;./lcd.h: 77:     Lcd_Port(0x00);
  1513     05F3  3000               	movlw	0
  1514     05F4  120A  118A  2497  120A  118A  	fcall	_Lcd_Port
  1515     05F9                     l955:
  1516                           
  1517                           ;./lcd.h: 78:    _delay((unsigned long)((20)*(8000000/4000.0)));
  1518     05F9  3034               	movlw	52
  1519     05FA  00F5               	movwf	??_Lcd_Init+1
  1520     05FB  30F1               	movlw	241
  1521     05FC  00F4               	movwf	??_Lcd_Init
  1522     05FD                     u697:
  1523     05FD  0BF4               	decfsz	??_Lcd_Init,f
  1524     05FE  2DFD               	goto	u697
  1525     05FF  0BF5               	decfsz	??_Lcd_Init+1,f
  1526     0600  2DFD               	goto	u697
  1527     0601  2E02               	nop2
  1528     0602                     l957:
  1529                           
  1530                           ;./lcd.h: 79:   Lcd_Cmd(0x03);
  1531     0602  3003               	movlw	3
  1532     0603  120A  118A  247D  120A  118A  	fcall	_Lcd_Cmd
  1533     0608                     l959:
  1534                           
  1535                           ;./lcd.h: 80:  _delay((unsigned long)((5)*(8000000/4000.0)));
  1536     0608  300D               	movlw	13
  1537     0609  00F5               	movwf	??_Lcd_Init+1
  1538     060A  30FB               	movlw	251
  1539     060B  00F4               	movwf	??_Lcd_Init
  1540     060C                     u707:
  1541     060C  0BF4               	decfsz	??_Lcd_Init,f
  1542     060D  2E0C               	goto	u707
  1543     060E  0BF5               	decfsz	??_Lcd_Init+1,f
  1544     060F  2E0C               	goto	u707
  1545     0610  2E11               	nop2
  1546     0611                     l961:
  1547                           
  1548                           ;./lcd.h: 81:   Lcd_Cmd(0x03);
  1549     0611  3003               	movlw	3
  1550     0612  120A  118A  247D  120A  118A  	fcall	_Lcd_Cmd
  1551     0617                     l963:
  1552                           
  1553                           ;./lcd.h: 82:  _delay((unsigned long)((11)*(8000000/4000.0)));
  1554     0617  301D               	movlw	29
  1555     0618  00F5               	movwf	??_Lcd_Init+1
  1556     0619  3091               	movlw	145
  1557     061A  00F4               	movwf	??_Lcd_Init
  1558     061B                     u717:
  1559     061B  0BF4               	decfsz	??_Lcd_Init,f
  1560     061C  2E1B               	goto	u717
  1561     061D  0BF5               	decfsz	??_Lcd_Init+1,f
  1562     061E  2E1B               	goto	u717
  1563     061F                     l965:
  1564                           
  1565                           ;./lcd.h: 83:   Lcd_Cmd(0x03);
  1566     061F  3003               	movlw	3
  1567     0620  120A  118A  247D  120A  118A  	fcall	_Lcd_Cmd
  1568     0625                     l967:
  1569                           
  1570                           ;./lcd.h: 85:   Lcd_Cmd(0x02);
  1571     0625  3002               	movlw	2
  1572     0626  120A  118A  247D  120A  118A  	fcall	_Lcd_Cmd
  1573     062B                     l969:
  1574                           
  1575                           ;./lcd.h: 86:   Lcd_Cmd(0x02);
  1576     062B  3002               	movlw	2
  1577     062C  120A  118A  247D  120A  118A  	fcall	_Lcd_Cmd
  1578     0631                     l971:
  1579                           
  1580                           ;./lcd.h: 87:   Lcd_Cmd(0x08);
  1581     0631  3008               	movlw	8
  1582     0632  120A  118A  247D  120A  118A  	fcall	_Lcd_Cmd
  1583     0637                     l973:
  1584                           
  1585                           ;./lcd.h: 88:   Lcd_Cmd(0x00);
  1586     0637  3000               	movlw	0
  1587     0638  120A  118A  247D  120A  118A  	fcall	_Lcd_Cmd
  1588     063D                     l975:
  1589                           
  1590                           ;./lcd.h: 89:   Lcd_Cmd(0x0C);
  1591     063D  300C               	movlw	12
  1592     063E  120A  118A  247D  120A  118A  	fcall	_Lcd_Cmd
  1593     0643                     l977:
  1594                           
  1595                           ;./lcd.h: 90:   Lcd_Cmd(0x00);
  1596     0643  3000               	movlw	0
  1597     0644  120A  118A  247D  120A  118A  	fcall	_Lcd_Cmd
  1598     0649                     l979:
  1599                           
  1600                           ;./lcd.h: 91:   Lcd_Cmd(0x06);
  1601     0649  3006               	movlw	6
  1602     064A  120A  118A  247D  120A  118A  	fcall	_Lcd_Cmd
  1603     064F                     l70:
  1604     064F  0008               	return
  1605     0650                     __end_of_Lcd_Init:
  1606                           
  1607                           	psect	text5
  1608     045D                     __ptext5:	
  1609 ;; *************** function _Lcd_Clear *****************
  1610 ;; Defined at:
  1611 ;;		line 46 in file "./lcd.h"
  1612 ;; Parameters:    Size  Location     Type
  1613 ;;		None
  1614 ;; Auto vars:     Size  Location     Type
  1615 ;;		None
  1616 ;; Return value:  Size  Location     Type
  1617 ;;                  1    wreg      void 
  1618 ;; Registers used:
  1619 ;;		wreg, status,2, status,0, pclath, cstack
  1620 ;; Tracked objects:
  1621 ;;		On entry : 0/0
  1622 ;;		On exit  : 0/0
  1623 ;;		Unchanged: 0/0
  1624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1625 ;;      Params:         0       0       0       0       0
  1626 ;;      Locals:         0       0       0       0       0
  1627 ;;      Temps:          0       0       0       0       0
  1628 ;;      Totals:         0       0       0       0       0
  1629 ;;Total ram usage:        0 bytes
  1630 ;; Hardware stack levels used: 1
  1631 ;; Hardware stack levels required when called: 2
  1632 ;; This function calls:
  1633 ;;		_Lcd_Cmd
  1634 ;; This function is called by:
  1635 ;;		_main
  1636 ;; This function uses a non-reentrant model
  1637 ;;
  1638                           
  1639     045D                     _Lcd_Clear:	
  1640                           ;psect for function _Lcd_Clear
  1641                           
  1642     045D                     l929:	
  1643                           ;incstack = 0
  1644                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  1645                           
  1646                           
  1647                           ;./lcd.h: 48:  Lcd_Cmd(0);
  1648     045D  3000               	movlw	0
  1649     045E  120A  118A  247D  120A  118A  	fcall	_Lcd_Cmd
  1650                           
  1651                           ;./lcd.h: 49:  Lcd_Cmd(1);
  1652     0463  3001               	movlw	1
  1653     0464  120A  118A  247D  120A  118A  	fcall	_Lcd_Cmd
  1654     0469                     l61:
  1655     0469  0008               	return
  1656     046A                     __end_of_Lcd_Clear:
  1657                           
  1658                           	psect	text6
  1659     047D                     __ptext6:	
  1660 ;; *************** function _Lcd_Cmd *****************
  1661 ;; Defined at:
  1662 ;;		line 37 in file "./lcd.h"
  1663 ;; Parameters:    Size  Location     Type
  1664 ;;  a               1    wreg     unsigned char 
  1665 ;; Auto vars:     Size  Location     Type
  1666 ;;  a               1    3[COMMON] unsigned char 
  1667 ;; Return value:  Size  Location     Type
  1668 ;;                  1    wreg      void 
  1669 ;; Registers used:
  1670 ;;		wreg, status,2, status,0, pclath, cstack
  1671 ;; Tracked objects:
  1672 ;;		On entry : 0/0
  1673 ;;		On exit  : 0/0
  1674 ;;		Unchanged: 0/0
  1675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1676 ;;      Params:         0       0       0       0       0
  1677 ;;      Locals:         1       0       0       0       0
  1678 ;;      Temps:          2       0       0       0       0
  1679 ;;      Totals:         3       0       0       0       0
  1680 ;;Total ram usage:        3 bytes
  1681 ;; Hardware stack levels used: 1
  1682 ;; Hardware stack levels required when called: 1
  1683 ;; This function calls:
  1684 ;;		_Lcd_Port
  1685 ;; This function is called by:
  1686 ;;		_Lcd_Clear
  1687 ;;		_Lcd_Set_Cursor
  1688 ;;		_Lcd_Init
  1689 ;;		_Lcd_Shift_Right
  1690 ;;		_Lcd_Shift_Left
  1691 ;; This function uses a non-reentrant model
  1692 ;;
  1693                           
  1694     047D                     _Lcd_Cmd:	
  1695                           ;psect for function _Lcd_Cmd
  1696                           
  1697                           
  1698                           ;incstack = 0
  1699                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  1700                           ;Lcd_Cmd@a stored from wreg
  1701     047D  00F3               	movwf	Lcd_Cmd@a
  1702     047E                     l899:
  1703                           
  1704                           ;./lcd.h: 37: void Lcd_Cmd(char a);./lcd.h: 38: {;./lcd.h: 39:  RD2 = 0;
  1705     047E  1283               	bcf	3,5	;RP0=0, select bank0
  1706     047F  1303               	bcf	3,6	;RP1=0, select bank0
  1707     0480  1108               	bcf	8,2	;volatile
  1708     0481                     l901:
  1709                           
  1710                           ;./lcd.h: 40:  Lcd_Port(a);
  1711     0481  0873               	movf	Lcd_Cmd@a,w
  1712     0482  120A  118A  2497  120A  118A  	fcall	_Lcd_Port
  1713     0487                     l903:
  1714                           
  1715                           ;./lcd.h: 41:  RD3 = 1;
  1716     0487  1283               	bcf	3,5	;RP0=0, select bank0
  1717     0488  1303               	bcf	3,6	;RP1=0, select bank0
  1718     0489  1588               	bsf	8,3	;volatile
  1719     048A                     l905:
  1720                           
  1721                           ;./lcd.h: 42:         _delay((unsigned long)((4)*(8000000/4000.0)));
  1722     048A  300B               	movlw	11
  1723     048B  00F2               	movwf	??_Lcd_Cmd+1
  1724     048C  3062               	movlw	98
  1725     048D  00F1               	movwf	??_Lcd_Cmd
  1726     048E                     u727:
  1727     048E  0BF1               	decfsz	??_Lcd_Cmd,f
  1728     048F  2C8E               	goto	u727
  1729     0490  0BF2               	decfsz	??_Lcd_Cmd+1,f
  1730     0491  2C8E               	goto	u727
  1731     0492  0000               	nop
  1732     0493                     l907:
  1733                           
  1734                           ;./lcd.h: 43:         RD3 = 0;
  1735     0493  1283               	bcf	3,5	;RP0=0, select bank0
  1736     0494  1303               	bcf	3,6	;RP1=0, select bank0
  1737     0495  1188               	bcf	8,3	;volatile
  1738     0496                     l58:
  1739     0496  0008               	return
  1740     0497                     __end_of_Lcd_Cmd:
  1741                           
  1742                           	psect	text7
  1743     0497                     __ptext7:	
  1744 ;; *************** function _Lcd_Port *****************
  1745 ;; Defined at:
  1746 ;;		line 15 in file "./lcd.h"
  1747 ;; Parameters:    Size  Location     Type
  1748 ;;  a               1    wreg     unsigned char 
  1749 ;; Auto vars:     Size  Location     Type
  1750 ;;  a               1    0[COMMON] unsigned char 
  1751 ;; Return value:  Size  Location     Type
  1752 ;;                  1    wreg      void 
  1753 ;; Registers used:
  1754 ;;		wreg
  1755 ;; Tracked objects:
  1756 ;;		On entry : 0/0
  1757 ;;		On exit  : 0/0
  1758 ;;		Unchanged: 0/0
  1759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1760 ;;      Params:         0       0       0       0       0
  1761 ;;      Locals:         1       0       0       0       0
  1762 ;;      Temps:          0       0       0       0       0
  1763 ;;      Totals:         1       0       0       0       0
  1764 ;;Total ram usage:        1 bytes
  1765 ;; Hardware stack levels used: 1
  1766 ;; This function calls:
  1767 ;;		Nothing
  1768 ;; This function is called by:
  1769 ;;		_Lcd_Cmd
  1770 ;;		_Lcd_Init
  1771 ;;		_Lcd_Write_Char
  1772 ;; This function uses a non-reentrant model
  1773 ;;
  1774                           
  1775     0497                     _Lcd_Port:	
  1776                           ;psect for function _Lcd_Port
  1777                           
  1778                           
  1779                           ;incstack = 0
  1780                           ; Regs used in _Lcd_Port: [wreg]
  1781                           ;Lcd_Port@a stored from wreg
  1782     0497  00F0               	movwf	Lcd_Port@a
  1783     0498                     l889:
  1784                           
  1785                           ;./lcd.h: 15: void Lcd_Port(char a);./lcd.h: 16: {;./lcd.h: 17:  if(a & 1)
  1786     0498  1C70               	btfss	Lcd_Port@a,0
  1787     0499  2C9B               	goto	u341
  1788     049A  2C9C               	goto	u340
  1789     049B                     u341:
  1790     049B  2CA0               	goto	l47
  1791     049C                     u340:
  1792     049C                     l891:
  1793                           
  1794                           ;./lcd.h: 18:   RD4 = 1;
  1795     049C  1283               	bcf	3,5	;RP0=0, select bank0
  1796     049D  1303               	bcf	3,6	;RP1=0, select bank0
  1797     049E  1608               	bsf	8,4	;volatile
  1798     049F  2CA3               	goto	l48
  1799     04A0                     l47:	
  1800                           ;./lcd.h: 19:  else
  1801                           
  1802                           
  1803                           ;./lcd.h: 20:   RD4 = 0;
  1804     04A0  1283               	bcf	3,5	;RP0=0, select bank0
  1805     04A1  1303               	bcf	3,6	;RP1=0, select bank0
  1806     04A2  1208               	bcf	8,4	;volatile
  1807     04A3                     l48:
  1808                           
  1809                           ;./lcd.h: 22:  if(a & 2)
  1810     04A3  1CF0               	btfss	Lcd_Port@a,1
  1811     04A4  2CA6               	goto	u351
  1812     04A5  2CA7               	goto	u350
  1813     04A6                     u351:
  1814     04A6  2CA9               	goto	l49
  1815     04A7                     u350:
  1816     04A7                     l893:
  1817                           
  1818                           ;./lcd.h: 23:   RD5 = 1;
  1819     04A7  1688               	bsf	8,5	;volatile
  1820     04A8  2CAA               	goto	l50
  1821     04A9                     l49:	
  1822                           ;./lcd.h: 24:  else
  1823                           
  1824                           
  1825                           ;./lcd.h: 25:   RD5 = 0;
  1826     04A9  1288               	bcf	8,5	;volatile
  1827     04AA                     l50:
  1828                           
  1829                           ;./lcd.h: 27:  if(a & 4)
  1830     04AA  1D70               	btfss	Lcd_Port@a,2
  1831     04AB  2CAD               	goto	u361
  1832     04AC  2CAE               	goto	u360
  1833     04AD                     u361:
  1834     04AD  2CB0               	goto	l51
  1835     04AE                     u360:
  1836     04AE                     l895:
  1837                           
  1838                           ;./lcd.h: 28:   RD6 = 1;
  1839     04AE  1708               	bsf	8,6	;volatile
  1840     04AF  2CB1               	goto	l52
  1841     04B0                     l51:	
  1842                           ;./lcd.h: 29:  else
  1843                           
  1844                           
  1845                           ;./lcd.h: 30:   RD6 = 0;
  1846     04B0  1308               	bcf	8,6	;volatile
  1847     04B1                     l52:
  1848                           
  1849                           ;./lcd.h: 32:  if(a & 8)
  1850     04B1  1DF0               	btfss	Lcd_Port@a,3
  1851     04B2  2CB4               	goto	u371
  1852     04B3  2CB5               	goto	u370
  1853     04B4                     u371:
  1854     04B4  2CB7               	goto	l53
  1855     04B5                     u370:
  1856     04B5                     l897:
  1857                           
  1858                           ;./lcd.h: 33:   RD7 = 1;
  1859     04B5  1788               	bsf	8,7	;volatile
  1860     04B6  2CB8               	goto	l55
  1861     04B7                     l53:	
  1862                           ;./lcd.h: 34:  else
  1863                           
  1864                           
  1865                           ;./lcd.h: 35:   RD7 = 0;
  1866     04B7  1388               	bcf	8,7	;volatile
  1867     04B8                     l55:
  1868     04B8  0008               	return
  1869     04B9                     __end_of_Lcd_Port:
  1870                           
  1871                           	psect	text8
  1872     04EE                     __ptext8:	
  1873 ;; *************** function _ADC_Read *****************
  1874 ;; Defined at:
  1875 ;;		line 38 in file "./analog.h"
  1876 ;; Parameters:    Size  Location     Type
  1877 ;;  ANC             2    0[COMMON] int 
  1878 ;; Auto vars:     Size  Location     Type
  1879 ;;		None
  1880 ;; Return value:  Size  Location     Type
  1881 ;;                  2    0[COMMON] int 
  1882 ;; Registers used:
  1883 ;;		wreg, status,2, status,0, btemp+1
  1884 ;; Tracked objects:
  1885 ;;		On entry : 0/0
  1886 ;;		On exit  : 0/0
  1887 ;;		Unchanged: 0/0
  1888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1889 ;;      Params:         2       0       0       0       0
  1890 ;;      Locals:         0       0       0       0       0
  1891 ;;      Temps:          1       0       0       0       0
  1892 ;;      Totals:         3       0       0       0       0
  1893 ;;Total ram usage:        3 bytes
  1894 ;; Hardware stack levels used: 1
  1895 ;; This function calls:
  1896 ;;		Nothing
  1897 ;; This function is called by:
  1898 ;;		_main
  1899 ;; This function uses a non-reentrant model
  1900 ;;
  1901                           
  1902     04EE                     _ADC_Read:	
  1903                           ;psect for function _ADC_Read
  1904                           
  1905     04EE                     l991:	
  1906                           ;incstack = 0
  1907                           ; Regs used in _ADC_Read: [wreg+status,2+status,0+btemp+1]
  1908                           
  1909                           
  1910                           ;./analog.h: 38: int ADC_Read(int ANC);./analog.h: 39: {;./analog.h: 40:     if(ANC<0 ||
      +                           ANC>7)
  1911     04EE  1BF1               	btfsc	ADC_Read@ANC+1,7
  1912     04EF  2CF1               	goto	u461
  1913     04F0  2CF2               	goto	u460
  1914     04F1                     u461:
  1915     04F1  2CFF               	goto	l995
  1916     04F2                     u460:
  1917     04F2                     l993:
  1918     04F2  0871               	movf	ADC_Read@ANC+1,w
  1919     04F3  3A80               	xorlw	128
  1920     04F4  00FF               	movwf	btemp+1
  1921     04F5  3080               	movlw	128
  1922     04F6  027F               	subwf	btemp+1,w
  1923     04F7  1D03               	skipz
  1924     04F8  2CFB               	goto	u475
  1925     04F9  3008               	movlw	8
  1926     04FA  0270               	subwf	ADC_Read@ANC,w
  1927     04FB                     u475:
  1928     04FB  1C03               	skipc
  1929     04FC  2CFE               	goto	u471
  1930     04FD  2CFF               	goto	u470
  1931     04FE                     u471:
  1932     04FE  2D02               	goto	l999
  1933     04FF                     u470:
  1934     04FF                     l995:
  1935                           
  1936                           ;./analog.h: 41:     { return 0;}
  1937     04FF  01F0               	clrf	?_ADC_Read
  1938     0500  01F1               	clrf	?_ADC_Read+1
  1939     0501  2D27               	goto	l103
  1940     0502                     l999:
  1941                           
  1942                           ;./analog.h: 42:     ADCON0 &= 0b11000101;
  1943     0502  30C5               	movlw	197
  1944     0503  00FF               	movwf	btemp+1
  1945     0504  087F               	movf	btemp+1,w
  1946     0505  1283               	bcf	3,5	;RP0=0, select bank0
  1947     0506  1303               	bcf	3,6	;RP1=0, select bank0
  1948     0507  059F               	andwf	31,f	;volatile
  1949                           
  1950                           ;./analog.h: 43:     ADCON0 |= ANC<<3;
  1951     0508  0870               	movf	ADC_Read@ANC,w	;volatile
  1952     0509  00F2               	movwf	??_ADC_Read
  1953     050A  3002               	movlw	2
  1954     050B                     u485:
  1955     050B  1003               	clrc
  1956     050C  0DF2               	rlf	??_ADC_Read,f
  1957     050D  3EFF               	addlw	-1
  1958     050E  1D03               	skipz
  1959     050F  2D0B               	goto	u485
  1960     0510  1003               	clrc
  1961     0511  0D72               	rlf	??_ADC_Read,w
  1962     0512  00FF               	movwf	btemp+1
  1963     0513  087F               	movf	btemp+1,w
  1964     0514  049F               	iorwf	31,f	;volatile
  1965     0515                     l1001:
  1966                           
  1967                           ;./analog.h: 45:     _delay((unsigned long)((30)*(8000000/4000000.0)));
  1968     0515  3013               	movlw	19
  1969     0516  00F2               	movwf	??_ADC_Read
  1970     0517                     u737:
  1971     0517  0BF2               	decfsz	??_ADC_Read,f
  1972     0518  2D17               	goto	u737
  1973     0519  2D1A               	nop2
  1974     051A                     l1003:
  1975                           
  1976                           ;./analog.h: 46:     GO_DONE = 1;
  1977     051A  1283               	bcf	3,5	;RP0=0, select bank0
  1978     051B  1303               	bcf	3,6	;RP1=0, select bank0
  1979     051C  151F               	bsf	31,2	;volatile
  1980     051D                     l104:	
  1981                           ;./analog.h: 47:     while(ADCON0bits.GO_DONE);
  1982                           
  1983     051D  191F               	btfsc	31,2	;volatile
  1984     051E  2D20               	goto	u491
  1985     051F  2D21               	goto	u490
  1986     0520                     u491:
  1987     0520  2D1D               	goto	l104
  1988     0521                     u490:
  1989     0521                     l1005:
  1990                           
  1991                           ;./analog.h: 49:     return ((ADRESH << 8) + ADRESL);
  1992     0521  081E               	movf	30,w	;volatile
  1993     0522  00F1               	movwf	?_ADC_Read+1
  1994     0523  1683               	bsf	3,5	;RP0=1, select bank1
  1995     0524  1303               	bcf	3,6	;RP1=0, select bank1
  1996     0525  081E               	movf	30,w	;volatile
  1997     0526  00F0               	movwf	?_ADC_Read
  1998     0527                     l103:
  1999     0527  0008               	return
  2000     0528                     __end_of_ADC_Read:
  2001                           
  2002                           	psect	text9
  2003     0454                     __ptext9:	
  2004 ;; *************** function _ADC_Init *****************
  2005 ;; Defined at:
  2006 ;;		line 15 in file "./analog.h"
  2007 ;; Parameters:    Size  Location     Type
  2008 ;;		None
  2009 ;; Auto vars:     Size  Location     Type
  2010 ;;		None
  2011 ;; Return value:  Size  Location     Type
  2012 ;;                  1    wreg      void 
  2013 ;; Registers used:
  2014 ;;		wreg
  2015 ;; Tracked objects:
  2016 ;;		On entry : 0/0
  2017 ;;		On exit  : 0/0
  2018 ;;		Unchanged: 0/0
  2019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2020 ;;      Params:         0       0       0       0       0
  2021 ;;      Locals:         0       0       0       0       0
  2022 ;;      Temps:          0       0       0       0       0
  2023 ;;      Totals:         0       0       0       0       0
  2024 ;;Total ram usage:        0 bytes
  2025 ;; Hardware stack levels used: 1
  2026 ;; This function calls:
  2027 ;;		Nothing
  2028 ;; This function is called by:
  2029 ;;		_main
  2030 ;; This function uses a non-reentrant model
  2031 ;;
  2032                           
  2033     0454                     _ADC_Init:	
  2034                           ;psect for function _ADC_Init
  2035                           
  2036     0454                     l989:	
  2037                           ;incstack = 0
  2038                           ; Regs used in _ADC_Init: [wreg]
  2039                           
  2040                           
  2041                           ;./analog.h: 19:     ADCON0 = 0x41;
  2042     0454  3041               	movlw	65
  2043     0455  1283               	bcf	3,5	;RP0=0, select bank0
  2044     0456  1303               	bcf	3,6	;RP1=0, select bank0
  2045     0457  009F               	movwf	31	;volatile
  2046                           
  2047                           ;./analog.h: 20:     ADCON1 = 0x80;
  2048     0458  3080               	movlw	128
  2049     0459  1683               	bsf	3,5	;RP0=1, select bank1
  2050     045A  1303               	bcf	3,6	;RP1=0, select bank1
  2051     045B  009F               	movwf	31	;volatile
  2052     045C                     l97:
  2053     045C  0008               	return
  2054     045D                     __end_of_ADC_Init:
  2055     007E                     btemp	set	126	;btemp
  2056     007E                     wtemp0	set	126
  2057                           
  2058                           	psect	config
  2059                           
  2060                           ;Config register CONFIG @ 0x2007
  2061                           ;	Oscillator Selection bits
  2062                           ;	FOSC = HS, HS oscillator
  2063                           ;	Watchdog Timer Enable bit
  2064                           ;	WDTE = OFF, WDT disabled
  2065                           ;	Power-up Timer Enable bit
  2066                           ;	PWRTE = OFF, PWRT disabled
  2067                           ;	Brown-out Reset Enable bit
  2068                           ;	BOREN = ON, BOR enabled
  2069                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  2070                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  2071                           ;	Data EEPROM Memory Code Protection bit
  2072                           ;	CPD = OFF, Data EEPROM code protection off
  2073                           ;	Flash Program Memory Write Enable bits
  2074                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  2075                           ;	In-Circuit Debugger Mode bit
  2076                           ;	DEBUG = 0x1, unprogrammed default
  2077                           ;	Flash Program Memory Code Protection bit
  2078                           ;	CP = OFF, Code protection off
  2079     2007                     	org	8199
  2080     2007  3F7A               	dw	16250

Data Sizes:
    Strings     36
    Constant    0
    Data        64
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      12
    BANK0            80     79      79
    BANK1            80      0      64
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    f$.$buffer	PTR unsigned char  size(1) Largest target is 0

    f$.$source	PTR const unsigned char  size(1) Largest target is 0

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 17
		 -> Lcd_Write_Int@str(BANK0[16]), STR_2(CODE[17]), STR_3(CODE[16]), 

    main@F1529$port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), PORTB(SFR0[1]), PORTE(SFR0[1]), 

    main@F1531$port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), PORTB(SFR0[1]), PORTE(SFR0[1]), 

    main@led$port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), PORTB(SFR0[1]), PORTE(SFR0[1]), 

    S607$buffer	PTR unsigned char  size(1) Largest target is 0

    S607$source	PTR const unsigned char  size(1) Largest target is 0

    S97_Pin$port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), PORTB(SFR0[1]), PORTE(SFR0[1]), 

    vfprintf$0	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMMON[11]), 

    vfprintf$1	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_1(CODE[3]), 

    vfprintf$2	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMMON[1]), 


Critical Paths under _main in COMMON

    _main->_Lcd_Write_String
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                81    81      0    2022
                                              0 BANK0     79    79      0
                           _ADC_Init
                           _ADC_Read
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2     496
                                              5 COMMON     7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       6     5      1     532
                                              4 COMMON     6     5      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_Read                                             3     1      2     142
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (1) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Init
   _ADC_Read
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      40       7       80.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     4F      4F       5       98.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      C       C       1       85.7%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      9B      12        0.0%
ABS                  0      0      9B       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Wed Dec 27 02:46:17 2023

                       pc 0002                        l50 04AA                        l51 04B0  
                      l52 04B1                        l53 04B7                        l61 0469  
                      l70 064F                        l55 04B8                        l47 04A0  
                      l48 04A3                        l49 04A9                        l73 04ED  
                      l58 0496                        l67 05EF                        l79 05A9  
                      l97 045C                        fsr 0004                       l103 0527  
                     l104 051D                       l901 0481                       l903 0487  
                     l911 04C0                       l905 048A                       l921 04DC  
                     l913 04C3                       l907 0493                       l931 05AB  
                     l923 04E2                       l915 04D1                       l933 05B0  
                     l941 05CD                       l925 04E5                       l917 04D4  
                     l909 04BA                       l951 05F0                       l943 05D3  
                     l935 05BD                       l927 04EA                       l919 04D9  
                     l929 045D                       l961 0611                       l953 05F3  
                     l945 05E0                       l937 05C0                       l891 049C  
                     l971 0631                       l963 0617                       l955 05F9  
                     l947 05E3                       l939 05C6                       l893 04A7  
                     l973 0637                       l965 061F                       l957 0602  
                     l949 05E9                       l981 0568                       l991 04EE  
                     l895 04AE                       l975 063D                       l967 0625  
                     l959 0608                       l983 056B                       l993 04F2  
                     l897 04B5                       l889 0498                       l977 0643  
                     l969 062B                       l985 0587                       l995 04FF  
                     l899 047E                       l979 0649                       l987 058D  
                     l989 0454                       l999 0502                       _RC0 0038  
                     _RD2 0042                       _RD3 0043                       _RD4 0044  
                     _RD5 0045                       _RD6 0046                       _RD7 0047  
                     u410 05D3                       u411 05D2                       u340 049C  
                     u500 0693                       u341 049B                       u405 05B6  
                     u350 04A7                       u430 0575                       u510 06A8  
                     u351 04A6                       u360 04AE                       u440 0597  
                     u361 04AD                       u425 05D9                       u370 04B5  
                     u450 05A9                       u530 06E6                       u371 04B4  
                     u451 05A8                       u531 06E5                       u460 04F2  
                     u540 0708                       u461 04F1                       u605 0779  
                     u541 0707                       u525 06BE                       u470 04FF  
                     u390 05B0                       u630 07C1                       u614 0788  
                     u471 04FE                       u391 05AF                       u631 07C0  
                     u615 0786                       u535 06E2                       u640 07C7  
                     u385 04C6                       u641 07C6                       u625 0790  
                     u545 0704                       u490 0521                       u650 07DC  
                     u491 0520                       u475 04FB                       u707 060C  
                     u651 07DB                       u635 07BD                       u555 0716  
                     u580 075E                       u564 0725                       u485 050B  
                     u717 061B                       u581 075D                       u565 0723  
                     u590 076D                       u727 048E                       u655 07D8  
                     u591 076C                       u575 072D                       u737 0517  
                     u585 075A                       u667 07E4                       u595 0769  
                     u677 04D6                       u687 04E7                       u697 05FD  
                     fsr0 0004                       indf 0000                      l1001 0515  
                    l1003 051A                      l1005 0521                      l1021 066B  
                    l1031 0687                      l1023 067C                      l1033 068A  
                    l1025 0681                      l1017 0650                      l1051 06E6  
                    l1035 068B                      l1027 0685                      l1019 0662  
                    l1061 0708                      l1045 06B9                      l1037 06A0  
                    l1029 0686                      l1071 076D                      l1063 070F  
                    l1047 06D3                      l1039 06B5                      l1073 0774  
                    l1065 0742                      l1081 07C7                      l1057 06EA  
                    l1049 06D9                      l1083 07CF                      l1075 07A5  
                    l1067 0748                      l1059 06FB                      l1085 07DC  
                    l1077 07AB                      l1069 075E                      l1079 07C1  
                    STR_1 0034                      STR_2 0013                      STR_3 0024  
       ?_Lcd_Write_String 0075                      _main 0650                      btemp 007E  
        __end_of_ADC_Init 045D          __end_of_ADC_Read 0528                      start 0000  
      ??_Lcd_Write_String 0077           __end_of_Lcd_Cmd 0497                     ?_main 0070  
                   _PORTA 0005                     _PORTB 0006                     _PORTE 0009  
                   _TRISA 0085                     _TRISB 0086                     _TRISD 0088  
                   main@i 0067                     main@j 0069                     main@s 0025  
                   pclath 000A                     status 0003                     wtemp0 007E  
        __end_of_Lcd_Init 0650          __end_of_Lcd_Port 04B9           __initialization 07EE  
            __end_of_main 07EE                    ??_main 0020                    _ADCON0 001F  
                  _ADCON1 009F                    _ADRESH 001E                    _ADRESL 009E  
               ??_Lcd_Cmd 0071                    _TRISC0 0438                 ?_ADC_Init 0070  
               ?_ADC_Read 0070           Lcd_Set_Cursor@a 0076           Lcd_Set_Cursor@b 0074  
         Lcd_Set_Cursor@y 0078           Lcd_Set_Cursor@z 0077   __end_of__initialization 07FC  
       __end_of_Lcd_Clear 046A            __pcstackCOMMON 0070              __pidataBANK1 0528  
          _Lcd_Set_Cursor 05AA                ??_ADC_Init 0070                ??_ADC_Read 0072  
               ?_Lcd_Init 0070                 ?_Lcd_Port 0070                __pmaintext 0650  
  __end_of_Lcd_Set_Cursor 05F0                   _GO_DONE 00FA                ??_Lcd_Init 0074  
              ??_Lcd_Port 0070                __stringtab 0003            _Lcd_Write_Char 04B9  
                 _Lcd_Cmd 047D           ?_Lcd_Set_Cursor 0074                   __ptext1 0568  
                 __ptext2 04B9                   __ptext3 05AA                   __ptext4 05F0  
                 __ptext5 045D                   __ptext6 047D                   __ptext7 0497  
                 __ptext8 04EE                   __ptext9 0454                   main@led 0045  
                 main@val 0065    __end_of_Lcd_Write_Char 04EE      end_of_initialization 07FC  
               Lcd_Port@a 0070           ?_Lcd_Write_Char 0070         Lcd_Write_String@a 0075  
       Lcd_Write_String@i 007A                 _Lcd_Clear 045D          _Lcd_Write_String 0568  
     start_initialization 07EE                ?_Lcd_Clear 0070                init_fetch0 046A  
             __pdataBANK1 00A0           Lcd_Write_Char@a 0074           Lcd_Write_Char@y 0073  
               ___latbits 0002             __pcstackBANK0 0020                  ?_Lcd_Cmd 0070  
        ??_Lcd_Set_Cursor 0075                 __pstrings 0003                  _ADC_Init 0454  
                _ADC_Read 04EE               ADC_Read@ANC 0070                  Lcd_Cmd@a 0073  
             ??_Lcd_Clear 0074                 main@F1531 00A0                 main@F1529 00C0  
              _ADCON0bits 001F               __stringbase 0012                 main@i_161 006D  
               main@j_165 006B          ??_Lcd_Write_Char 0071                  _Lcd_Init 05F0  
                _Lcd_Port 0497  __end_of_Lcd_Write_String 05AA        __end_of__stringtab 0013  
                init_ram0 046E        Lcd_Write_Char@temp 0072                 stringcode 000D  
      Lcd_Set_Cursor@temp 0079                  stringdir 000D                  stringtab 0003  
