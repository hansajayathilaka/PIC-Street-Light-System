

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Tue Jan 09 05:12:28 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
     8                           	psect	inittext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    22                           	dabs	1,0x7E,2
    23     0000                     
    24                           ; Generated 22/03/2023 GMT
    25                           ; 
    26                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution. Publication is not required when
    40                           ;        this file is used in an embedded application.
    41                           ; 
    42                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    43                           ;        software without specific prior written permission.
    44                           ; 
    45                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    46                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    47                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    48                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    49                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    50                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    51                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    52                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    53                           ; 
    54                           ; 
    55                           ; Code-generator required, PIC16F877A Definitions
    56                           ; 
    57                           ; SFR Addresses
    58     0000                     	;# 
    59     0001                     	;# 
    60     0002                     	;# 
    61     0003                     	;# 
    62     0004                     	;# 
    63     0005                     	;# 
    64     0006                     	;# 
    65     0007                     	;# 
    66     0008                     	;# 
    67     0009                     	;# 
    68     000A                     	;# 
    69     000B                     	;# 
    70     000C                     	;# 
    71     000D                     	;# 
    72     000E                     	;# 
    73     000E                     	;# 
    74     000F                     	;# 
    75     0010                     	;# 
    76     0011                     	;# 
    77     0012                     	;# 
    78     0013                     	;# 
    79     0014                     	;# 
    80     0015                     	;# 
    81     0015                     	;# 
    82     0016                     	;# 
    83     0017                     	;# 
    84     0018                     	;# 
    85     0019                     	;# 
    86     001A                     	;# 
    87     001B                     	;# 
    88     001B                     	;# 
    89     001C                     	;# 
    90     001D                     	;# 
    91     001E                     	;# 
    92     001F                     	;# 
    93     0081                     	;# 
    94     0085                     	;# 
    95     0086                     	;# 
    96     0087                     	;# 
    97     0088                     	;# 
    98     0089                     	;# 
    99     008C                     	;# 
   100     008D                     	;# 
   101     008E                     	;# 
   102     0091                     	;# 
   103     0092                     	;# 
   104     0093                     	;# 
   105     0094                     	;# 
   106     0098                     	;# 
   107     0099                     	;# 
   108     009C                     	;# 
   109     009D                     	;# 
   110     009E                     	;# 
   111     009F                     	;# 
   112     010C                     	;# 
   113     010D                     	;# 
   114     010E                     	;# 
   115     010F                     	;# 
   116     018C                     	;# 
   117     018D                     	;# 
   118     0000                     	;# 
   119     0001                     	;# 
   120     0002                     	;# 
   121     0003                     	;# 
   122     0004                     	;# 
   123     0005                     	;# 
   124     0006                     	;# 
   125     0007                     	;# 
   126     0008                     	;# 
   127     0009                     	;# 
   128     000A                     	;# 
   129     000B                     	;# 
   130     000C                     	;# 
   131     000D                     	;# 
   132     000E                     	;# 
   133     000E                     	;# 
   134     000F                     	;# 
   135     0010                     	;# 
   136     0011                     	;# 
   137     0012                     	;# 
   138     0013                     	;# 
   139     0014                     	;# 
   140     0015                     	;# 
   141     0015                     	;# 
   142     0016                     	;# 
   143     0017                     	;# 
   144     0018                     	;# 
   145     0019                     	;# 
   146     001A                     	;# 
   147     001B                     	;# 
   148     001B                     	;# 
   149     001C                     	;# 
   150     001D                     	;# 
   151     001E                     	;# 
   152     001F                     	;# 
   153     0081                     	;# 
   154     0085                     	;# 
   155     0086                     	;# 
   156     0087                     	;# 
   157     0088                     	;# 
   158     0089                     	;# 
   159     008C                     	;# 
   160     008D                     	;# 
   161     008E                     	;# 
   162     0091                     	;# 
   163     0092                     	;# 
   164     0093                     	;# 
   165     0094                     	;# 
   166     0098                     	;# 
   167     0099                     	;# 
   168     009C                     	;# 
   169     009D                     	;# 
   170     009E                     	;# 
   171     009F                     	;# 
   172     010C                     	;# 
   173     010D                     	;# 
   174     010E                     	;# 
   175     010F                     	;# 
   176     018C                     	;# 
   177     018D                     	;# 
   178                           
   179                           	psect	idataBANK1
   180     0517                     __pidataBANK1:
   181                           
   182                           ;initializer for main@F1531
   183     0517  3406               	retlw	6
   184     0518  3400               	retlw	0
   185     0519  3400               	retlw	0
   186     051A  3400               	retlw	0
   187     051B  3406               	retlw	6
   188     051C  3400               	retlw	0
   189     051D  3401               	retlw	1
   190     051E  3400               	retlw	0
   191     051F  3406               	retlw	6
   192     0520  3400               	retlw	0
   193     0521  3402               	retlw	2
   194     0522  3400               	retlw	0
   195     0523  3406               	retlw	6
   196     0524  3400               	retlw	0
   197     0525  3403               	retlw	3
   198     0526  3400               	retlw	0
   199     0527  3406               	retlw	6
   200     0528  3400               	retlw	0
   201     0529  3404               	retlw	4
   202     052A  3400               	retlw	0
   203     052B  3406               	retlw	6
   204     052C  3400               	retlw	0
   205     052D  3405               	retlw	5
   206     052E  3400               	retlw	0
   207     052F  3406               	retlw	6
   208     0530  3400               	retlw	0
   209     0531  3406               	retlw	6
   210     0532  3400               	retlw	0
   211     0533  3406               	retlw	6
   212     0534  3400               	retlw	0
   213     0535  3407               	retlw	7
   214     0536  3400               	retlw	0
   215                           
   216                           ;initializer for main@F1529
   217     0537  3405               	retlw	5
   218     0538  3400               	retlw	0
   219     0539  3400               	retlw	0
   220     053A  3400               	retlw	0
   221     053B  3405               	retlw	5
   222     053C  3400               	retlw	0
   223     053D  3401               	retlw	1
   224     053E  3400               	retlw	0
   225     053F  3405               	retlw	5
   226     0540  3400               	retlw	0
   227     0541  3402               	retlw	2
   228     0542  3400               	retlw	0
   229     0543  3405               	retlw	5
   230     0544  3400               	retlw	0
   231     0545  3403               	retlw	3
   232     0546  3400               	retlw	0
   233     0547  3405               	retlw	5
   234     0548  3400               	retlw	0
   235     0549  3404               	retlw	4
   236     054A  3400               	retlw	0
   237     054B  3405               	retlw	5
   238     054C  3400               	retlw	0
   239     054D  3405               	retlw	5
   240     054E  3400               	retlw	0
   241     054F  3409               	retlw	9
   242     0550  3400               	retlw	0
   243     0551  3400               	retlw	0
   244     0552  3400               	retlw	0
   245     0553  3409               	retlw	9
   246     0554  3400               	retlw	0
   247     0555  3401               	retlw	1
   248     0556  3400               	retlw	0
   249     001E                     _ADRESH	set	30
   250     001F                     _ADCON0bits	set	31
   251     001F                     _ADCON0	set	31
   252     0009                     _PORTE	set	9
   253     0005                     _PORTA	set	5
   254     0006                     _PORTB	set	6
   255     0038                     _RC0	set	56
   256     00FA                     _GO_DONE	set	250
   257     003F                     _RC7	set	63
   258     003E                     _RC6	set	62
   259     0047                     _RD7	set	71
   260     0046                     _RD6	set	70
   261     0045                     _RD5	set	69
   262     0044                     _RD4	set	68
   263     0086                     _TRISB	set	134
   264     0085                     _TRISA	set	133
   265     009E                     _ADRESL	set	158
   266     009F                     _ADCON1	set	159
   267     0088                     _TRISD	set	136
   268     0438                     _TRISC0	set	1080
   269     043F                     _TRISC7	set	1087
   270     043E                     _TRISC6	set	1086
   271                           
   272                           	psect	strings
   273     0003                     __pstrings:
   274     0003                     stringtab:
   275     0003                     __stringtab:
   276                           
   277                           ;	String table - string pointers are 1 byte each
   278     0003  1BFF               	btfsc	btemp+1,7
   279     0004  280D               	ljmp	stringcode
   280     0005  1383               	bcf	3,7
   281     0006  187F               	btfsc	btemp+1,0
   282     0007  1783               	bsf	3,7
   283     0008  0800               	movf	0,w
   284     0009  0A84               	incf	4,f
   285     000A  1903               	skipnz
   286     000B  0AFF               	incf	btemp+1,f
   287     000C  0008               	return
   288     000D                     stringcode:
   289     000D                     stringdir:
   290     000D  3000               	movlw	high stringdir
   291     000E  008A               	movwf	10
   292     000F  0804               	movf	4,w
   293     0010  0A84               	incf	4,f
   294     0011  0782               	addwf	2,f
   295     0012                     __stringbase:
   296     0012  3400               	retlw	0
   297     0013                     __end_of__stringtab:
   298     0013                     STR_2:
   299     0013  3457               	retlw	87	;'W'
   300     0014  3465               	retlw	101	;'e'
   301     0015  346C               	retlw	108	;'l'
   302     0016  3463               	retlw	99	;'c'
   303     0017  346F               	retlw	111	;'o'
   304     0018  346D               	retlw	109	;'m'
   305     0019  3465               	retlw	101	;'e'
   306     001A  3420               	retlw	32	;' '
   307     001B  3474               	retlw	116	;'t'
   308     001C  346F               	retlw	111	;'o'
   309     001D  3420               	retlw	32	;' '
   310     001E  344C               	retlw	76	;'L'
   311     001F  3469               	retlw	105	;'i'
   312     0020  3467               	retlw	103	;'g'
   313     0021  3468               	retlw	104	;'h'
   314     0022  3474               	retlw	116	;'t'
   315     0023  3400               	retlw	0
   316     0024                     STR_3:
   317     0024  3450               	retlw	80	;'P'
   318     0025  346F               	retlw	111	;'o'
   319     0026  3477               	retlw	119	;'w'
   320     0027  3465               	retlw	101	;'e'
   321     0028  3472               	retlw	114	;'r'
   322     0029  3465               	retlw	101	;'e'
   323     002A  3464               	retlw	100	;'d'
   324     002B  3420               	retlw	32	;' '
   325     002C  3462               	retlw	98	;'b'
   326     002D  3479               	retlw	121	;'y'
   327     002E  3420               	retlw	32	;' '
   328     002F  3453               	retlw	83	;'S'
   329     0030  344C               	retlw	76	;'L'
   330     0031  3454               	retlw	84	;'T'
   331     0032  3443               	retlw	67	;'C'
   332     0033  3400               	retlw	0
   333     0034                     STR_1:
   334     0034  3425               	retlw	37	;'%'
   335     0035  3464               	retlw	100	;'d'
   336     0036  3400               	retlw	0
   337                           
   338                           	psect	cinit
   339     07EE                     start_initialization:	
   340                           ; #config settings
   341                           
   342     07EE                     __initialization:
   343                           
   344                           ; Initialize objects allocated to BANK1
   345     07EE  1383               	bcf	3,7	;select IRP bank0
   346     07EF  30E0               	movlw	low (__pdataBANK1+64)
   347     07F0  00FD               	movwf	btemp+-1
   348     07F1  3005               	movlw	high __pidataBANK1
   349     07F2  00FE               	movwf	btemp
   350     07F3  3017               	movlw	low __pidataBANK1
   351     07F4  00FF               	movwf	btemp+1
   352     07F5  30A0               	movlw	low __pdataBANK1
   353     07F6  0084               	movwf	4
   354     07F7  120A  118A  245D  120A  118A  	fcall	init_ram0
   355     07FC                     end_of_initialization:	
   356                           ;End of C runtime variable initialization code
   357                           
   358     07FC                     __end_of__initialization:
   359     07FC  0183               	clrf	3
   360     07FD  120A  118A  2E3F   	ljmp	_main	;jump to C main() function
   361                           
   362                           	psect	dataBANK1
   363     00A0                     __pdataBANK1:
   364     00A0                     main@F1531:
   365     00A0                     	ds	32
   366     00C0                     main@F1529:
   367     00C0                     	ds	32
   368                           
   369                           	psect	inittext
   370     0459                     init_fetch0:	
   371                           ;	Called with low address in FSR and high address in W
   372                           
   373     0459  087E               	movf	btemp,w
   374     045A  008A               	movwf	10
   375     045B  087F               	movf	btemp+1,w
   376     045C  0082               	movwf	2
   377     045D                     init_ram0:	
   378                           ;Called with:
   379                           ;	high address of idata address in btemp 
   380                           ;	low address of idata address in btemp+1 
   381                           ;	low address of data in FSR
   382                           ;	high address + 1 of data in btemp-1
   383                           
   384     045D  120A  118A  2459  120A  118A  	fcall	init_fetch0
   385     0462  0080               	movwf	0
   386     0463  0A84               	incf	4,f
   387     0464  0804               	movf	4,w
   388     0465  067D               	xorwf	btemp+-1,w
   389     0466  1903               	btfsc	3,2
   390     0467  3400               	retlw	0
   391     0468  0AFF               	incf	btemp+1,f
   392     0469  1903               	btfsc	3,2
   393     046A  0AFE               	incf	btemp,f
   394     046B  2C5D               	goto	init_ram0
   395                           
   396                           	psect	cstackCOMMON
   397     0070                     __pcstackCOMMON:
   398     0070                     ?_Lcd_Port:
   399     0070                     ??_Lcd_Port:	
   400                           ; 1 bytes @ 0x0
   401                           
   402     0070                     ?_Lcd_Cmd:	
   403                           ; 1 bytes @ 0x0
   404                           
   405     0070                     ?_Lcd_Clear:	
   406                           ; 1 bytes @ 0x0
   407                           
   408     0070                     ?_Lcd_Init:	
   409                           ; 1 bytes @ 0x0
   410                           
   411     0070                     ?_Lcd_Write_Char:	
   412                           ; 1 bytes @ 0x0
   413                           
   414     0070                     ?_ADC_Init:	
   415                           ; 1 bytes @ 0x0
   416                           
   417     0070                     ??_ADC_Init:	
   418                           ; 1 bytes @ 0x0
   419                           
   420     0070                     ?_main:	
   421                           ; 1 bytes @ 0x0
   422                           
   423     0070                     ?_ADC_Read:	
   424                           ; 1 bytes @ 0x0
   425                           
   426     0070                     Lcd_Port@a:	
   427                           ; 2 bytes @ 0x0
   428                           
   429     0070                     ADC_Read@ANC:	
   430                           ; 1 bytes @ 0x0
   431                           
   432                           
   433                           ; 2 bytes @ 0x0
   434     0070                     	ds	1
   435     0071                     ??_Lcd_Cmd:
   436     0071                     ??_Lcd_Write_Char:	
   437                           ; 1 bytes @ 0x1
   438                           
   439                           
   440                           ; 1 bytes @ 0x1
   441     0071                     	ds	1
   442     0072                     ??_ADC_Read:
   443     0072                     Lcd_Write_Char@temp:	
   444                           ; 1 bytes @ 0x2
   445                           
   446                           
   447                           ; 1 bytes @ 0x2
   448     0072                     	ds	1
   449     0073                     Lcd_Cmd@a:
   450     0073                     Lcd_Write_Char@y:	
   451                           ; 1 bytes @ 0x3
   452                           
   453                           
   454                           ; 1 bytes @ 0x3
   455     0073                     	ds	1
   456     0074                     ??_Lcd_Clear:
   457     0074                     ?_Lcd_Set_Cursor:	
   458                           ; 1 bytes @ 0x4
   459                           
   460     0074                     ??_Lcd_Init:	
   461                           ; 1 bytes @ 0x4
   462                           
   463     0074                     Lcd_Set_Cursor@b:	
   464                           ; 1 bytes @ 0x4
   465                           
   466     0074                     Lcd_Write_Char@a:	
   467                           ; 1 bytes @ 0x4
   468                           
   469                           
   470                           ; 1 bytes @ 0x4
   471     0074                     	ds	1
   472     0075                     ??_Lcd_Set_Cursor:
   473     0075                     ?_Lcd_Write_String:	
   474                           ; 1 bytes @ 0x5
   475                           
   476     0075                     Lcd_Write_String@a:	
   477                           ; 1 bytes @ 0x5
   478                           
   479                           
   480                           ; 2 bytes @ 0x5
   481     0075                     	ds	1
   482     0076                     Lcd_Set_Cursor@a:
   483                           
   484                           ; 1 bytes @ 0x6
   485     0076                     	ds	1
   486     0077                     ??_Lcd_Write_String:
   487     0077                     Lcd_Set_Cursor@z:	
   488                           ; 1 bytes @ 0x7
   489                           
   490                           
   491                           ; 1 bytes @ 0x7
   492     0077                     	ds	1
   493     0078                     Lcd_Set_Cursor@y:
   494                           
   495                           ; 1 bytes @ 0x8
   496     0078                     	ds	1
   497     0079                     Lcd_Set_Cursor@temp:
   498                           
   499                           ; 1 bytes @ 0x9
   500     0079                     	ds	1
   501     007A                     Lcd_Write_String@i:
   502                           
   503                           ; 2 bytes @ 0xA
   504     007A                     	ds	2
   505                           
   506                           	psect	cstackBANK0
   507     0020                     __pcstackBANK0:
   508     0020                     ??_main:
   509                           
   510                           ; 1 bytes @ 0x0
   511     0020                     	ds	5
   512     0025                     main@s:
   513                           
   514                           ; 32 bytes @ 0x5
   515     0025                     	ds	32
   516     0045                     main@led:
   517                           
   518                           ; 32 bytes @ 0x25
   519     0045                     	ds	32
   520     0065                     main@val:
   521                           
   522                           ; 2 bytes @ 0x45
   523     0065                     	ds	2
   524     0067                     main@i:
   525                           
   526                           ; 2 bytes @ 0x47
   527     0067                     	ds	2
   528     0069                     main@j:
   529                           
   530                           ; 2 bytes @ 0x49
   531     0069                     	ds	2
   532     006B                     main@j_167:
   533                           
   534                           ; 2 bytes @ 0x4B
   535     006B                     	ds	2
   536     006D                     main@i_163:
   537                           
   538                           ; 2 bytes @ 0x4D
   539     006D                     	ds	2
   540                           
   541                           	psect	maintext
   542     063F                     __pmaintext:	
   543 ;;
   544 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
   545 ;;
   546 ;; *************** function _main *****************
   547 ;; Defined at:
   548 ;;		line 77 in file "main.c"
   549 ;; Parameters:    Size  Location     Type
   550 ;;		None
   551 ;; Auto vars:     Size  Location     Type
   552 ;;  j               2   75[BANK0 ] int 
   553 ;;  j               2   73[BANK0 ] int 
   554 ;;  val             2   69[BANK0 ] int 
   555 ;;  i               2   77[BANK0 ] int 
   556 ;;  i               2   71[BANK0 ] int 
   557 ;;  led            32   37[BANK0 ] struct _Pin[8]
   558 ;;  s              32    5[BANK0 ] struct _Pin[8]
   559 ;;  a               2    0        unsigned int 
   560 ;; Return value:  Size  Location     Type
   561 ;;                  1    wreg      void 
   562 ;; Registers used:
   563 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   564 ;; Tracked objects:
   565 ;;		On entry : B00/0
   566 ;;		On exit  : 0/0
   567 ;;		Unchanged: 0/0
   568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   569 ;;      Params:         0       0       0       0       0
   570 ;;      Locals:         0      74       0       0       0
   571 ;;      Temps:          0       5       0       0       0
   572 ;;      Totals:         0      79       0       0       0
   573 ;;Total ram usage:       79 bytes
   574 ;; Hardware stack levels required when called: 3
   575 ;; This function calls:
   576 ;;		_ADC_Init
   577 ;;		_ADC_Read
   578 ;;		_Lcd_Clear
   579 ;;		_Lcd_Init
   580 ;;		_Lcd_Set_Cursor
   581 ;;		_Lcd_Write_String
   582 ;; This function is called by:
   583 ;;		Startup code after reset
   584 ;; This function uses a non-reentrant model
   585 ;;
   586                           
   587     063F                     _main:	
   588                           ;psect for function _main
   589                           
   590     063F                     l1032:	
   591                           ;incstack = 0
   592                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   593                           
   594                           
   595                           ;main.c: 78:     unsigned int a;;main.c: 81:     TRISD = 0x00;
   596     063F  1683               	bsf	3,5	;RP0=1, select bank1
   597     0640  1303               	bcf	3,6	;RP1=0, select bank1
   598     0641  0188               	clrf	8	;volatile
   599     0642                     l1034:
   600                           
   601                           ;main.c: 82:     TRISC6 = 0;
   602     0642  1307               	bcf	7,6	;volatile
   603     0643                     l1036:
   604                           
   605                           ;main.c: 83:     TRISC7 = 0;
   606     0643  1387               	bcf	7,7	;volatile
   607     0644                     l1038:
   608                           
   609                           ;main.c: 85:     Lcd_Init();
   610     0644  120A  118A  25DF  120A  118A  	fcall	_Lcd_Init
   611     0649                     l1040:
   612                           
   613                           ;main.c: 86:     Lcd_Clear();
   614     0649  120A  118A  244C  120A  118A  	fcall	_Lcd_Clear
   615     064E                     l1042:
   616                           
   617                           ;main.c: 87:     Lcd_Set_Cursor(1,1);
   618     064E  01F4               	clrf	Lcd_Set_Cursor@b
   619     064F  0AF4               	incf	Lcd_Set_Cursor@b,f
   620     0650  3001               	movlw	1
   621     0651  120A  118A  2599  120A  118A  	fcall	_Lcd_Set_Cursor
   622     0656                     l1044:
   623                           
   624                           ;main.c: 88:     Lcd_Write_String("Welcome to Light");
   625     0656  3001               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   626     0657  00F5               	movwf	Lcd_Write_String@a
   627     0658  3080               	movlw	128
   628     0659  00F6               	movwf	Lcd_Write_String@a+1
   629     065A  120A  118A  2557  120A  118A  	fcall	_Lcd_Write_String
   630     065F                     l1046:
   631                           
   632                           ;main.c: 89:     Lcd_Set_Cursor(2,1);
   633     065F  01F4               	clrf	Lcd_Set_Cursor@b
   634     0660  0AF4               	incf	Lcd_Set_Cursor@b,f
   635     0661  3002               	movlw	2
   636     0662  120A  118A  2599  120A  118A  	fcall	_Lcd_Set_Cursor
   637     0667                     l1048:
   638                           
   639                           ;main.c: 90:     Lcd_Write_String("Powered by SLTC");
   640     0667  3012               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   641     0668  00F5               	movwf	Lcd_Write_String@a
   642     0669  3080               	movlw	128
   643     066A  00F6               	movwf	Lcd_Write_String@a+1
   644     066B  120A  118A  2557  120A  118A  	fcall	_Lcd_Write_String
   645     0670                     l1050:
   646                           
   647                           ;main.c: 91:     _delay((unsigned long)((3000)*(8000000/4000.0)));
   648     0670  301F               	movlw	31
   649     0671  1283               	bcf	3,5	;RP0=0, select bank0
   650     0672  1303               	bcf	3,6	;RP1=0, select bank0
   651     0673  00A2               	movwf	??_main+2
   652     0674  3071               	movlw	113
   653     0675  00A1               	movwf	??_main+1
   654     0676  301D               	movlw	29
   655     0677  00A0               	movwf	??_main
   656     0678                     u667:
   657     0678  0BA0               	decfsz	??_main,f
   658     0679  2E78               	goto	u667
   659     067A  0BA1               	decfsz	??_main+1,f
   660     067B  2E78               	goto	u667
   661     067C  0BA2               	decfsz	??_main+2,f
   662     067D  2E78               	goto	u667
   663     067E  2E7F               	nop2
   664     067F                     l1052:
   665                           
   666                           ;main.c: 93:     ADC_Init();
   667     067F  120A  118A  2443  120A  118A  	fcall	_ADC_Init
   668     0684                     l1054:
   669                           
   670                           ;main.c: 95:     TRISA = 0xff;
   671     0684  30FF               	movlw	255
   672     0685  1683               	bsf	3,5	;RP0=1, select bank1
   673     0686  1303               	bcf	3,6	;RP1=0, select bank1
   674     0687  0085               	movwf	5	;volatile
   675     0688                     l1056:
   676                           
   677                           ;main.c: 96:     TRISB = 0x00;
   678     0688  0186               	clrf	6	;volatile
   679     0689                     l1058:
   680                           
   681                           ;main.c: 97:     TRISC0 = 0;
   682     0689  1007               	bcf	7,0	;volatile
   683     068A                     l1060:
   684                           
   685                           ;main.c: 99:     PORTB = 0x00;
   686     068A  1283               	bcf	3,5	;RP0=0, select bank0
   687     068B  1303               	bcf	3,6	;RP1=0, select bank0
   688     068C  0186               	clrf	6	;volatile
   689     068D                     l1062:
   690                           
   691                           ;main.c: 100:     RC0 = 0;
   692     068D  1007               	bcf	7,0	;volatile
   693     068E                     l1064:
   694                           
   695                           ;main.c: 102:     Pin s[8] = {
   696     068E  3025               	movlw	main@s& (0+255)
   697     068F  0084               	movwf	4
   698     0690  30C0               	movlw	low main@F1529
   699     0691  00A0               	movwf	??_main
   700     0692  0804               	movf	4,w
   701     0693  00A1               	movwf	??_main+1
   702     0694  3020               	movlw	32
   703     0695  00A2               	movwf	??_main+2
   704     0696                     u500:
   705     0696  0820               	movf	??_main,w
   706     0697  0084               	movwf	4
   707     0698  1383               	bcf	3,7	;select IRP bank1
   708     0699  0800               	movf	0,w
   709     069A  00A3               	movwf	??_main+3
   710     069B  0AA0               	incf	??_main,f
   711     069C  0821               	movf	??_main+1,w
   712     069D  0084               	movwf	4
   713     069E  0823               	movf	??_main+3,w
   714     069F  0080               	movwf	0
   715     06A0  0AA1               	incf	??_main+1,f
   716     06A1  0BA2               	decfsz	??_main+2,f
   717     06A2  2E96               	goto	u500
   718     06A3                     l1066:
   719                           
   720                           ;main.c: 114:     Pin led[8] = {
   721     06A3  3045               	movlw	main@led& (0+255)
   722     06A4  0084               	movwf	4
   723     06A5  30A0               	movlw	low main@F1531
   724     06A6  00A0               	movwf	??_main
   725     06A7  0804               	movf	4,w
   726     06A8  00A1               	movwf	??_main+1
   727     06A9  3020               	movlw	32
   728     06AA  00A2               	movwf	??_main+2
   729     06AB                     u510:
   730     06AB  0820               	movf	??_main,w
   731     06AC  0084               	movwf	4
   732     06AD  1383               	bcf	3,7	;select IRP bank1
   733     06AE  0800               	movf	0,w
   734     06AF  00A3               	movwf	??_main+3
   735     06B0  0AA0               	incf	??_main,f
   736     06B1  0821               	movf	??_main+1,w
   737     06B2  0084               	movwf	4
   738     06B3  0823               	movf	??_main+3,w
   739     06B4  0080               	movwf	0
   740     06B5  0AA1               	incf	??_main+1,f
   741     06B6  0BA2               	decfsz	??_main+2,f
   742     06B7  2EAB               	goto	u510
   743     06B8                     l1068:
   744                           
   745                           ;main.c: 127:     {;main.c: 128:         for(int i = 0; i < 8; i++) {
   746     06B8  1283               	bcf	3,5	;RP0=0, select bank0
   747     06B9  1303               	bcf	3,6	;RP1=0, select bank0
   748     06BA  01E7               	clrf	main@i
   749     06BB  01E8               	clrf	main@i+1
   750     06BC                     l1074:
   751                           
   752                           ;main.c: 129:             *led[i].port = 0x00;
   753     06BC  1283               	bcf	3,5	;RP0=0, select bank0
   754     06BD  1303               	bcf	3,6	;RP1=0, select bank0
   755     06BE  0867               	movf	main@i,w
   756     06BF  00A0               	movwf	??_main
   757     06C0  3001               	movlw	1
   758     06C1                     u525:
   759     06C1  1003               	clrc
   760     06C2  0DA0               	rlf	??_main,f
   761     06C3  3EFF               	addlw	-1
   762     06C4  1D03               	skipz
   763     06C5  2EC1               	goto	u525
   764     06C6  1003               	clrc
   765     06C7  0D20               	rlf	??_main,w
   766     06C8  3E45               	addlw	(low (main@led| 0))& (0+255)
   767     06C9  0084               	movwf	4
   768     06CA  1383               	bcf	3,7	;select IRP bank0
   769     06CB  0800               	movf	0,w
   770     06CC  00A1               	movwf	??_main+1
   771     06CD  0A84               	incf	4,f
   772     06CE  0800               	movf	0,w
   773     06CF  00A2               	movwf	??_main+2
   774     06D0  0821               	movf	??_main+1,w
   775     06D1  0084               	movwf	4
   776     06D2  1783               	bsf	3,7
   777     06D3  1C22               	btfss	??_main+2,0
   778     06D4  1383               	bcf	3,7
   779     06D5  0180               	clrf	0
   780     06D6                     l1076:
   781                           
   782                           ;main.c: 130:         }
   783     06D6  3001               	movlw	1
   784     06D7  07E7               	addwf	main@i,f
   785     06D8  1803               	skipnc
   786     06D9  0AE8               	incf	main@i+1,f
   787     06DA  3000               	movlw	0
   788     06DB  07E8               	addwf	main@i+1,f
   789     06DC                     l1078:
   790     06DC  0868               	movf	main@i+1,w
   791     06DD  3A80               	xorlw	128
   792     06DE  00FF               	movwf	btemp+1
   793     06DF  3080               	movlw	128
   794     06E0  027F               	subwf	btemp+1,w
   795     06E1  1D03               	skipz
   796     06E2  2EE5               	goto	u535
   797     06E3  3008               	movlw	8
   798     06E4  0267               	subwf	main@i,w
   799     06E5                     u535:
   800     06E5  1C03               	skipc
   801     06E6  2EE8               	goto	u531
   802     06E7  2EE9               	goto	u530
   803     06E8                     u531:
   804     06E8  2EBC               	goto	l1074
   805     06E9                     u530:
   806     06E9                     l1080:
   807                           
   808                           ;main.c: 132:         for(int i = 0; i < 8; i++) {
   809     06E9  1283               	bcf	3,5	;RP0=0, select bank0
   810     06EA  1303               	bcf	3,6	;RP1=0, select bank0
   811     06EB  01ED               	clrf	main@i_163
   812     06EC  01EE               	clrf	main@i_163+1
   813     06ED                     l1086:
   814                           
   815                           ;main.c: 133:             int val = ADC_Read(i);
   816     06ED  1283               	bcf	3,5	;RP0=0, select bank0
   817     06EE  1303               	bcf	3,6	;RP1=0, select bank0
   818     06EF  086E               	movf	main@i_163+1,w
   819     06F0  00F1               	movwf	ADC_Read@ANC+1
   820     06F1  086D               	movf	main@i_163,w
   821     06F2  00F0               	movwf	ADC_Read@ANC
   822     06F3  120A  118A  24DD  120A  118A  	fcall	_ADC_Read
   823     06F8  0871               	movf	?_ADC_Read+1,w
   824     06F9  1283               	bcf	3,5	;RP0=0, select bank0
   825     06FA  1303               	bcf	3,6	;RP1=0, select bank0
   826     06FB  00E6               	movwf	main@val+1
   827     06FC  0870               	movf	?_ADC_Read,w
   828     06FD  00E5               	movwf	main@val
   829     06FE                     l1088:
   830                           
   831                           ;main.c: 135:             if(val < 700) {
   832     06FE  0866               	movf	main@val+1,w
   833     06FF  3A80               	xorlw	128
   834     0700  00FF               	movwf	btemp+1
   835     0701  3082               	movlw	130
   836     0702  027F               	subwf	btemp+1,w
   837     0703  1D03               	skipz
   838     0704  2F07               	goto	u545
   839     0705  30BC               	movlw	188
   840     0706  0265               	subwf	main@val,w
   841     0707                     u545:
   842     0707  1803               	skipnc
   843     0708  2F0A               	goto	u541
   844     0709  2F0B               	goto	u540
   845     070A                     u541:
   846     070A  2FCA               	goto	l1110
   847     070B                     u540:
   848     070B                     l1090:
   849                           
   850                           ;main.c: 136:                 for(int j = i; (j <= i + 1) && j < 8; j++) {
   851     070B  1283               	bcf	3,5	;RP0=0, select bank0
   852     070C  1303               	bcf	3,6	;RP1=0, select bank0
   853     070D  086E               	movf	main@i_163+1,w
   854     070E  00EA               	movwf	main@j+1
   855     070F  086D               	movf	main@i_163,w
   856     0710  00E9               	movwf	main@j
   857     0711  2F4B               	goto	l1096
   858     0712                     l1092:
   859                           
   860                           ;main.c: 137:                     *led[j].port |= (1 << led[j].pin);
   861     0712  3001               	movlw	1
   862     0713  1283               	bcf	3,5	;RP0=0, select bank0
   863     0714  1303               	bcf	3,6	;RP1=0, select bank0
   864     0715  00A0               	movwf	??_main
   865     0716  0869               	movf	main@j,w
   866     0717  00A1               	movwf	??_main+1
   867     0718  3001               	movlw	1
   868     0719                     u555:
   869     0719  1003               	clrc
   870     071A  0DA1               	rlf	??_main+1,f
   871     071B  3EFF               	addlw	-1
   872     071C  1D03               	skipz
   873     071D  2F19               	goto	u555
   874     071E  1003               	clrc
   875     071F  0D21               	rlf	??_main+1,w
   876     0720  3E02               	addlw	2
   877     0721  3E45               	addlw	(low (main@led| 0))& (0+255)
   878     0722  0084               	movwf	4
   879     0723  1383               	bcf	3,7	;select IRP bank0
   880     0724  0A00               	incf	0,w
   881     0725  2F28               	goto	u564
   882     0726                     u565:
   883     0726  1003               	clrc
   884     0727  0DA0               	rlf	??_main,f
   885     0728                     u564:
   886     0728  3EFF               	addlw	-1
   887     0729  1D03               	skipz
   888     072A  2F26               	goto	u565
   889     072B  0820               	movf	??_main,w
   890     072C  00FF               	movwf	btemp+1
   891     072D  0869               	movf	main@j,w
   892     072E  00A2               	movwf	??_main+2
   893     072F  3001               	movlw	1
   894     0730                     u575:
   895     0730  1003               	clrc
   896     0731  0DA2               	rlf	??_main+2,f
   897     0732  3EFF               	addlw	-1
   898     0733  1D03               	skipz
   899     0734  2F30               	goto	u575
   900     0735  1003               	clrc
   901     0736  0D22               	rlf	??_main+2,w
   902     0737  3E45               	addlw	(low (main@led| 0))& (0+255)
   903     0738  0084               	movwf	4
   904     0739  0800               	movf	0,w
   905     073A  00A3               	movwf	??_main+3
   906     073B  0A84               	incf	4,f
   907     073C  0800               	movf	0,w
   908     073D  00A4               	movwf	??_main+4
   909     073E  0823               	movf	??_main+3,w
   910     073F  0084               	movwf	4
   911     0740  1783               	bsf	3,7
   912     0741  1C24               	btfss	??_main+4,0
   913     0742  1383               	bcf	3,7
   914     0743  087F               	movf	btemp+1,w
   915     0744  0480               	iorwf	0,f
   916     0745                     l1094:
   917                           
   918                           ;main.c: 138:                 }
   919     0745  3001               	movlw	1
   920     0746  07E9               	addwf	main@j,f
   921     0747  1803               	skipnc
   922     0748  0AEA               	incf	main@j+1,f
   923     0749  3000               	movlw	0
   924     074A  07EA               	addwf	main@j+1,f
   925     074B                     l1096:
   926     074B  086D               	movf	main@i_163,w
   927     074C  3E01               	addlw	1
   928     074D  00A0               	movwf	??_main
   929     074E  086E               	movf	main@i_163+1,w
   930     074F  1803               	skipnc
   931     0750  3E01               	addlw	1
   932     0751  3E00               	addlw	0
   933     0752  00A1               	movwf	??_main+1
   934     0753  0821               	movf	??_main+1,w
   935     0754  3A80               	xorlw	128
   936     0755  00A2               	movwf	??_main+2
   937     0756  086A               	movf	main@j+1,w
   938     0757  3A80               	xorlw	128
   939     0758  0222               	subwf	??_main+2,w
   940     0759  1D03               	skipz
   941     075A  2F5D               	goto	u585
   942     075B  0869               	movf	main@j,w
   943     075C  0220               	subwf	??_main,w
   944     075D                     u585:
   945     075D  1C03               	skipc
   946     075E  2F60               	goto	u581
   947     075F  2F61               	goto	u580
   948     0760                     u581:
   949     0760  2F70               	goto	l1100
   950     0761                     u580:
   951     0761                     l1098:
   952     0761  1283               	bcf	3,5	;RP0=0, select bank0
   953     0762  1303               	bcf	3,6	;RP1=0, select bank0
   954     0763  086A               	movf	main@j+1,w
   955     0764  3A80               	xorlw	128
   956     0765  00FF               	movwf	btemp+1
   957     0766  3080               	movlw	128
   958     0767  027F               	subwf	btemp+1,w
   959     0768  1D03               	skipz
   960     0769  2F6C               	goto	u595
   961     076A  3008               	movlw	8
   962     076B  0269               	subwf	main@j,w
   963     076C                     u595:
   964     076C  1C03               	skipc
   965     076D  2F6F               	goto	u591
   966     076E  2F70               	goto	u590
   967     076F                     u591:
   968     076F  2F12               	goto	l1092
   969     0770                     u590:
   970     0770                     l1100:
   971                           
   972                           ;main.c: 139:                 for(int j = i; (j >= i - 1) && j >= 0; j--) {
   973     0770  1283               	bcf	3,5	;RP0=0, select bank0
   974     0771  1303               	bcf	3,6	;RP1=0, select bank0
   975     0772  086E               	movf	main@i_163+1,w
   976     0773  00EC               	movwf	main@j_167+1
   977     0774  086D               	movf	main@i_163,w
   978     0775  00EB               	movwf	main@j_167
   979     0776  2FAE               	goto	l1106
   980     0777                     l1102:
   981                           
   982                           ;main.c: 140:                     *led[j].port |= (1 << led[j].pin);
   983     0777  3001               	movlw	1
   984     0778  00A0               	movwf	??_main
   985     0779  086B               	movf	main@j_167,w
   986     077A  00A1               	movwf	??_main+1
   987     077B  3001               	movlw	1
   988     077C                     u605:
   989     077C  1003               	clrc
   990     077D  0DA1               	rlf	??_main+1,f
   991     077E  3EFF               	addlw	-1
   992     077F  1D03               	skipz
   993     0780  2F7C               	goto	u605
   994     0781  1003               	clrc
   995     0782  0D21               	rlf	??_main+1,w
   996     0783  3E02               	addlw	2
   997     0784  3E45               	addlw	(low (main@led| 0))& (0+255)
   998     0785  0084               	movwf	4
   999     0786  1383               	bcf	3,7	;select IRP bank0
  1000     0787  0A00               	incf	0,w
  1001     0788  2F8B               	goto	u614
  1002     0789                     u615:
  1003     0789  1003               	clrc
  1004     078A  0DA0               	rlf	??_main,f
  1005     078B                     u614:
  1006     078B  3EFF               	addlw	-1
  1007     078C  1D03               	skipz
  1008     078D  2F89               	goto	u615
  1009     078E  0820               	movf	??_main,w
  1010     078F  00FF               	movwf	btemp+1
  1011     0790  086B               	movf	main@j_167,w
  1012     0791  00A2               	movwf	??_main+2
  1013     0792  3001               	movlw	1
  1014     0793                     u625:
  1015     0793  1003               	clrc
  1016     0794  0DA2               	rlf	??_main+2,f
  1017     0795  3EFF               	addlw	-1
  1018     0796  1D03               	skipz
  1019     0797  2F93               	goto	u625
  1020     0798  1003               	clrc
  1021     0799  0D22               	rlf	??_main+2,w
  1022     079A  3E45               	addlw	(low (main@led| 0))& (0+255)
  1023     079B  0084               	movwf	4
  1024     079C  0800               	movf	0,w
  1025     079D  00A3               	movwf	??_main+3
  1026     079E  0A84               	incf	4,f
  1027     079F  0800               	movf	0,w
  1028     07A0  00A4               	movwf	??_main+4
  1029     07A1  0823               	movf	??_main+3,w
  1030     07A2  0084               	movwf	4
  1031     07A3  1783               	bsf	3,7
  1032     07A4  1C24               	btfss	??_main+4,0
  1033     07A5  1383               	bcf	3,7
  1034     07A6  087F               	movf	btemp+1,w
  1035     07A7  0480               	iorwf	0,f
  1036     07A8                     l1104:
  1037                           
  1038                           ;main.c: 141:                 }
  1039     07A8  30FF               	movlw	255
  1040     07A9  07EB               	addwf	main@j_167,f
  1041     07AA  1803               	skipnc
  1042     07AB  0AEC               	incf	main@j_167+1,f
  1043     07AC  30FF               	movlw	255
  1044     07AD  07EC               	addwf	main@j_167+1,f
  1045     07AE                     l1106:
  1046     07AE  086D               	movf	main@i_163,w
  1047     07AF  3EFF               	addlw	255
  1048     07B0  00A0               	movwf	??_main
  1049     07B1  086E               	movf	main@i_163+1,w
  1050     07B2  1803               	skipnc
  1051     07B3  3E01               	addlw	1
  1052     07B4  3EFF               	addlw	255
  1053     07B5  00A1               	movwf	??_main+1
  1054     07B6  086C               	movf	main@j_167+1,w
  1055     07B7  3A80               	xorlw	128
  1056     07B8  00A2               	movwf	??_main+2
  1057     07B9  0821               	movf	??_main+1,w
  1058     07BA  3A80               	xorlw	128
  1059     07BB  0222               	subwf	??_main+2,w
  1060     07BC  1D03               	skipz
  1061     07BD  2FC0               	goto	u635
  1062     07BE  0820               	movf	??_main,w
  1063     07BF  026B               	subwf	main@j_167,w
  1064     07C0                     u635:
  1065     07C0  1C03               	skipc
  1066     07C1  2FC3               	goto	u631
  1067     07C2  2FC4               	goto	u630
  1068     07C3                     u631:
  1069     07C3  2FCA               	goto	l1110
  1070     07C4                     u630:
  1071     07C4                     l1108:
  1072     07C4  1283               	bcf	3,5	;RP0=0, select bank0
  1073     07C5  1303               	bcf	3,6	;RP1=0, select bank0
  1074     07C6  1FEC               	btfss	main@j_167+1,7
  1075     07C7  2FC9               	goto	u641
  1076     07C8  2FCA               	goto	u640
  1077     07C9                     u641:
  1078     07C9  2F77               	goto	l1102
  1079     07CA                     u640:
  1080     07CA                     l1110:
  1081                           
  1082                           ;main.c: 143:         }
  1083     07CA  3001               	movlw	1
  1084     07CB  1283               	bcf	3,5	;RP0=0, select bank0
  1085     07CC  1303               	bcf	3,6	;RP1=0, select bank0
  1086     07CD  07ED               	addwf	main@i_163,f
  1087     07CE  1803               	skipnc
  1088     07CF  0AEE               	incf	main@i_163+1,f
  1089     07D0  3000               	movlw	0
  1090     07D1  07EE               	addwf	main@i_163+1,f
  1091     07D2                     l1112:
  1092     07D2  086E               	movf	main@i_163+1,w
  1093     07D3  3A80               	xorlw	128
  1094     07D4  00FF               	movwf	btemp+1
  1095     07D5  3080               	movlw	128
  1096     07D6  027F               	subwf	btemp+1,w
  1097     07D7  1D03               	skipz
  1098     07D8  2FDB               	goto	u655
  1099     07D9  3008               	movlw	8
  1100     07DA  026D               	subwf	main@i_163,w
  1101     07DB                     u655:
  1102     07DB  1C03               	skipc
  1103     07DC  2FDE               	goto	u651
  1104     07DD  2FDF               	goto	u650
  1105     07DE                     u651:
  1106     07DE  2EED               	goto	l1086
  1107     07DF                     u650:
  1108     07DF                     l1114:
  1109                           
  1110                           ;main.c: 144:         _delay((unsigned long)((10)*(8000000/4000.0)));
  1111     07DF  301A               	movlw	26
  1112     07E0  1283               	bcf	3,5	;RP0=0, select bank0
  1113     07E1  1303               	bcf	3,6	;RP1=0, select bank0
  1114     07E2  00A1               	movwf	??_main+1
  1115     07E3  30F7               	movlw	247
  1116     07E4  00A0               	movwf	??_main
  1117     07E5                     u677:
  1118     07E5  0BA0               	decfsz	??_main,f
  1119     07E6  2FE5               	goto	u677
  1120     07E7  0BA1               	decfsz	??_main+1,f
  1121     07E8  2FE5               	goto	u677
  1122     07E9  2FEA               	nop2
  1123     07EA  2EB8               	goto	l1068
  1124     07EB  120A  118A  2800   	ljmp	start
  1125     07EE                     __end_of_main:
  1126                           
  1127                           	psect	text1
  1128     0557                     __ptext1:	
  1129 ;; *************** function _Lcd_Write_String *****************
  1130 ;; Defined at:
  1131 ;;		line 110 in file "./lcd.h"
  1132 ;; Parameters:    Size  Location     Type
  1133 ;;  a               2    5[COMMON] PTR unsigned char 
  1134 ;;		 -> STR_3(16), STR_2(17), Lcd_Write_Int@str(16), 
  1135 ;; Auto vars:     Size  Location     Type
  1136 ;;  i               2   10[COMMON] int 
  1137 ;; Return value:  Size  Location     Type
  1138 ;;                  1    wreg      void 
  1139 ;; Registers used:
  1140 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1141 ;; Tracked objects:
  1142 ;;		On entry : 0/0
  1143 ;;		On exit  : 0/0
  1144 ;;		Unchanged: 0/0
  1145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1146 ;;      Params:         2       0       0       0       0
  1147 ;;      Locals:         2       0       0       0       0
  1148 ;;      Temps:          3       0       0       0       0
  1149 ;;      Totals:         7       0       0       0       0
  1150 ;;Total ram usage:        7 bytes
  1151 ;; Hardware stack levels used: 1
  1152 ;; Hardware stack levels required when called: 2
  1153 ;; This function calls:
  1154 ;;		_Lcd_Write_Char
  1155 ;; This function is called by:
  1156 ;;		_main
  1157 ;;		_Lcd_Write_Int
  1158 ;; This function uses a non-reentrant model
  1159 ;;
  1160                           
  1161     0557                     _Lcd_Write_String:	
  1162                           ;psect for function _Lcd_Write_String
  1163                           
  1164     0557                     l996:	
  1165                           ;incstack = 0
  1166                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1167                           
  1168                           
  1169                           ;./lcd.h: 110: void Lcd_Write_String(char *a);./lcd.h: 111: {;./lcd.h: 112:  int i;;./lc
      +                          d.h: 113:  for(i=0;a[i]!='\0';i++)
  1170     0557  01FA               	clrf	Lcd_Write_String@i
  1171     0558  01FB               	clrf	Lcd_Write_String@i+1
  1172     0559  2D7C               	goto	l1002
  1173     055A                     l998:
  1174                           
  1175                           ;./lcd.h: 114:     Lcd_Write_Char(a[i]);
  1176     055A  087A               	movf	Lcd_Write_String@i,w
  1177     055B  0775               	addwf	Lcd_Write_String@a,w
  1178     055C  00F8               	movwf	??_Lcd_Write_String+1
  1179     055D  0876               	movf	Lcd_Write_String@a+1,w
  1180     055E  00F7               	movwf	??_Lcd_Write_String
  1181     055F  1803               	skipnc
  1182     0560  0AF7               	incf	??_Lcd_Write_String,f
  1183     0561  1FFA               	btfss	Lcd_Write_String@i,7
  1184     0562  2D64               	goto	u430
  1185     0563  03F7               	decf	??_Lcd_Write_String,f
  1186     0564                     u430:
  1187     0564  0877               	movf	??_Lcd_Write_String,w
  1188     0565  00F9               	movwf	??_Lcd_Write_String+2
  1189     0566  0879               	movf	??_Lcd_Write_String+2,w
  1190     0567  1283               	bcf	3,5	;RP0=0, select bank0
  1191     0568  1303               	bcf	3,6	;RP1=0, select bank0
  1192     0569  00FF               	movwf	btemp+1
  1193     056A  0878               	movf	??_Lcd_Write_String+1,w
  1194     056B  0084               	movwf	4
  1195     056C  120A  118A  2003  120A  118A  	fcall	stringtab
  1196     0571  120A  118A  24A8  120A  118A  	fcall	_Lcd_Write_Char
  1197     0576                     l1000:
  1198     0576  3001               	movlw	1
  1199     0577  07FA               	addwf	Lcd_Write_String@i,f
  1200     0578  1803               	skipnc
  1201     0579  0AFB               	incf	Lcd_Write_String@i+1,f
  1202     057A  3000               	movlw	0
  1203     057B  07FB               	addwf	Lcd_Write_String@i+1,f
  1204     057C                     l1002:
  1205     057C  087A               	movf	Lcd_Write_String@i,w
  1206     057D  0775               	addwf	Lcd_Write_String@a,w
  1207     057E  00F8               	movwf	??_Lcd_Write_String+1
  1208     057F  0876               	movf	Lcd_Write_String@a+1,w
  1209     0580  00F7               	movwf	??_Lcd_Write_String
  1210     0581  1803               	skipnc
  1211     0582  0AF7               	incf	??_Lcd_Write_String,f
  1212     0583  1FFA               	btfss	Lcd_Write_String@i,7
  1213     0584  2D86               	goto	u440
  1214     0585  03F7               	decf	??_Lcd_Write_String,f
  1215     0586                     u440:
  1216     0586  0877               	movf	??_Lcd_Write_String,w
  1217     0587  00F9               	movwf	??_Lcd_Write_String+2
  1218     0588  0879               	movf	??_Lcd_Write_String+2,w
  1219     0589  1283               	bcf	3,5	;RP0=0, select bank0
  1220     058A  1303               	bcf	3,6	;RP1=0, select bank0
  1221     058B  00FF               	movwf	btemp+1
  1222     058C  0878               	movf	??_Lcd_Write_String+1,w
  1223     058D  0084               	movwf	4
  1224     058E  120A  118A  2003  120A  118A  	fcall	stringtab
  1225     0593  3A00               	xorlw	0
  1226     0594  1D03               	skipz
  1227     0595  2D97               	goto	u451
  1228     0596  2D98               	goto	u450
  1229     0597                     u451:
  1230     0597  2D5A               	goto	l998
  1231     0598                     u450:
  1232     0598                     l83:
  1233     0598  0008               	return
  1234     0599                     __end_of_Lcd_Write_String:
  1235                           
  1236                           	psect	text2
  1237     04A8                     __ptext2:	
  1238 ;; *************** function _Lcd_Write_Char *****************
  1239 ;; Defined at:
  1240 ;;		line 94 in file "./lcd.h"
  1241 ;; Parameters:    Size  Location     Type
  1242 ;;  a               1    wreg     unsigned char 
  1243 ;; Auto vars:     Size  Location     Type
  1244 ;;  a               1    4[COMMON] unsigned char 
  1245 ;;  y               1    3[COMMON] unsigned char 
  1246 ;;  temp            1    2[COMMON] unsigned char 
  1247 ;; Return value:  Size  Location     Type
  1248 ;;                  1    wreg      void 
  1249 ;; Registers used:
  1250 ;;		wreg, status,2, status,0, pclath, cstack
  1251 ;; Tracked objects:
  1252 ;;		On entry : 0/0
  1253 ;;		On exit  : 0/0
  1254 ;;		Unchanged: 0/0
  1255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1256 ;;      Params:         0       0       0       0       0
  1257 ;;      Locals:         3       0       0       0       0
  1258 ;;      Temps:          1       0       0       0       0
  1259 ;;      Totals:         4       0       0       0       0
  1260 ;;Total ram usage:        4 bytes
  1261 ;; Hardware stack levels used: 1
  1262 ;; Hardware stack levels required when called: 1
  1263 ;; This function calls:
  1264 ;;		_Lcd_Port
  1265 ;; This function is called by:
  1266 ;;		_Lcd_Write_String
  1267 ;; This function uses a non-reentrant model
  1268 ;;
  1269                           
  1270     04A8                     _Lcd_Write_Char:	
  1271                           ;psect for function _Lcd_Write_Char
  1272                           
  1273                           
  1274                           ;incstack = 0
  1275                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  1276                           ;Lcd_Write_Char@a stored from wreg
  1277     04A8  00F4               	movwf	Lcd_Write_Char@a
  1278     04A9                     l924:
  1279                           
  1280                           ;./lcd.h: 94: void Lcd_Write_Char(char a);./lcd.h: 95: {;./lcd.h: 96:    char temp,y;;./
      +                          lcd.h: 97:    temp = a&0x0F;
  1281     04A9  0874               	movf	Lcd_Write_Char@a,w
  1282     04AA  390F               	andlw	15
  1283     04AB  00F2               	movwf	Lcd_Write_Char@temp
  1284                           
  1285                           ;./lcd.h: 98:    y = a&0xF0;
  1286     04AC  0874               	movf	Lcd_Write_Char@a,w
  1287     04AD  39F0               	andlw	240
  1288     04AE  00F3               	movwf	Lcd_Write_Char@y
  1289     04AF                     l926:
  1290                           
  1291                           ;./lcd.h: 99:    RC6 = 1;
  1292     04AF  1283               	bcf	3,5	;RP0=0, select bank0
  1293     04B0  1303               	bcf	3,6	;RP1=0, select bank0
  1294     04B1  1707               	bsf	7,6	;volatile
  1295     04B2                     l928:
  1296                           
  1297                           ;./lcd.h: 100:    Lcd_Port(y>>4);
  1298     04B2  0873               	movf	Lcd_Write_Char@y,w
  1299     04B3  00F1               	movwf	??_Lcd_Write_Char
  1300     04B4  3004               	movlw	4
  1301     04B5                     u385:
  1302     04B5  1003               	clrc
  1303     04B6  0CF1               	rrf	??_Lcd_Write_Char,f
  1304     04B7  3EFF               	addlw	-1
  1305     04B8  1D03               	skipz
  1306     04B9  2CB5               	goto	u385
  1307     04BA  0871               	movf	??_Lcd_Write_Char,w
  1308     04BB  120A  118A  2486  120A  118A  	fcall	_Lcd_Port
  1309     04C0                     l930:
  1310                           
  1311                           ;./lcd.h: 101:    RC7 = 1;
  1312     04C0  1283               	bcf	3,5	;RP0=0, select bank0
  1313     04C1  1303               	bcf	3,6	;RP1=0, select bank0
  1314     04C2  1787               	bsf	7,7	;volatile
  1315     04C3                     l932:
  1316                           
  1317                           ;./lcd.h: 102:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  1318     04C3  301A               	movlw	26
  1319     04C4  00F1               	movwf	??_Lcd_Write_Char
  1320     04C5                     u687:
  1321     04C5  0BF1               	decfsz	??_Lcd_Write_Char,f
  1322     04C6  2CC5               	goto	u687
  1323     04C7  0000               	nop
  1324     04C8                     l934:
  1325                           
  1326                           ;./lcd.h: 103:    RC7 = 0;
  1327     04C8  1283               	bcf	3,5	;RP0=0, select bank0
  1328     04C9  1303               	bcf	3,6	;RP1=0, select bank0
  1329     04CA  1387               	bcf	7,7	;volatile
  1330     04CB                     l936:
  1331                           
  1332                           ;./lcd.h: 104:    Lcd_Port(temp);
  1333     04CB  0872               	movf	Lcd_Write_Char@temp,w
  1334     04CC  120A  118A  2486  120A  118A  	fcall	_Lcd_Port
  1335     04D1                     l938:
  1336                           
  1337                           ;./lcd.h: 105:    RC7 = 1;
  1338     04D1  1283               	bcf	3,5	;RP0=0, select bank0
  1339     04D2  1303               	bcf	3,6	;RP1=0, select bank0
  1340     04D3  1787               	bsf	7,7	;volatile
  1341     04D4                     l940:
  1342                           
  1343                           ;./lcd.h: 106:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  1344     04D4  301A               	movlw	26
  1345     04D5  00F1               	movwf	??_Lcd_Write_Char
  1346     04D6                     u697:
  1347     04D6  0BF1               	decfsz	??_Lcd_Write_Char,f
  1348     04D7  2CD6               	goto	u697
  1349     04D8  0000               	nop
  1350     04D9                     l942:
  1351                           
  1352                           ;./lcd.h: 107:    RC7 = 0;
  1353     04D9  1283               	bcf	3,5	;RP0=0, select bank0
  1354     04DA  1303               	bcf	3,6	;RP1=0, select bank0
  1355     04DB  1387               	bcf	7,7	;volatile
  1356     04DC                     l77:
  1357     04DC  0008               	return
  1358     04DD                     __end_of_Lcd_Write_Char:
  1359                           
  1360                           	psect	text3
  1361     0599                     __ptext3:	
  1362 ;; *************** function _Lcd_Set_Cursor *****************
  1363 ;; Defined at:
  1364 ;;		line 52 in file "./lcd.h"
  1365 ;; Parameters:    Size  Location     Type
  1366 ;;  a               1    wreg     unsigned char 
  1367 ;;  b               1    4[COMMON] unsigned char 
  1368 ;; Auto vars:     Size  Location     Type
  1369 ;;  a               1    6[COMMON] unsigned char 
  1370 ;;  temp            1    9[COMMON] unsigned char 
  1371 ;;  y               1    8[COMMON] unsigned char 
  1372 ;;  z               1    7[COMMON] unsigned char 
  1373 ;; Return value:  Size  Location     Type
  1374 ;;                  1    wreg      void 
  1375 ;; Registers used:
  1376 ;;		wreg, status,2, status,0, pclath, cstack
  1377 ;; Tracked objects:
  1378 ;;		On entry : 0/0
  1379 ;;		On exit  : 0/0
  1380 ;;		Unchanged: 0/0
  1381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1382 ;;      Params:         1       0       0       0       0
  1383 ;;      Locals:         4       0       0       0       0
  1384 ;;      Temps:          1       0       0       0       0
  1385 ;;      Totals:         6       0       0       0       0
  1386 ;;Total ram usage:        6 bytes
  1387 ;; Hardware stack levels used: 1
  1388 ;; Hardware stack levels required when called: 2
  1389 ;; This function calls:
  1390 ;;		_Lcd_Cmd
  1391 ;; This function is called by:
  1392 ;;		_main
  1393 ;; This function uses a non-reentrant model
  1394 ;;
  1395                           
  1396     0599                     _Lcd_Set_Cursor:	
  1397                           ;psect for function _Lcd_Set_Cursor
  1398                           
  1399                           
  1400                           ;incstack = 0
  1401                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  1402                           ;Lcd_Set_Cursor@a stored from wreg
  1403     0599  00F6               	movwf	Lcd_Set_Cursor@a
  1404     059A                     l946:
  1405                           
  1406                           ;./lcd.h: 52: void Lcd_Set_Cursor(char a, char b);./lcd.h: 53: {;./lcd.h: 54:  char temp
      +                          ,z,y;;./lcd.h: 55:  if(a == 1)
  1407     059A  0376               	decf	Lcd_Set_Cursor@a,w
  1408     059B  1D03               	btfss	3,2
  1409     059C  2D9E               	goto	u391
  1410     059D  2D9F               	goto	u390
  1411     059E                     u391:
  1412     059E  2DBC               	goto	l956
  1413     059F                     u390:
  1414     059F                     l948:
  1415                           
  1416                           ;./lcd.h: 56:  {;./lcd.h: 57:    temp = 0x80 + b - 1;
  1417     059F  0874               	movf	Lcd_Set_Cursor@b,w
  1418     05A0  3E7F               	addlw	127
  1419     05A1  00F9               	movwf	Lcd_Set_Cursor@temp
  1420                           
  1421                           ;./lcd.h: 58:   z = temp>>4;
  1422     05A2  0879               	movf	Lcd_Set_Cursor@temp,w
  1423     05A3  00F5               	movwf	??_Lcd_Set_Cursor
  1424     05A4  3004               	movlw	4
  1425     05A5                     u405:
  1426     05A5  1003               	clrc
  1427     05A6  0CF5               	rrf	??_Lcd_Set_Cursor,f
  1428     05A7  3EFF               	addlw	-1
  1429     05A8  1D03               	skipz
  1430     05A9  2DA5               	goto	u405
  1431     05AA  0875               	movf	??_Lcd_Set_Cursor,w
  1432     05AB  00F7               	movwf	Lcd_Set_Cursor@z
  1433     05AC                     l950:
  1434                           
  1435                           ;./lcd.h: 59:   y = temp & 0x0F;
  1436     05AC  0879               	movf	Lcd_Set_Cursor@temp,w
  1437     05AD  390F               	andlw	15
  1438     05AE  00F8               	movwf	Lcd_Set_Cursor@y
  1439     05AF                     l952:
  1440                           
  1441                           ;./lcd.h: 60:   Lcd_Cmd(z);
  1442     05AF  0877               	movf	Lcd_Set_Cursor@z,w
  1443     05B0  120A  118A  246C  120A  118A  	fcall	_Lcd_Cmd
  1444     05B5                     l954:
  1445                           
  1446                           ;./lcd.h: 61:   Lcd_Cmd(y);
  1447     05B5  0878               	movf	Lcd_Set_Cursor@y,w
  1448     05B6  120A  118A  246C  120A  118A  	fcall	_Lcd_Cmd
  1449                           
  1450                           ;./lcd.h: 62:  }
  1451     05BB  2DDE               	goto	l71
  1452     05BC                     l956:
  1453     05BC  3002               	movlw	2
  1454     05BD  0676               	xorwf	Lcd_Set_Cursor@a,w
  1455     05BE  1D03               	btfss	3,2
  1456     05BF  2DC1               	goto	u411
  1457     05C0  2DC2               	goto	u410
  1458     05C1                     u411:
  1459     05C1  2DDE               	goto	l71
  1460     05C2                     u410:
  1461     05C2                     l958:
  1462                           
  1463                           ;./lcd.h: 64:  {;./lcd.h: 65:   temp = 0xC0 + b - 1;
  1464     05C2  0874               	movf	Lcd_Set_Cursor@b,w
  1465     05C3  3EBF               	addlw	191
  1466     05C4  00F9               	movwf	Lcd_Set_Cursor@temp
  1467                           
  1468                           ;./lcd.h: 66:   z = temp>>4;
  1469     05C5  0879               	movf	Lcd_Set_Cursor@temp,w
  1470     05C6  00F5               	movwf	??_Lcd_Set_Cursor
  1471     05C7  3004               	movlw	4
  1472     05C8                     u425:
  1473     05C8  1003               	clrc
  1474     05C9  0CF5               	rrf	??_Lcd_Set_Cursor,f
  1475     05CA  3EFF               	addlw	-1
  1476     05CB  1D03               	skipz
  1477     05CC  2DC8               	goto	u425
  1478     05CD  0875               	movf	??_Lcd_Set_Cursor,w
  1479     05CE  00F7               	movwf	Lcd_Set_Cursor@z
  1480     05CF                     l960:
  1481                           
  1482                           ;./lcd.h: 67:   y = temp & 0x0F;
  1483     05CF  0879               	movf	Lcd_Set_Cursor@temp,w
  1484     05D0  390F               	andlw	15
  1485     05D1  00F8               	movwf	Lcd_Set_Cursor@y
  1486     05D2                     l962:
  1487                           
  1488                           ;./lcd.h: 68:   Lcd_Cmd(z);
  1489     05D2  0877               	movf	Lcd_Set_Cursor@z,w
  1490     05D3  120A  118A  246C  120A  118A  	fcall	_Lcd_Cmd
  1491     05D8                     l964:
  1492                           
  1493                           ;./lcd.h: 69:   Lcd_Cmd(y);
  1494     05D8  0878               	movf	Lcd_Set_Cursor@y,w
  1495     05D9  120A  118A  246C  120A  118A  	fcall	_Lcd_Cmd
  1496     05DE                     l71:
  1497     05DE  0008               	return
  1498     05DF                     __end_of_Lcd_Set_Cursor:
  1499                           
  1500                           	psect	text4
  1501     05DF                     __ptext4:	
  1502 ;; *************** function _Lcd_Init *****************
  1503 ;; Defined at:
  1504 ;;		line 73 in file "./lcd.h"
  1505 ;; Parameters:    Size  Location     Type
  1506 ;;		None
  1507 ;; Auto vars:     Size  Location     Type
  1508 ;;		None
  1509 ;; Return value:  Size  Location     Type
  1510 ;;                  1    wreg      void 
  1511 ;; Registers used:
  1512 ;;		wreg, status,2, status,0, pclath, cstack
  1513 ;; Tracked objects:
  1514 ;;		On entry : 0/0
  1515 ;;		On exit  : 0/0
  1516 ;;		Unchanged: 0/0
  1517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1518 ;;      Params:         0       0       0       0       0
  1519 ;;      Locals:         0       0       0       0       0
  1520 ;;      Temps:          2       0       0       0       0
  1521 ;;      Totals:         2       0       0       0       0
  1522 ;;Total ram usage:        2 bytes
  1523 ;; Hardware stack levels used: 1
  1524 ;; Hardware stack levels required when called: 2
  1525 ;; This function calls:
  1526 ;;		_Lcd_Cmd
  1527 ;;		_Lcd_Port
  1528 ;; This function is called by:
  1529 ;;		_main
  1530 ;; This function uses a non-reentrant model
  1531 ;;
  1532                           
  1533     05DF                     _Lcd_Init:	
  1534                           ;psect for function _Lcd_Init
  1535                           
  1536     05DF                     l966:	
  1537                           ;incstack = 0
  1538                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  1539                           
  1540                           
  1541                           ;./lcd.h: 75:     TRISD = 0x00;
  1542     05DF  1683               	bsf	3,5	;RP0=1, select bank1
  1543     05E0  1303               	bcf	3,6	;RP1=0, select bank1
  1544     05E1  0188               	clrf	8	;volatile
  1545     05E2                     l968:
  1546                           
  1547                           ;./lcd.h: 77:     Lcd_Port(0x00);
  1548     05E2  3000               	movlw	0
  1549     05E3  120A  118A  2486  120A  118A  	fcall	_Lcd_Port
  1550     05E8                     l970:
  1551                           
  1552                           ;./lcd.h: 78:    _delay((unsigned long)((20)*(8000000/4000.0)));
  1553     05E8  3034               	movlw	52
  1554     05E9  00F5               	movwf	??_Lcd_Init+1
  1555     05EA  30F1               	movlw	241
  1556     05EB  00F4               	movwf	??_Lcd_Init
  1557     05EC                     u707:
  1558     05EC  0BF4               	decfsz	??_Lcd_Init,f
  1559     05ED  2DEC               	goto	u707
  1560     05EE  0BF5               	decfsz	??_Lcd_Init+1,f
  1561     05EF  2DEC               	goto	u707
  1562     05F0  2DF1               	nop2
  1563     05F1                     l972:
  1564                           
  1565                           ;./lcd.h: 79:   Lcd_Cmd(0x03);
  1566     05F1  3003               	movlw	3
  1567     05F2  120A  118A  246C  120A  118A  	fcall	_Lcd_Cmd
  1568     05F7                     l974:
  1569                           
  1570                           ;./lcd.h: 80:  _delay((unsigned long)((5)*(8000000/4000.0)));
  1571     05F7  300D               	movlw	13
  1572     05F8  00F5               	movwf	??_Lcd_Init+1
  1573     05F9  30FB               	movlw	251
  1574     05FA  00F4               	movwf	??_Lcd_Init
  1575     05FB                     u717:
  1576     05FB  0BF4               	decfsz	??_Lcd_Init,f
  1577     05FC  2DFB               	goto	u717
  1578     05FD  0BF5               	decfsz	??_Lcd_Init+1,f
  1579     05FE  2DFB               	goto	u717
  1580     05FF  2E00               	nop2
  1581     0600                     l976:
  1582                           
  1583                           ;./lcd.h: 81:   Lcd_Cmd(0x03);
  1584     0600  3003               	movlw	3
  1585     0601  120A  118A  246C  120A  118A  	fcall	_Lcd_Cmd
  1586     0606                     l978:
  1587                           
  1588                           ;./lcd.h: 82:  _delay((unsigned long)((11)*(8000000/4000.0)));
  1589     0606  301D               	movlw	29
  1590     0607  00F5               	movwf	??_Lcd_Init+1
  1591     0608  3091               	movlw	145
  1592     0609  00F4               	movwf	??_Lcd_Init
  1593     060A                     u727:
  1594     060A  0BF4               	decfsz	??_Lcd_Init,f
  1595     060B  2E0A               	goto	u727
  1596     060C  0BF5               	decfsz	??_Lcd_Init+1,f
  1597     060D  2E0A               	goto	u727
  1598     060E                     l980:
  1599                           
  1600                           ;./lcd.h: 83:   Lcd_Cmd(0x03);
  1601     060E  3003               	movlw	3
  1602     060F  120A  118A  246C  120A  118A  	fcall	_Lcd_Cmd
  1603     0614                     l982:
  1604                           
  1605                           ;./lcd.h: 85:   Lcd_Cmd(0x02);
  1606     0614  3002               	movlw	2
  1607     0615  120A  118A  246C  120A  118A  	fcall	_Lcd_Cmd
  1608     061A                     l984:
  1609                           
  1610                           ;./lcd.h: 86:   Lcd_Cmd(0x02);
  1611     061A  3002               	movlw	2
  1612     061B  120A  118A  246C  120A  118A  	fcall	_Lcd_Cmd
  1613     0620                     l986:
  1614                           
  1615                           ;./lcd.h: 87:   Lcd_Cmd(0x08);
  1616     0620  3008               	movlw	8
  1617     0621  120A  118A  246C  120A  118A  	fcall	_Lcd_Cmd
  1618     0626                     l988:
  1619                           
  1620                           ;./lcd.h: 88:   Lcd_Cmd(0x00);
  1621     0626  3000               	movlw	0
  1622     0627  120A  118A  246C  120A  118A  	fcall	_Lcd_Cmd
  1623     062C                     l990:
  1624                           
  1625                           ;./lcd.h: 89:   Lcd_Cmd(0x0C);
  1626     062C  300C               	movlw	12
  1627     062D  120A  118A  246C  120A  118A  	fcall	_Lcd_Cmd
  1628     0632                     l992:
  1629                           
  1630                           ;./lcd.h: 90:   Lcd_Cmd(0x00);
  1631     0632  3000               	movlw	0
  1632     0633  120A  118A  246C  120A  118A  	fcall	_Lcd_Cmd
  1633     0638                     l994:
  1634                           
  1635                           ;./lcd.h: 91:   Lcd_Cmd(0x06);
  1636     0638  3006               	movlw	6
  1637     0639  120A  118A  246C  120A  118A  	fcall	_Lcd_Cmd
  1638     063E                     l74:
  1639     063E  0008               	return
  1640     063F                     __end_of_Lcd_Init:
  1641                           
  1642                           	psect	text5
  1643     044C                     __ptext5:	
  1644 ;; *************** function _Lcd_Clear *****************
  1645 ;; Defined at:
  1646 ;;		line 46 in file "./lcd.h"
  1647 ;; Parameters:    Size  Location     Type
  1648 ;;		None
  1649 ;; Auto vars:     Size  Location     Type
  1650 ;;		None
  1651 ;; Return value:  Size  Location     Type
  1652 ;;                  1    wreg      void 
  1653 ;; Registers used:
  1654 ;;		wreg, status,2, status,0, pclath, cstack
  1655 ;; Tracked objects:
  1656 ;;		On entry : 0/0
  1657 ;;		On exit  : 0/0
  1658 ;;		Unchanged: 0/0
  1659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1660 ;;      Params:         0       0       0       0       0
  1661 ;;      Locals:         0       0       0       0       0
  1662 ;;      Temps:          0       0       0       0       0
  1663 ;;      Totals:         0       0       0       0       0
  1664 ;;Total ram usage:        0 bytes
  1665 ;; Hardware stack levels used: 1
  1666 ;; Hardware stack levels required when called: 2
  1667 ;; This function calls:
  1668 ;;		_Lcd_Cmd
  1669 ;; This function is called by:
  1670 ;;		_main
  1671 ;; This function uses a non-reentrant model
  1672 ;;
  1673                           
  1674     044C                     _Lcd_Clear:	
  1675                           ;psect for function _Lcd_Clear
  1676                           
  1677     044C                     l944:	
  1678                           ;incstack = 0
  1679                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  1680                           
  1681                           
  1682                           ;./lcd.h: 48:  Lcd_Cmd(0);
  1683     044C  3000               	movlw	0
  1684     044D  120A  118A  246C  120A  118A  	fcall	_Lcd_Cmd
  1685                           
  1686                           ;./lcd.h: 49:  Lcd_Cmd(1);
  1687     0452  3001               	movlw	1
  1688     0453  120A  118A  246C  120A  118A  	fcall	_Lcd_Cmd
  1689     0458                     l65:
  1690     0458  0008               	return
  1691     0459                     __end_of_Lcd_Clear:
  1692                           
  1693                           	psect	text6
  1694     046C                     __ptext6:	
  1695 ;; *************** function _Lcd_Cmd *****************
  1696 ;; Defined at:
  1697 ;;		line 37 in file "./lcd.h"
  1698 ;; Parameters:    Size  Location     Type
  1699 ;;  a               1    wreg     unsigned char 
  1700 ;; Auto vars:     Size  Location     Type
  1701 ;;  a               1    3[COMMON] unsigned char 
  1702 ;; Return value:  Size  Location     Type
  1703 ;;                  1    wreg      void 
  1704 ;; Registers used:
  1705 ;;		wreg, status,2, status,0, pclath, cstack
  1706 ;; Tracked objects:
  1707 ;;		On entry : 0/0
  1708 ;;		On exit  : 0/0
  1709 ;;		Unchanged: 0/0
  1710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1711 ;;      Params:         0       0       0       0       0
  1712 ;;      Locals:         1       0       0       0       0
  1713 ;;      Temps:          2       0       0       0       0
  1714 ;;      Totals:         3       0       0       0       0
  1715 ;;Total ram usage:        3 bytes
  1716 ;; Hardware stack levels used: 1
  1717 ;; Hardware stack levels required when called: 1
  1718 ;; This function calls:
  1719 ;;		_Lcd_Port
  1720 ;; This function is called by:
  1721 ;;		_Lcd_Clear
  1722 ;;		_Lcd_Set_Cursor
  1723 ;;		_Lcd_Init
  1724 ;;		_Lcd_Shift_Right
  1725 ;;		_Lcd_Shift_Left
  1726 ;; This function uses a non-reentrant model
  1727 ;;
  1728                           
  1729     046C                     _Lcd_Cmd:	
  1730                           ;psect for function _Lcd_Cmd
  1731                           
  1732                           
  1733                           ;incstack = 0
  1734                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  1735                           ;Lcd_Cmd@a stored from wreg
  1736     046C  00F3               	movwf	Lcd_Cmd@a
  1737     046D                     l914:
  1738                           
  1739                           ;./lcd.h: 37: void Lcd_Cmd(char a);./lcd.h: 38: {;./lcd.h: 39:  RC6 = 0;
  1740     046D  1283               	bcf	3,5	;RP0=0, select bank0
  1741     046E  1303               	bcf	3,6	;RP1=0, select bank0
  1742     046F  1307               	bcf	7,6	;volatile
  1743     0470                     l916:
  1744                           
  1745                           ;./lcd.h: 40:  Lcd_Port(a);
  1746     0470  0873               	movf	Lcd_Cmd@a,w
  1747     0471  120A  118A  2486  120A  118A  	fcall	_Lcd_Port
  1748     0476                     l918:
  1749                           
  1750                           ;./lcd.h: 41:  RC7 = 1;
  1751     0476  1283               	bcf	3,5	;RP0=0, select bank0
  1752     0477  1303               	bcf	3,6	;RP1=0, select bank0
  1753     0478  1787               	bsf	7,7	;volatile
  1754     0479                     l920:
  1755                           
  1756                           ;./lcd.h: 42:         _delay((unsigned long)((4)*(8000000/4000.0)));
  1757     0479  300B               	movlw	11
  1758     047A  00F2               	movwf	??_Lcd_Cmd+1
  1759     047B  3062               	movlw	98
  1760     047C  00F1               	movwf	??_Lcd_Cmd
  1761     047D                     u737:
  1762     047D  0BF1               	decfsz	??_Lcd_Cmd,f
  1763     047E  2C7D               	goto	u737
  1764     047F  0BF2               	decfsz	??_Lcd_Cmd+1,f
  1765     0480  2C7D               	goto	u737
  1766     0481  0000               	nop
  1767     0482                     l922:
  1768                           
  1769                           ;./lcd.h: 43:         RC7 = 0;
  1770     0482  1283               	bcf	3,5	;RP0=0, select bank0
  1771     0483  1303               	bcf	3,6	;RP1=0, select bank0
  1772     0484  1387               	bcf	7,7	;volatile
  1773     0485                     l62:
  1774     0485  0008               	return
  1775     0486                     __end_of_Lcd_Cmd:
  1776                           
  1777                           	psect	text7
  1778     0486                     __ptext7:	
  1779 ;; *************** function _Lcd_Port *****************
  1780 ;; Defined at:
  1781 ;;		line 15 in file "./lcd.h"
  1782 ;; Parameters:    Size  Location     Type
  1783 ;;  a               1    wreg     unsigned char 
  1784 ;; Auto vars:     Size  Location     Type
  1785 ;;  a               1    0[COMMON] unsigned char 
  1786 ;; Return value:  Size  Location     Type
  1787 ;;                  1    wreg      void 
  1788 ;; Registers used:
  1789 ;;		wreg
  1790 ;; Tracked objects:
  1791 ;;		On entry : 0/0
  1792 ;;		On exit  : 0/0
  1793 ;;		Unchanged: 0/0
  1794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1795 ;;      Params:         0       0       0       0       0
  1796 ;;      Locals:         1       0       0       0       0
  1797 ;;      Temps:          0       0       0       0       0
  1798 ;;      Totals:         1       0       0       0       0
  1799 ;;Total ram usage:        1 bytes
  1800 ;; Hardware stack levels used: 1
  1801 ;; This function calls:
  1802 ;;		Nothing
  1803 ;; This function is called by:
  1804 ;;		_Lcd_Cmd
  1805 ;;		_Lcd_Init
  1806 ;;		_Lcd_Write_Char
  1807 ;; This function uses a non-reentrant model
  1808 ;;
  1809                           
  1810     0486                     _Lcd_Port:	
  1811                           ;psect for function _Lcd_Port
  1812                           
  1813                           
  1814                           ;incstack = 0
  1815                           ; Regs used in _Lcd_Port: [wreg]
  1816                           ;Lcd_Port@a stored from wreg
  1817     0486  00F0               	movwf	Lcd_Port@a
  1818     0487                     l904:
  1819                           
  1820                           ;./lcd.h: 15: void Lcd_Port(char a);./lcd.h: 16: {;./lcd.h: 17:  if(a & 1)
  1821     0487  1C70               	btfss	Lcd_Port@a,0
  1822     0488  2C8A               	goto	u341
  1823     0489  2C8B               	goto	u340
  1824     048A                     u341:
  1825     048A  2C8F               	goto	l51
  1826     048B                     u340:
  1827     048B                     l906:
  1828                           
  1829                           ;./lcd.h: 18:   RD4 = 1;
  1830     048B  1283               	bcf	3,5	;RP0=0, select bank0
  1831     048C  1303               	bcf	3,6	;RP1=0, select bank0
  1832     048D  1608               	bsf	8,4	;volatile
  1833     048E  2C92               	goto	l52
  1834     048F                     l51:	
  1835                           ;./lcd.h: 19:  else
  1836                           
  1837                           
  1838                           ;./lcd.h: 20:   RD4 = 0;
  1839     048F  1283               	bcf	3,5	;RP0=0, select bank0
  1840     0490  1303               	bcf	3,6	;RP1=0, select bank0
  1841     0491  1208               	bcf	8,4	;volatile
  1842     0492                     l52:
  1843                           
  1844                           ;./lcd.h: 22:  if(a & 2)
  1845     0492  1CF0               	btfss	Lcd_Port@a,1
  1846     0493  2C95               	goto	u351
  1847     0494  2C96               	goto	u350
  1848     0495                     u351:
  1849     0495  2C98               	goto	l53
  1850     0496                     u350:
  1851     0496                     l908:
  1852                           
  1853                           ;./lcd.h: 23:   RD5 = 1;
  1854     0496  1688               	bsf	8,5	;volatile
  1855     0497  2C99               	goto	l54
  1856     0498                     l53:	
  1857                           ;./lcd.h: 24:  else
  1858                           
  1859                           
  1860                           ;./lcd.h: 25:   RD5 = 0;
  1861     0498  1288               	bcf	8,5	;volatile
  1862     0499                     l54:
  1863                           
  1864                           ;./lcd.h: 27:  if(a & 4)
  1865     0499  1D70               	btfss	Lcd_Port@a,2
  1866     049A  2C9C               	goto	u361
  1867     049B  2C9D               	goto	u360
  1868     049C                     u361:
  1869     049C  2C9F               	goto	l55
  1870     049D                     u360:
  1871     049D                     l910:
  1872                           
  1873                           ;./lcd.h: 28:   RD6 = 1;
  1874     049D  1708               	bsf	8,6	;volatile
  1875     049E  2CA0               	goto	l56
  1876     049F                     l55:	
  1877                           ;./lcd.h: 29:  else
  1878                           
  1879                           
  1880                           ;./lcd.h: 30:   RD6 = 0;
  1881     049F  1308               	bcf	8,6	;volatile
  1882     04A0                     l56:
  1883                           
  1884                           ;./lcd.h: 32:  if(a & 8)
  1885     04A0  1DF0               	btfss	Lcd_Port@a,3
  1886     04A1  2CA3               	goto	u371
  1887     04A2  2CA4               	goto	u370
  1888     04A3                     u371:
  1889     04A3  2CA6               	goto	l57
  1890     04A4                     u370:
  1891     04A4                     l912:
  1892                           
  1893                           ;./lcd.h: 33:   RD7 = 1;
  1894     04A4  1788               	bsf	8,7	;volatile
  1895     04A5  2CA7               	goto	l59
  1896     04A6                     l57:	
  1897                           ;./lcd.h: 34:  else
  1898                           
  1899                           
  1900                           ;./lcd.h: 35:   RD7 = 0;
  1901     04A6  1388               	bcf	8,7	;volatile
  1902     04A7                     l59:
  1903     04A7  0008               	return
  1904     04A8                     __end_of_Lcd_Port:
  1905                           
  1906                           	psect	text8
  1907     04DD                     __ptext8:	
  1908 ;; *************** function _ADC_Read *****************
  1909 ;; Defined at:
  1910 ;;		line 38 in file "./analog.h"
  1911 ;; Parameters:    Size  Location     Type
  1912 ;;  ANC             2    0[COMMON] int 
  1913 ;; Auto vars:     Size  Location     Type
  1914 ;;		None
  1915 ;; Return value:  Size  Location     Type
  1916 ;;                  2    0[COMMON] int 
  1917 ;; Registers used:
  1918 ;;		wreg, status,2, status,0, btemp+1
  1919 ;; Tracked objects:
  1920 ;;		On entry : 0/0
  1921 ;;		On exit  : 0/0
  1922 ;;		Unchanged: 0/0
  1923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1924 ;;      Params:         2       0       0       0       0
  1925 ;;      Locals:         0       0       0       0       0
  1926 ;;      Temps:          1       0       0       0       0
  1927 ;;      Totals:         3       0       0       0       0
  1928 ;;Total ram usage:        3 bytes
  1929 ;; Hardware stack levels used: 1
  1930 ;; This function calls:
  1931 ;;		Nothing
  1932 ;; This function is called by:
  1933 ;;		_main
  1934 ;; This function uses a non-reentrant model
  1935 ;;
  1936                           
  1937     04DD                     _ADC_Read:	
  1938                           ;psect for function _ADC_Read
  1939                           
  1940     04DD                     l1006:	
  1941                           ;incstack = 0
  1942                           ; Regs used in _ADC_Read: [wreg+status,2+status,0+btemp+1]
  1943                           
  1944                           
  1945                           ;./analog.h: 38: int ADC_Read(int ANC);./analog.h: 39: {;./analog.h: 40:     if(ANC<0 ||
      +                           ANC>7)
  1946     04DD  1BF1               	btfsc	ADC_Read@ANC+1,7
  1947     04DE  2CE0               	goto	u461
  1948     04DF  2CE1               	goto	u460
  1949     04E0                     u461:
  1950     04E0  2CEE               	goto	l1010
  1951     04E1                     u460:
  1952     04E1                     l1008:
  1953     04E1  0871               	movf	ADC_Read@ANC+1,w
  1954     04E2  3A80               	xorlw	128
  1955     04E3  00FF               	movwf	btemp+1
  1956     04E4  3080               	movlw	128
  1957     04E5  027F               	subwf	btemp+1,w
  1958     04E6  1D03               	skipz
  1959     04E7  2CEA               	goto	u475
  1960     04E8  3008               	movlw	8
  1961     04E9  0270               	subwf	ADC_Read@ANC,w
  1962     04EA                     u475:
  1963     04EA  1C03               	skipc
  1964     04EB  2CED               	goto	u471
  1965     04EC  2CEE               	goto	u470
  1966     04ED                     u471:
  1967     04ED  2CF1               	goto	l1014
  1968     04EE                     u470:
  1969     04EE                     l1010:
  1970                           
  1971                           ;./analog.h: 41:     { return 0;}
  1972     04EE  01F0               	clrf	?_ADC_Read
  1973     04EF  01F1               	clrf	?_ADC_Read+1
  1974     04F0  2D16               	goto	l107
  1975     04F1                     l1014:
  1976                           
  1977                           ;./analog.h: 42:     ADCON0 &= 0b11000101;
  1978     04F1  30C5               	movlw	197
  1979     04F2  00FF               	movwf	btemp+1
  1980     04F3  087F               	movf	btemp+1,w
  1981     04F4  1283               	bcf	3,5	;RP0=0, select bank0
  1982     04F5  1303               	bcf	3,6	;RP1=0, select bank0
  1983     04F6  059F               	andwf	31,f	;volatile
  1984                           
  1985                           ;./analog.h: 43:     ADCON0 |= ANC<<3;
  1986     04F7  0870               	movf	ADC_Read@ANC,w	;volatile
  1987     04F8  00F2               	movwf	??_ADC_Read
  1988     04F9  3002               	movlw	2
  1989     04FA                     u485:
  1990     04FA  1003               	clrc
  1991     04FB  0DF2               	rlf	??_ADC_Read,f
  1992     04FC  3EFF               	addlw	-1
  1993     04FD  1D03               	skipz
  1994     04FE  2CFA               	goto	u485
  1995     04FF  1003               	clrc
  1996     0500  0D72               	rlf	??_ADC_Read,w
  1997     0501  00FF               	movwf	btemp+1
  1998     0502  087F               	movf	btemp+1,w
  1999     0503  049F               	iorwf	31,f	;volatile
  2000     0504                     l1016:
  2001                           
  2002                           ;./analog.h: 45:     _delay((unsigned long)((30)*(8000000/4000000.0)));
  2003     0504  3013               	movlw	19
  2004     0505  00F2               	movwf	??_ADC_Read
  2005     0506                     u747:
  2006     0506  0BF2               	decfsz	??_ADC_Read,f
  2007     0507  2D06               	goto	u747
  2008     0508  2D09               	nop2
  2009     0509                     l1018:
  2010                           
  2011                           ;./analog.h: 46:     GO_DONE = 1;
  2012     0509  1283               	bcf	3,5	;RP0=0, select bank0
  2013     050A  1303               	bcf	3,6	;RP1=0, select bank0
  2014     050B  151F               	bsf	31,2	;volatile
  2015     050C                     l108:	
  2016                           ;./analog.h: 47:     while(ADCON0bits.GO_DONE);
  2017                           
  2018     050C  191F               	btfsc	31,2	;volatile
  2019     050D  2D0F               	goto	u491
  2020     050E  2D10               	goto	u490
  2021     050F                     u491:
  2022     050F  2D0C               	goto	l108
  2023     0510                     u490:
  2024     0510                     l1020:
  2025                           
  2026                           ;./analog.h: 49:     return ((ADRESH << 8) + ADRESL);
  2027     0510  081E               	movf	30,w	;volatile
  2028     0511  00F1               	movwf	?_ADC_Read+1
  2029     0512  1683               	bsf	3,5	;RP0=1, select bank1
  2030     0513  1303               	bcf	3,6	;RP1=0, select bank1
  2031     0514  081E               	movf	30,w	;volatile
  2032     0515  00F0               	movwf	?_ADC_Read
  2033     0516                     l107:
  2034     0516  0008               	return
  2035     0517                     __end_of_ADC_Read:
  2036                           
  2037                           	psect	text9
  2038     0443                     __ptext9:	
  2039 ;; *************** function _ADC_Init *****************
  2040 ;; Defined at:
  2041 ;;		line 15 in file "./analog.h"
  2042 ;; Parameters:    Size  Location     Type
  2043 ;;		None
  2044 ;; Auto vars:     Size  Location     Type
  2045 ;;		None
  2046 ;; Return value:  Size  Location     Type
  2047 ;;                  1    wreg      void 
  2048 ;; Registers used:
  2049 ;;		wreg
  2050 ;; Tracked objects:
  2051 ;;		On entry : 0/0
  2052 ;;		On exit  : 0/0
  2053 ;;		Unchanged: 0/0
  2054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2055 ;;      Params:         0       0       0       0       0
  2056 ;;      Locals:         0       0       0       0       0
  2057 ;;      Temps:          0       0       0       0       0
  2058 ;;      Totals:         0       0       0       0       0
  2059 ;;Total ram usage:        0 bytes
  2060 ;; Hardware stack levels used: 1
  2061 ;; This function calls:
  2062 ;;		Nothing
  2063 ;; This function is called by:
  2064 ;;		_main
  2065 ;; This function uses a non-reentrant model
  2066 ;;
  2067                           
  2068     0443                     _ADC_Init:	
  2069                           ;psect for function _ADC_Init
  2070                           
  2071     0443                     l1004:	
  2072                           ;incstack = 0
  2073                           ; Regs used in _ADC_Init: [wreg]
  2074                           
  2075                           
  2076                           ;./analog.h: 19:     ADCON0 = 0x41;
  2077     0443  3041               	movlw	65
  2078     0444  1283               	bcf	3,5	;RP0=0, select bank0
  2079     0445  1303               	bcf	3,6	;RP1=0, select bank0
  2080     0446  009F               	movwf	31	;volatile
  2081                           
  2082                           ;./analog.h: 20:     ADCON1 = 0x80;
  2083     0447  3080               	movlw	128
  2084     0448  1683               	bsf	3,5	;RP0=1, select bank1
  2085     0449  1303               	bcf	3,6	;RP1=0, select bank1
  2086     044A  009F               	movwf	31	;volatile
  2087     044B                     l101:
  2088     044B  0008               	return
  2089     044C                     __end_of_ADC_Init:
  2090     007E                     btemp	set	126	;btemp
  2091     007E                     wtemp0	set	126
  2092                           
  2093                           	psect	config
  2094                           
  2095                           ;Config register CONFIG @ 0x2007
  2096                           ;	Oscillator Selection bits
  2097                           ;	FOSC = HS, HS oscillator
  2098                           ;	Watchdog Timer Enable bit
  2099                           ;	WDTE = OFF, WDT disabled
  2100                           ;	Power-up Timer Enable bit
  2101                           ;	PWRTE = OFF, PWRT disabled
  2102                           ;	Brown-out Reset Enable bit
  2103                           ;	BOREN = ON, BOR enabled
  2104                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  2105                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  2106                           ;	Data EEPROM Memory Code Protection bit
  2107                           ;	CPD = OFF, Data EEPROM code protection off
  2108                           ;	Flash Program Memory Write Enable bits
  2109                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  2110                           ;	In-Circuit Debugger Mode bit
  2111                           ;	DEBUG = 0x1, unprogrammed default
  2112                           ;	Flash Program Memory Code Protection bit
  2113                           ;	CP = OFF, Code protection off
  2114     2007                     	org	8199
  2115     2007  3F7A               	dw	16250

Data Sizes:
    Strings     36
    Constant    0
    Data        64
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      12
    BANK0            80     79      79
    BANK1            80      0      64
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    f$.$buffer	PTR unsigned char  size(1) Largest target is 0

    f$.$source	PTR const unsigned char  size(1) Largest target is 0

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 17
		 -> Lcd_Write_Int@str(BANK0[16]), STR_2(CODE[17]), STR_3(CODE[16]), 

    main@F1529$port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), PORTB(SFR0[1]), PORTE(SFR0[1]), 

    main@F1531$port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), PORTB(SFR0[1]), PORTE(SFR0[1]), 

    main@led$port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), PORTB(SFR0[1]), PORTE(SFR0[1]), 

    S609$buffer	PTR unsigned char  size(1) Largest target is 0

    S609$source	PTR const unsigned char  size(1) Largest target is 0

    S99_Pin$port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), PORTB(SFR0[1]), PORTE(SFR0[1]), 

    vfprintf$0	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMMON[11]), 

    vfprintf$1	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_1(CODE[3]), 

    vfprintf$2	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMMON[1]), 


Critical Paths under _main in COMMON

    _main->_Lcd_Write_String
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                81    81      0    2022
                                              0 BANK0     79    79      0
                           _ADC_Init
                           _ADC_Read
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2     496
                                              5 COMMON     7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       6     5      1     532
                                              4 COMMON     6     5      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_Read                                             3     1      2     142
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (1) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Init
   _ADC_Read
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      40       7       80.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     4F      4F       5       98.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      C       C       1       85.7%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      9B      12        0.0%
ABS                  0      0      9B       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Tue Jan 09 05:12:28 2024

                       pc 0002                        l51 048F                        l52 0492  
                      l53 0498                        l54 0499                        l62 0485  
                      l55 049F                        l71 05DE                        l56 04A0  
                      l57 04A6                        l65 0458                        l74 063E  
                      l59 04A7                        l83 0598                        l77 04DC  
                      fsr 0004                       l101 044B                       l107 0516  
                     l108 050C                       l910 049D                       l912 04A4  
                     l904 0487                       l920 0479                       l906 048B  
                     l922 0482                       l914 046D                       l930 04C0  
                     l908 0496                       l916 0470                       l940 04D4  
                     l932 04C3                       l924 04A9                       l918 0476  
                     l950 05AC                       l942 04D9                       l934 04C8  
                     l926 04AF                       l944 044C                       l960 05CF  
                     l952 05AF                       l936 04CB                       l928 04B2  
                     l970 05E8                       l962 05D2                       l954 05B5  
                     l946 059A                       l938 04D1                       l980 060E  
                     l972 05F1                       l964 05D8                       l948 059F  
                     l956 05BC                       l990 062C                       l982 0614  
                     l974 05F7                       l966 05DF                       l958 05C2  
                     l992 0632                       l984 061A                       l976 0600  
                     l968 05E2                       l994 0638                       l986 0620  
                     l978 0606                       l988 0626                       l996 0557  
                     l998 055A                       _RC0 0038                       _RD4 0044  
                     _RC6 003E                       _RD5 0045                       _RC7 003F  
                     _RD6 0046                       _RD7 0047                       u410 05C2  
                     u411 05C1                       u340 048B                       u500 0696  
                     u341 048A                       u405 05A5                       u350 0496  
                     u430 0564                       u510 06AB                       u351 0495  
                     u360 049D                       u440 0586                       u361 049C  
                     u425 05C8                       u370 04A4                       u450 0598  
                     u530 06E9                       u371 04A3                       u451 0597  
                     u531 06E8                       u460 04E1                       u540 070B  
                     u461 04E0                       u605 077C                       u541 070A  
                     u525 06C1                       u470 04EE                       u390 059F  
                     u630 07C4                       u614 078B                       u471 04ED  
                     u391 059E                       u631 07C3                       u615 0789  
                     u535 06E5                       u640 07CA                       u385 04B5  
                     u641 07C9                       u625 0793                       u545 0707  
                     u490 0510                       u650 07DF                       u491 050F  
                     u475 04EA                       u707 05EC                       u651 07DE  
                     u635 07C0                       u555 0719                       u580 0761  
                     u564 0728                       u485 04FA                       u717 05FB  
                     u581 0760                       u565 0726                       u590 0770  
                     u727 060A                       u655 07DB                       u591 076F  
                     u575 0730                       u737 047D                       u585 075D  
                     u747 0506                       u595 076C                       u667 0678  
                     u677 07E5                       u687 04C5                       u697 04D6  
                     fsr0 0004                       indf 0000                      l1000 0576  
                    l1010 04EE                      l1002 057C                      l1004 0443  
                    l1020 0510                      l1100 0770                      l1014 04F1  
                    l1006 04DD                      l1102 0777                      l1110 07CA  
                    l1016 0504                      l1008 04E1                      l1112 07D2  
                    l1104 07A8                      l1040 0649                      l1032 063F  
                    l1018 0509                      l1114 07DF                      l1106 07AE  
                    l1050 0670                      l1042 064E                      l1034 0642  
                    l1108 07C4                      l1060 068A                      l1052 067F  
                    l1044 0656                      l1036 0643                      l1062 068D  
                    l1054 0684                      l1046 065F                      l1038 0644  
                    l1080 06E9                      l1064 068E                      l1056 0688  
                    l1048 0667                      l1090 070B                      l1074 06BC  
                    l1066 06A3                      l1058 0689                      l1092 0712  
                    l1076 06D6                      l1068 06B8                      l1094 0745  
                    l1086 06ED                      l1078 06DC                      l1096 074B  
                    l1088 06FE                      l1098 0761                      STR_1 0034  
                    STR_2 0013                      STR_3 0024         ?_Lcd_Write_String 0075  
                    _main 063F                      btemp 007E          __end_of_ADC_Init 044C  
        __end_of_ADC_Read 0517                      start 0000        ??_Lcd_Write_String 0077  
         __end_of_Lcd_Cmd 0486                     ?_main 0070                     _PORTA 0005  
                   _PORTB 0006                     _PORTE 0009                     _TRISA 0085  
                   _TRISB 0086                     _TRISD 0088                     main@i 0067  
                   main@j 0069                     main@s 0025                     pclath 000A  
                   status 0003                     wtemp0 007E          __end_of_Lcd_Init 063F  
        __end_of_Lcd_Port 04A8           __initialization 07EE              __end_of_main 07EE  
                  ??_main 0020                    _ADCON0 001F                    _ADCON1 009F  
                  _ADRESH 001E                    _ADRESL 009E                 ??_Lcd_Cmd 0071  
                  _TRISC0 0438                    _TRISC6 043E                    _TRISC7 043F  
               ?_ADC_Init 0070                 ?_ADC_Read 0070           Lcd_Set_Cursor@a 0076  
         Lcd_Set_Cursor@b 0074           Lcd_Set_Cursor@y 0078           Lcd_Set_Cursor@z 0077  
 __end_of__initialization 07FC         __end_of_Lcd_Clear 0459            __pcstackCOMMON 0070  
            __pidataBANK1 0517            _Lcd_Set_Cursor 0599                ??_ADC_Init 0070  
              ??_ADC_Read 0072                 ?_Lcd_Init 0070                 ?_Lcd_Port 0070  
              __pmaintext 063F    __end_of_Lcd_Set_Cursor 05DF                   _GO_DONE 00FA  
              ??_Lcd_Init 0074                ??_Lcd_Port 0070                __stringtab 0003  
          _Lcd_Write_Char 04A8                   _Lcd_Cmd 046C           ?_Lcd_Set_Cursor 0074  
                 __ptext1 0557                   __ptext2 04A8                   __ptext3 0599  
                 __ptext4 05DF                   __ptext5 044C                   __ptext6 046C  
                 __ptext7 0486                   __ptext8 04DD                   __ptext9 0443  
                 main@led 0045                   main@val 0065    __end_of_Lcd_Write_Char 04DD  
    end_of_initialization 07FC                 Lcd_Port@a 0070           ?_Lcd_Write_Char 0070  
       Lcd_Write_String@a 0075         Lcd_Write_String@i 007A                 _Lcd_Clear 044C  
        _Lcd_Write_String 0557       start_initialization 07EE                ?_Lcd_Clear 0070  
              init_fetch0 0459               __pdataBANK1 00A0           Lcd_Write_Char@a 0074  
         Lcd_Write_Char@y 0073                 ___latbits 0002             __pcstackBANK0 0020  
                ?_Lcd_Cmd 0070          ??_Lcd_Set_Cursor 0075                 __pstrings 0003  
                _ADC_Init 0443                  _ADC_Read 04DD               ADC_Read@ANC 0070  
                Lcd_Cmd@a 0073               ??_Lcd_Clear 0074                 main@F1531 00A0  
               main@F1529 00C0                _ADCON0bits 001F               __stringbase 0012  
               main@i_163 006D                 main@j_167 006B          ??_Lcd_Write_Char 0071  
                _Lcd_Init 05DF                  _Lcd_Port 0486  __end_of_Lcd_Write_String 0599  
      __end_of__stringtab 0013                  init_ram0 045D        Lcd_Write_Char@temp 0072  
               stringcode 000D        Lcd_Set_Cursor@temp 0079                  stringdir 000D  
                stringtab 0003  
