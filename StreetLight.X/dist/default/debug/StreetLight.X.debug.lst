

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Wed Dec 27 02:36:30 2023

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK2,global,class=CODE,delta=2,noexec
     6                           	psect	strings,global,class=STRING,delta=2,noexec
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,noexec
    12                           	psect	inittext,global,class=CODE,delta=2
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    17                           	psect	maintext,global,class=CODE,split=1,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,delta=2
    19                           	psect	text2,local,class=CODE,merge=1,delta=2,group=3
    20                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    21                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text5,local,class=CODE,merge=1,delta=2,group=3
    23                           	psect	text6,local,class=CODE,merge=1,delta=2,group=3
    24                           	psect	text7,local,class=CODE,merge=1,delta=2,group=3
    25                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text10,local,class=CODE,merge=1,delta=2
    28                           	psect	text11,local,class=CODE,merge=1,delta=2
    29                           	psect	text12,local,class=CODE,merge=1,delta=2
    30                           	psect	text13,local,class=CODE,merge=1,delta=2
    31                           	psect	text14,local,class=CODE,merge=1,delta=2
    32                           	psect	text15,local,class=CODE,merge=1,delta=2
    33                           	psect	text16,local,class=CODE,merge=1,delta=2
    34                           	psect	text17,local,class=CODE,merge=1,delta=2
    35                           	psect	text18,local,class=CODE,merge=1,delta=2
    36                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    37                           	dabs	1,0x7E,2
    38     0000                     
    39                           ; Generated 22/03/2023 GMT
    40                           ; 
    41                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    42                           ; All rights reserved.
    43                           ; 
    44                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    45                           ; 
    46                           ; Redistribution and use in source and binary forms, with or without modification, are
    47                           ; permitted provided that the following conditions are met:
    48                           ; 
    49                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    50                           ;        conditions and the following disclaimer.
    51                           ; 
    52                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    53                           ;        of conditions and the following disclaimer in the documentation and/or other
    54                           ;        materials provided with the distribution. Publication is not required when
    55                           ;        this file is used in an embedded application.
    56                           ; 
    57                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    58                           ;        software without specific prior written permission.
    59                           ; 
    60                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    61                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    62                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    63                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    64                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    65                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    66                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    67                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    68                           ; 
    69                           ; 
    70                           ; Code-generator required, PIC16F877A Definitions
    71                           ; 
    72                           ; SFR Addresses
    73     0000                     	;# 
    74     0001                     	;# 
    75     0002                     	;# 
    76     0003                     	;# 
    77     0004                     	;# 
    78     0005                     	;# 
    79     0006                     	;# 
    80     0007                     	;# 
    81     0008                     	;# 
    82     0009                     	;# 
    83     000A                     	;# 
    84     000B                     	;# 
    85     000C                     	;# 
    86     000D                     	;# 
    87     000E                     	;# 
    88     000E                     	;# 
    89     000F                     	;# 
    90     0010                     	;# 
    91     0011                     	;# 
    92     0012                     	;# 
    93     0013                     	;# 
    94     0014                     	;# 
    95     0015                     	;# 
    96     0015                     	;# 
    97     0016                     	;# 
    98     0017                     	;# 
    99     0018                     	;# 
   100     0019                     	;# 
   101     001A                     	;# 
   102     001B                     	;# 
   103     001B                     	;# 
   104     001C                     	;# 
   105     001D                     	;# 
   106     001E                     	;# 
   107     001F                     	;# 
   108     0081                     	;# 
   109     0085                     	;# 
   110     0086                     	;# 
   111     0087                     	;# 
   112     0088                     	;# 
   113     0089                     	;# 
   114     008C                     	;# 
   115     008D                     	;# 
   116     008E                     	;# 
   117     0091                     	;# 
   118     0092                     	;# 
   119     0093                     	;# 
   120     0094                     	;# 
   121     0098                     	;# 
   122     0099                     	;# 
   123     009C                     	;# 
   124     009D                     	;# 
   125     009E                     	;# 
   126     009F                     	;# 
   127     010C                     	;# 
   128     010D                     	;# 
   129     010E                     	;# 
   130     010F                     	;# 
   131     018C                     	;# 
   132     018D                     	;# 
   133     0000                     	;# 
   134     0001                     	;# 
   135     0002                     	;# 
   136     0003                     	;# 
   137     0004                     	;# 
   138     0005                     	;# 
   139     0006                     	;# 
   140     0007                     	;# 
   141     0008                     	;# 
   142     0009                     	;# 
   143     000A                     	;# 
   144     000B                     	;# 
   145     000C                     	;# 
   146     000D                     	;# 
   147     000E                     	;# 
   148     000E                     	;# 
   149     000F                     	;# 
   150     0010                     	;# 
   151     0011                     	;# 
   152     0012                     	;# 
   153     0013                     	;# 
   154     0014                     	;# 
   155     0015                     	;# 
   156     0015                     	;# 
   157     0016                     	;# 
   158     0017                     	;# 
   159     0018                     	;# 
   160     0019                     	;# 
   161     001A                     	;# 
   162     001B                     	;# 
   163     001B                     	;# 
   164     001C                     	;# 
   165     001D                     	;# 
   166     001E                     	;# 
   167     001F                     	;# 
   168     0081                     	;# 
   169     0085                     	;# 
   170     0086                     	;# 
   171     0087                     	;# 
   172     0088                     	;# 
   173     0089                     	;# 
   174     008C                     	;# 
   175     008D                     	;# 
   176     008E                     	;# 
   177     0091                     	;# 
   178     0092                     	;# 
   179     0093                     	;# 
   180     0094                     	;# 
   181     0098                     	;# 
   182     0099                     	;# 
   183     009C                     	;# 
   184     009D                     	;# 
   185     009E                     	;# 
   186     009F                     	;# 
   187     010C                     	;# 
   188     010D                     	;# 
   189     010E                     	;# 
   190     010F                     	;# 
   191     018C                     	;# 
   192     018D                     	;# 
   193                           
   194                           	psect	idataBANK1
   195     01DD                     __pidataBANK1:
   196                           
   197                           ;initializer for main@F1529
   198     01DD  3405               	retlw	5
   199     01DE  3400               	retlw	0
   200     01DF  3400               	retlw	0
   201     01E0  3400               	retlw	0
   202     01E1  3405               	retlw	5
   203     01E2  3400               	retlw	0
   204     01E3  3401               	retlw	1
   205     01E4  3400               	retlw	0
   206     01E5  3405               	retlw	5
   207     01E6  3400               	retlw	0
   208     01E7  3402               	retlw	2
   209     01E8  3400               	retlw	0
   210     01E9  3405               	retlw	5
   211     01EA  3400               	retlw	0
   212     01EB  3403               	retlw	3
   213     01EC  3400               	retlw	0
   214     01ED  3405               	retlw	5
   215     01EE  3400               	retlw	0
   216     01EF  3404               	retlw	4
   217     01F0  3400               	retlw	0
   218     01F1  3405               	retlw	5
   219     01F2  3400               	retlw	0
   220     01F3  3405               	retlw	5
   221     01F4  3400               	retlw	0
   222     01F5  3409               	retlw	9
   223     01F6  3400               	retlw	0
   224     01F7  3400               	retlw	0
   225     01F8  3400               	retlw	0
   226     01F9  3409               	retlw	9
   227     01FA  3400               	retlw	0
   228     01FB  3401               	retlw	1
   229     01FC  3400               	retlw	0
   230     01FD  3409               	retlw	9
   231     01FE  3400               	retlw	0
   232     01FF  3402               	retlw	2
   233     0200  3400               	retlw	0
   234                           
   235                           	psect	idataBANK2
   236     01B9                     __pidataBANK2:
   237                           
   238                           ;initializer for main@F1531
   239     01B9  3406               	retlw	6
   240     01BA  3400               	retlw	0
   241     01BB  3400               	retlw	0
   242     01BC  3400               	retlw	0
   243     01BD  3406               	retlw	6
   244     01BE  3400               	retlw	0
   245     01BF  3401               	retlw	1
   246     01C0  3400               	retlw	0
   247     01C1  3406               	retlw	6
   248     01C2  3400               	retlw	0
   249     01C3  3402               	retlw	2
   250     01C4  3400               	retlw	0
   251     01C5  3406               	retlw	6
   252     01C6  3400               	retlw	0
   253     01C7  3403               	retlw	3
   254     01C8  3400               	retlw	0
   255     01C9  3406               	retlw	6
   256     01CA  3400               	retlw	0
   257     01CB  3404               	retlw	4
   258     01CC  3400               	retlw	0
   259     01CD  3406               	retlw	6
   260     01CE  3400               	retlw	0
   261     01CF  3405               	retlw	5
   262     01D0  3400               	retlw	0
   263     01D1  3406               	retlw	6
   264     01D2  3400               	retlw	0
   265     01D3  3406               	retlw	6
   266     01D4  3400               	retlw	0
   267     01D5  3406               	retlw	6
   268     01D6  3400               	retlw	0
   269     01D7  3407               	retlw	7
   270     01D8  3400               	retlw	0
   271     01D9  3407               	retlw	7
   272     01DA  3400               	retlw	0
   273     01DB  3400               	retlw	0
   274     01DC  3400               	retlw	0
   275     001E                     _ADRESH	set	30
   276     001F                     _ADCON0bits	set	31
   277     001F                     _ADCON0	set	31
   278     0007                     _PORTC	set	7
   279     0009                     _PORTE	set	9
   280     0005                     _PORTA	set	5
   281     0006                     _PORTB	set	6
   282     0038                     _RC0	set	56
   283     00FA                     _GO_DONE	set	250
   284     0043                     _RD3	set	67
   285     0042                     _RD2	set	66
   286     0047                     _RD7	set	71
   287     0046                     _RD6	set	70
   288     0045                     _RD5	set	69
   289     0044                     _RD4	set	68
   290     0086                     _TRISB	set	134
   291     0085                     _TRISA	set	133
   292     009E                     _ADRESL	set	158
   293     009F                     _ADCON1	set	159
   294     0088                     _TRISD	set	136
   295     0438                     _TRISC0	set	1080
   296                           
   297                           	psect	strings
   298     0004                     __pstrings:
   299     0004                     stringtab:
   300     0004                     __stringtab:
   301                           
   302                           ;	String table - string pointers are 1 byte each
   303     0004  1BFF               	btfsc	btemp+1,7
   304     0005  280E               	ljmp	stringcode
   305     0006  1383               	bcf	3,7
   306     0007  187F               	btfsc	btemp+1,0
   307     0008  1783               	bsf	3,7
   308     0009  0800               	movf	0,w
   309     000A  0A84               	incf	4,f
   310     000B  1903               	skipnz
   311     000C  0AFF               	incf	btemp+1,f
   312     000D  0008               	return
   313     000E                     stringcode:
   314     000E                     stringdir:
   315     000E  3000               	movlw	high stringdir
   316     000F  008A               	movwf	10
   317     0010  0804               	movf	4,w
   318     0011  0A84               	incf	4,f
   319     0012  0782               	addwf	2,f
   320     0013                     __stringbase:
   321     0013  3400               	retlw	0
   322     0014                     __end_of__stringtab:
   323     0014                     STR_2:
   324     0014  3457               	retlw	87	;'W'
   325     0015  3465               	retlw	101	;'e'
   326     0016  346C               	retlw	108	;'l'
   327     0017  3463               	retlw	99	;'c'
   328     0018  346F               	retlw	111	;'o'
   329     0019  346D               	retlw	109	;'m'
   330     001A  3465               	retlw	101	;'e'
   331     001B  3420               	retlw	32	;' '
   332     001C  3474               	retlw	116	;'t'
   333     001D  346F               	retlw	111	;'o'
   334     001E  3420               	retlw	32	;' '
   335     001F  344C               	retlw	76	;'L'
   336     0020  3469               	retlw	105	;'i'
   337     0021  3467               	retlw	103	;'g'
   338     0022  3468               	retlw	104	;'h'
   339     0023  3474               	retlw	116	;'t'
   340     0024  3400               	retlw	0
   341     0025                     STR_3:
   342     0025  3450               	retlw	80	;'P'
   343     0026  346F               	retlw	111	;'o'
   344     0027  3477               	retlw	119	;'w'
   345     0028  3465               	retlw	101	;'e'
   346     0029  3472               	retlw	114	;'r'
   347     002A  3465               	retlw	101	;'e'
   348     002B  3464               	retlw	100	;'d'
   349     002C  3420               	retlw	32	;' '
   350     002D  3462               	retlw	98	;'b'
   351     002E  3479               	retlw	121	;'y'
   352     002F  3420               	retlw	32	;' '
   353     0030  3453               	retlw	83	;'S'
   354     0031  344C               	retlw	76	;'L'
   355     0032  3454               	retlw	84	;'T'
   356     0033  3443               	retlw	67	;'C'
   357     0034  3400               	retlw	0
   358     0035                     STR_4:
   359     0035  3448               	retlw	72	;'H'
   360     0036  3465               	retlw	101	;'e'
   361     0037  346C               	retlw	108	;'l'
   362     0038  346C               	retlw	108	;'l'
   363     0039  346F               	retlw	111	;'o'
   364     003A  342E               	retlw	46	;'.'
   365     003B  342E               	retlw	46	;'.'
   366     003C  342E               	retlw	46	;'.'
   367     003D  3400               	retlw	0
   368     003E                     STR_1:
   369     003E  3425               	retlw	37	;'%'
   370     003F  3464               	retlw	100	;'d'
   371     0040  3400               	retlw	0
   372                           
   373                           	psect	cinit
   374     07D3                     start_initialization:	
   375                           ; #config settings
   376                           
   377     07D3                     __initialization:
   378                           
   379                           ; Initialize objects allocated to BANK2
   380     07D3  1783               	bsf	3,7	;select IRP bank2
   381     07D4  3034               	movlw	low (__pdataBANK2+36)
   382     07D5  00FD               	movwf	btemp+-1
   383     07D6  3001               	movlw	high __pidataBANK2
   384     07D7  00FE               	movwf	btemp
   385     07D8  30B9               	movlw	low __pidataBANK2
   386     07D9  00FF               	movwf	btemp+1
   387     07DA  3010               	movlw	low __pdataBANK2
   388     07DB  0084               	movwf	4
   389     07DC  120A  118A  2116  120A  118A  	fcall	init_ram0
   390                           
   391                           ; Initialize objects allocated to BANK1
   392     07E1  1383               	bcf	3,7	;select IRP bank0
   393     07E2  30C4               	movlw	low (__pdataBANK1+36)
   394     07E3  00FD               	movwf	btemp+-1
   395     07E4  3001               	movlw	high __pidataBANK1
   396     07E5  00FE               	movwf	btemp
   397     07E6  30DD               	movlw	low __pidataBANK1
   398     07E7  00FF               	movwf	btemp+1
   399     07E8  30A0               	movlw	low __pdataBANK1
   400     07E9  0084               	movwf	4
   401     07EA  120A  118A  2116  120A  118A  	fcall	init_ram0
   402                           
   403                           ; Clear objects allocated to BANK1
   404     07EF  30C4               	movlw	low __pbssBANK1
   405     07F0  0084               	movwf	4
   406     07F1  30E4               	movlw	low (__pbssBANK1+32)
   407     07F2  120A  118A  20E3  120A  118A  	fcall	clear_ram0
   408                           
   409                           ; Clear objects allocated to BANK0
   410     07F7  01D5               	clrf	__pbssBANK0& (0+127)
   411     07F8  01D6               	clrf	(__pbssBANK0+1)& (0+127)
   412     07F9  01D7               	clrf	(__pbssBANK0+2)& (0+127)
   413     07FA  01D8               	clrf	(__pbssBANK0+3)& (0+127)
   414     07FB  01D9               	clrf	(__pbssBANK0+4)& (0+127)
   415     07FC                     end_of_initialization:	
   416                           ;End of C runtime variable initialization code
   417                           
   418     07FC                     __end_of__initialization:
   419     07FC  0183               	clrf	3
   420     07FD  120A  118A  2D59   	ljmp	_main	;jump to C main() function
   421                           
   422                           	psect	bssBANK0
   423     0055                     __pbssBANK0:
   424     0055                     _width:
   425     0055                     	ds	2
   426     0057                     _prec:
   427     0057                     	ds	2
   428     0059                     _flags:
   429     0059                     	ds	1
   430                           
   431                           	psect	bssBANK1
   432     00C4                     __pbssBANK1:
   433     00C4                     _dbuf:
   434     00C4                     	ds	32
   435                           
   436                           	psect	dataBANK1
   437     00A0                     __pdataBANK1:
   438     00A0                     main@F1529:
   439     00A0                     	ds	36
   440                           
   441                           	psect	dataBANK2
   442     0110                     __pdataBANK2:
   443     0110                     main@F1531:
   444     0110                     	ds	36
   445                           
   446                           	psect	inittext
   447     0112                     init_fetch0:	
   448                           ;	Called with low address in FSR and high address in W
   449                           
   450     0112  087E               	movf	btemp,w
   451     0113  008A               	movwf	10
   452     0114  087F               	movf	btemp+1,w
   453     0115  0082               	movwf	2
   454     0116                     init_ram0:	
   455                           ;Called with:
   456                           ;	high address of idata address in btemp 
   457                           ;	low address of idata address in btemp+1 
   458                           ;	low address of data in FSR
   459                           ;	high address + 1 of data in btemp-1
   460                           
   461     0116  120A  118A  2112  120A  118A  	fcall	init_fetch0
   462     011B  0080               	movwf	0
   463     011C  0A84               	incf	4,f
   464     011D  0804               	movf	4,w
   465     011E  067D               	xorwf	btemp+-1,w
   466     011F  1903               	btfsc	3,2
   467     0120  3400               	retlw	0
   468     0121  0AFF               	incf	btemp+1,f
   469     0122  1903               	btfsc	3,2
   470     0123  0AFE               	incf	btemp,f
   471     0124  2916               	goto	init_ram0
   472                           
   473                           	psect	clrtext
   474     00E3                     clear_ram0:	
   475                           ;	Called with FSR containing the base address, and
   476                           ;	W with the last address+1
   477                           
   478     00E3  0064               	clrwdt	;clear the watchdog before getting into this loop
   479     00E4                     clrloop0:
   480     00E4  0180               	clrf	0	;clear RAM location pointed to by FSR
   481     00E5  0A84               	incf	4,f	;increment pointer
   482     00E6  0604               	xorwf	4,w	;XOR with final address
   483     00E7  1903               	btfsc	3,2	;have we reached the end yet?
   484     00E8  3400               	retlw	0	;all done for this memory range, return
   485     00E9  0604               	xorwf	4,w	;XOR again to restore value
   486     00EA  28E4               	goto	clrloop0	;do the next byte
   487                           
   488                           	psect	cstackBANK3
   489     0190                     __pcstackBANK3:
   490     0190                     main@s:
   491                           
   492                           ; 36 bytes @ 0x0
   493     0190                     	ds	36
   494     01B4                     main@led:
   495                           
   496                           ; 36 bytes @ 0x24
   497     01B4                     	ds	36
   498     01D8                     main@_val:
   499                           
   500                           ; 2 bytes @ 0x48
   501     01D8                     	ds	2
   502     01DA                     main@val:
   503                           
   504                           ; 2 bytes @ 0x4A
   505     01DA                     	ds	2
   506     01DC                     main@i:
   507                           
   508                           ; 2 bytes @ 0x4C
   509     01DC                     	ds	2
   510     01DE                     main@j:
   511                           
   512                           ; 2 bytes @ 0x4E
   513     01DE                     	ds	2
   514     01E0                     main@j_169:
   515                           
   516                           ; 2 bytes @ 0x50
   517     01E0                     	ds	2
   518     01E2                     main@i_166:
   519                           
   520                           ; 2 bytes @ 0x52
   521     01E2                     	ds	2
   522                           
   523                           	psect	cstackCOMMON
   524     0071                     __pcstackCOMMON:
   525     0071                     ?_putch:
   526     0071                     ??_putch:	
   527                           ; 1 bytes @ 0x0
   528                           
   529     0071                     ?_Lcd_Port:	
   530                           ; 1 bytes @ 0x0
   531                           
   532     0071                     ??_Lcd_Port:	
   533                           ; 1 bytes @ 0x0
   534                           
   535     0071                     ?_Lcd_Cmd:	
   536                           ; 1 bytes @ 0x0
   537                           
   538     0071                     ?_Lcd_Clear:	
   539                           ; 1 bytes @ 0x0
   540                           
   541     0071                     ?_Lcd_Init:	
   542                           ; 1 bytes @ 0x0
   543                           
   544     0071                     ?_Lcd_Write_Char:	
   545                           ; 1 bytes @ 0x0
   546                           
   547     0071                     ?_ADC_Init:	
   548                           ; 1 bytes @ 0x0
   549                           
   550     0071                     ??_ADC_Init:	
   551                           ; 1 bytes @ 0x0
   552                           
   553     0071                     ?_main:	
   554                           ; 1 bytes @ 0x0
   555                           
   556     0071                     ?_fputc:	
   557                           ; 1 bytes @ 0x0
   558                           
   559     0071                     ?_ADC_Read:	
   560                           ; 2 bytes @ 0x0
   561                           
   562     0071                     ?___awdiv:	
   563                           ; 2 bytes @ 0x0
   564                           
   565     0071                     ?___awmod:	
   566                           ; 2 bytes @ 0x0
   567                           
   568     0071                     Lcd_Port@a:	
   569                           ; 2 bytes @ 0x0
   570                           
   571     0071                     putch@c:	
   572                           ; 1 bytes @ 0x0
   573                           
   574     0071                     ADC_Read@ANC:	
   575                           ; 1 bytes @ 0x0
   576                           
   577     0071                     ___awdiv@divisor:	
   578                           ; 2 bytes @ 0x0
   579                           
   580     0071                     ___awmod@divisor:	
   581                           ; 2 bytes @ 0x0
   582                           
   583     0071                     fputc@c:	
   584                           ; 2 bytes @ 0x0
   585                           
   586                           
   587                           ; 2 bytes @ 0x0
   588     0071                     	ds	1
   589     0072                     ??_Lcd_Cmd:
   590     0072                     ??_Lcd_Write_Char:	
   591                           ; 1 bytes @ 0x1
   592                           
   593                           
   594                           ; 1 bytes @ 0x1
   595     0072                     	ds	1
   596     0073                     ??_ADC_Read:
   597     0073                     Lcd_Write_Char@temp:	
   598                           ; 1 bytes @ 0x2
   599                           
   600     0073                     fputc@fp:	
   601                           ; 1 bytes @ 0x2
   602                           
   603     0073                     ___awdiv@dividend:	
   604                           ; 1 bytes @ 0x2
   605                           
   606     0073                     ___awmod@dividend:	
   607                           ; 2 bytes @ 0x2
   608                           
   609                           
   610                           ; 2 bytes @ 0x2
   611     0073                     	ds	1
   612     0074                     ??_fputc:
   613     0074                     Lcd_Cmd@a:	
   614                           ; 1 bytes @ 0x3
   615                           
   616     0074                     Lcd_Write_Char@y:	
   617                           ; 1 bytes @ 0x3
   618                           
   619                           
   620                           ; 1 bytes @ 0x3
   621     0074                     	ds	1
   622     0075                     ??_Lcd_Clear:
   623     0075                     ?_Lcd_Set_Cursor:	
   624                           ; 1 bytes @ 0x4
   625                           
   626     0075                     ??_Lcd_Init:	
   627                           ; 1 bytes @ 0x4
   628                           
   629     0075                     ??___awdiv:	
   630                           ; 1 bytes @ 0x4
   631                           
   632     0075                     ??___awmod:	
   633                           ; 1 bytes @ 0x4
   634                           
   635     0075                     Lcd_Set_Cursor@b:	
   636                           ; 1 bytes @ 0x4
   637                           
   638     0075                     Lcd_Write_Char@a:	
   639                           ; 1 bytes @ 0x4
   640                           
   641     0075                     ___awdiv@counter:	
   642                           ; 1 bytes @ 0x4
   643                           
   644     0075                     ___awmod@counter:	
   645                           ; 1 bytes @ 0x4
   646                           
   647                           
   648                           ; 1 bytes @ 0x4
   649     0075                     	ds	1
   650     0076                     ??_Lcd_Set_Cursor:
   651     0076                     ?_Lcd_Write_String:	
   652                           ; 1 bytes @ 0x5
   653                           
   654     0076                     ___awdiv@sign:	
   655                           ; 1 bytes @ 0x5
   656                           
   657     0076                     ___awmod@sign:	
   658                           ; 1 bytes @ 0x5
   659                           
   660     0076                     Lcd_Write_String@a:	
   661                           ; 1 bytes @ 0x5
   662                           
   663                           
   664                           ; 2 bytes @ 0x5
   665     0076                     	ds	1
   666     0077                     ?_abs:
   667     0077                     Lcd_Set_Cursor@a:	
   668                           ; 2 bytes @ 0x6
   669                           
   670     0077                     ___awdiv@quotient:	
   671                           ; 1 bytes @ 0x6
   672                           
   673     0077                     abs@a:	
   674                           ; 2 bytes @ 0x6
   675                           
   676                           
   677                           ; 2 bytes @ 0x6
   678     0077                     	ds	1
   679     0078                     ??_Lcd_Write_String:
   680     0078                     Lcd_Set_Cursor@z:	
   681                           ; 1 bytes @ 0x7
   682                           
   683                           
   684                           ; 1 bytes @ 0x7
   685     0078                     	ds	1
   686     0079                     ??_abs:
   687     0079                     Lcd_Set_Cursor@y:	
   688                           ; 1 bytes @ 0x8
   689                           
   690                           
   691                           ; 1 bytes @ 0x8
   692     0079                     	ds	1
   693     007A                     Lcd_Set_Cursor@temp:
   694                           
   695                           ; 1 bytes @ 0x9
   696     007A                     	ds	1
   697     007B                     ?_vfpfcnvrt:
   698     007B                     vfpfcnvrt@fmt:	
   699                           ; 1 bytes @ 0xA
   700                           
   701     007B                     Lcd_Write_String@i:	
   702                           ; 1 bytes @ 0xA
   703                           
   704                           
   705                           ; 2 bytes @ 0xA
   706     007B                     	ds	1
   707     007C                     vfpfcnvrt@ap:
   708                           
   709                           ; 1 bytes @ 0xB
   710     007C                     	ds	1
   711     007D                     ??_sprintf:
   712     007D                     ??_vfprintf:	
   713                           ; 1 bytes @ 0xC
   714                           
   715                           
   716                           ; 1 bytes @ 0xC
   717     007D                     	ds	1
   718     007E                     ??_Lcd_Write_Int:
   719                           
   720                           	psect	cstackBANK0
   721     0020                     __pcstackBANK0:	
   722                           ; 1 bytes @ 0xD
   723                           
   724     0020                     ??_vfpfcnvrt:
   725                           
   726                           ; 1 bytes @ 0x0
   727     0020                     	ds	2
   728     0022                     vfpfcnvrt@done:
   729                           
   730                           ; 1 bytes @ 0x2
   731     0022                     	ds	1
   732     0023                     vfpfcnvrt@fp:
   733                           
   734                           ; 1 bytes @ 0x3
   735     0023                     	ds	1
   736     0024                     vfpfcnvrt@cp:
   737                           
   738                           ; 1 bytes @ 0x4
   739     0024                     	ds	1
   740     0025                     vfpfcnvrt@convarg:
   741                           
   742                           ; 4 bytes @ 0x5
   743     0025                     	ds	4
   744     0029                     vfpfcnvrt@c:
   745                           
   746                           ; 1 bytes @ 0x9
   747     0029                     	ds	1
   748     002A                     ?_vfprintf:
   749     002A                     vfprintf@fmt:	
   750                           ; 2 bytes @ 0xA
   751                           
   752                           
   753                           ; 1 bytes @ 0xA
   754     002A                     	ds	1
   755     002B                     vfprintf@ap:
   756                           
   757                           ; 1 bytes @ 0xB
   758     002B                     	ds	1
   759     002C                     vfprintf@fp:
   760                           
   761                           ; 1 bytes @ 0xC
   762     002C                     	ds	1
   763     002D                     vfprintf@cfmt:
   764                           
   765                           ; 1 bytes @ 0xD
   766     002D                     	ds	1
   767     002E                     ?_sprintf:
   768     002E                     sprintf@fmt:	
   769                           ; 2 bytes @ 0xE
   770                           
   771                           
   772                           ; 1 bytes @ 0xE
   773     002E                     	ds	3
   774     0031                     sprintf@ap:
   775                           
   776                           ; 1 bytes @ 0x11
   777     0031                     	ds	1
   778     0032                     sprintf@s:
   779                           
   780                           ; 1 bytes @ 0x12
   781     0032                     	ds	1
   782     0033                     sprintf@f:
   783                           
   784                           ; 11 bytes @ 0x13
   785     0033                     	ds	11
   786     003E                     ?_Lcd_Write_Int:
   787     003E                     Lcd_Write_Int@a:	
   788                           ; 1 bytes @ 0x1E
   789                           
   790                           
   791                           ; 2 bytes @ 0x1E
   792     003E                     	ds	2
   793     0040                     Lcd_Write_Int@str:
   794                           
   795                           ; 16 bytes @ 0x20
   796     0040                     	ds	16
   797     0050                     ??_main:
   798                           
   799                           ; 1 bytes @ 0x30
   800     0050                     	ds	5
   801                           
   802                           	psect	maintext
   803     0559                     __pmaintext:	
   804 ;;
   805 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
   806 ;;
   807 ;; *************** function _main *****************
   808 ;; Defined at:
   809 ;;		line 22 in file "main.c"
   810 ;; Parameters:    Size  Location     Type
   811 ;;		None
   812 ;; Auto vars:     Size  Location     Type
   813 ;;  j               2   80[BANK3 ] int 
   814 ;;  j               2   78[BANK3 ] int 
   815 ;;  val             2   74[BANK3 ] int 
   816 ;;  i               2   82[BANK3 ] int 
   817 ;;  i               2   76[BANK3 ] int 
   818 ;;  _val            2   72[BANK3 ] int 
   819 ;;  led            36   36[BANK3 ] struct _Pin[9]
   820 ;;  s              36    0[BANK3 ] struct _Pin[9]
   821 ;;  a               2    0        unsigned int 
   822 ;; Return value:  Size  Location     Type
   823 ;;                  1    wreg      void 
   824 ;; Registers used:
   825 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   826 ;; Tracked objects:
   827 ;;		On entry : B00/0
   828 ;;		On exit  : 0/0
   829 ;;		Unchanged: 0/0
   830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   831 ;;      Params:         0       0       0       0       0
   832 ;;      Locals:         0       0       0      84       0
   833 ;;      Temps:          0       5       0       0       0
   834 ;;      Totals:         0       5       0      84       0
   835 ;;Total ram usage:       89 bytes
   836 ;; Hardware stack levels required when called: 6
   837 ;; This function calls:
   838 ;;		_ADC_Init
   839 ;;		_ADC_Read
   840 ;;		_Lcd_Clear
   841 ;;		_Lcd_Init
   842 ;;		_Lcd_Set_Cursor
   843 ;;		_Lcd_Write_Char
   844 ;;		_Lcd_Write_Int
   845 ;;		_Lcd_Write_String
   846 ;; This function is called by:
   847 ;;		Startup code after reset
   848 ;; This function uses a non-reentrant model
   849 ;;
   850                           
   851     0559                     _main:	
   852                           ;psect for function _main
   853                           
   854     0559                     l1475:	
   855                           ;incstack = 0
   856                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   857                           
   858                           
   859                           ;main.c: 23:     unsigned int a;;main.c: 25:     Lcd_Init();
   860     0559  120A  118A  23A7  120A  118A  	fcall	_Lcd_Init
   861                           
   862                           ;main.c: 26:     Lcd_Clear();
   863     055E  120A  118A  20F4  120A  118A  	fcall	_Lcd_Clear
   864                           
   865                           ;main.c: 27:     Lcd_Set_Cursor(1,1);
   866     0563  01F5               	clrf	Lcd_Set_Cursor@b
   867     0564  0AF5               	incf	Lcd_Set_Cursor@b,f
   868     0565  3001               	movlw	1
   869     0566  120A  118A  22B2  120A  118A  	fcall	_Lcd_Set_Cursor
   870     056B                     l1477:
   871                           
   872                           ;main.c: 28:     Lcd_Write_String("Welcome to Light");
   873     056B  3001               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   874     056C  00F6               	movwf	Lcd_Write_String@a
   875     056D  3080               	movlw	128
   876     056E  00F7               	movwf	Lcd_Write_String@a+1
   877     056F  120A  118A  2270  120A  118A  	fcall	_Lcd_Write_String
   878     0574                     l1479:
   879                           
   880                           ;main.c: 29:     Lcd_Set_Cursor(2,1);
   881     0574  01F5               	clrf	Lcd_Set_Cursor@b
   882     0575  0AF5               	incf	Lcd_Set_Cursor@b,f
   883     0576  3002               	movlw	2
   884     0577  120A  118A  22B2  120A  118A  	fcall	_Lcd_Set_Cursor
   885                           
   886                           ;main.c: 30:     Lcd_Write_String("Powered by SLTC");
   887     057C  3012               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   888     057D  00F6               	movwf	Lcd_Write_String@a
   889     057E  3080               	movlw	128
   890     057F  00F7               	movwf	Lcd_Write_String@a+1
   891     0580  120A  118A  2270  120A  118A  	fcall	_Lcd_Write_String
   892     0585                     l1481:
   893                           
   894                           ;main.c: 32:     ADC_Init();
   895     0585  120A  118A  20EB  120A  118A  	fcall	_ADC_Init
   896     058A                     l1483:
   897                           
   898                           ;main.c: 34:     TRISA = 0xff;
   899     058A  30FF               	movlw	255
   900     058B  1683               	bsf	3,5	;RP0=1, select bank1
   901     058C  1303               	bcf	3,6	;RP1=0, select bank1
   902     058D  0085               	movwf	5	;volatile
   903     058E                     l1485:
   904                           
   905                           ;main.c: 35:     TRISB = 0x00;
   906     058E  0186               	clrf	6	;volatile
   907     058F                     l1487:
   908                           
   909                           ;main.c: 36:     TRISC0 = 0;
   910     058F  1007               	bcf	7,0	;volatile
   911     0590                     l1489:
   912                           
   913                           ;main.c: 38:     PORTB = 0x00;
   914     0590  1283               	bcf	3,5	;RP0=0, select bank0
   915     0591  1303               	bcf	3,6	;RP1=0, select bank0
   916     0592  0186               	clrf	6	;volatile
   917     0593                     l1491:
   918                           
   919                           ;main.c: 39:     RC0 = 0;
   920     0593  1007               	bcf	7,0	;volatile
   921     0594                     l1493:
   922                           
   923                           ;main.c: 41:     Pin s[9] = {
   924     0594  3090               	movlw	main@s& (0+255)
   925     0595  0084               	movwf	4
   926     0596  30A0               	movlw	low main@F1529
   927     0597  00D0               	movwf	??_main
   928     0598  0804               	movf	4,w
   929     0599  00D1               	movwf	??_main+1
   930     059A  3024               	movlw	36
   931     059B  00D2               	movwf	??_main+2
   932     059C                     u1200:
   933     059C  0850               	movf	??_main,w
   934     059D  0084               	movwf	4
   935     059E  1383               	bcf	3,7	;select IRP bank1
   936     059F  0800               	movf	0,w
   937     05A0  00D3               	movwf	??_main+3
   938     05A1  0AD0               	incf	??_main,f
   939     05A2  0851               	movf	??_main+1,w
   940     05A3  0084               	movwf	4
   941     05A4  1783               	bsf	3,7	;select IRP bank3
   942     05A5  0853               	movf	??_main+3,w
   943     05A6  0080               	movwf	0
   944     05A7  0AD1               	incf	??_main+1,f
   945     05A8  0BD2               	decfsz	??_main+2,f
   946     05A9  2D9C               	goto	u1200
   947     05AA                     l1495:
   948                           
   949                           ;main.c: 53:     Pin led[9] = {
   950     05AA  30B4               	movlw	main@led& (0+255)
   951     05AB  0084               	movwf	4
   952     05AC  3010               	movlw	low main@F1531
   953     05AD  00D0               	movwf	??_main
   954     05AE  0804               	movf	4,w
   955     05AF  00D1               	movwf	??_main+1
   956     05B0  3024               	movlw	36
   957     05B1  00D2               	movwf	??_main+2
   958     05B2                     u1210:
   959     05B2  0850               	movf	??_main,w
   960     05B3  0084               	movwf	4
   961     05B4  1783               	bsf	3,7	;select IRP bank2
   962     05B5  0800               	movf	0,w
   963     05B6  00D3               	movwf	??_main+3
   964     05B7  0AD0               	incf	??_main,f
   965     05B8  0851               	movf	??_main+1,w
   966     05B9  0084               	movwf	4
   967     05BA  0853               	movf	??_main+3,w
   968     05BB  0080               	movwf	0
   969     05BC  0AD1               	incf	??_main+1,f
   970     05BD  0BD2               	decfsz	??_main+2,f
   971     05BE  2DB2               	goto	u1210
   972     05BF                     l1497:
   973                           
   974                           ;main.c: 72:     {;main.c: 73:         Lcd_Clear();
   975     05BF  120A  118A  20F4  120A  118A  	fcall	_Lcd_Clear
   976     05C4                     l1499:
   977                           
   978                           ;main.c: 74:         Lcd_Set_Cursor(1,1);
   979     05C4  01F5               	clrf	Lcd_Set_Cursor@b
   980     05C5  0AF5               	incf	Lcd_Set_Cursor@b,f
   981     05C6  3001               	movlw	1
   982     05C7  120A  118A  22B2  120A  118A  	fcall	_Lcd_Set_Cursor
   983     05CC                     l1501:
   984                           
   985                           ;main.c: 75:         Lcd_Write_String("Hello...");
   986     05CC  3022               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   987     05CD  00F6               	movwf	Lcd_Write_String@a
   988     05CE  3080               	movlw	128
   989     05CF  00F7               	movwf	Lcd_Write_String@a+1
   990     05D0  120A  118A  2270  120A  118A  	fcall	_Lcd_Write_String
   991     05D5                     l1503:
   992                           
   993                           ;main.c: 76:         int _val = ADC_Read(2);
   994     05D5  3002               	movlw	2
   995     05D6  00F1               	movwf	ADC_Read@ANC
   996     05D7  3000               	movlw	0
   997     05D8  00F2               	movwf	ADC_Read@ANC+1
   998     05D9  120A  118A  2236  120A  118A  	fcall	_ADC_Read
   999     05DE  0872               	movf	?_ADC_Read+1,w
  1000     05DF  1683               	bsf	3,5	;RP0=1, select bank3
  1001     05E0  1703               	bsf	3,6	;RP1=1, select bank3
  1002     05E1  00D9               	movwf	(main@_val+1)^(0+384)
  1003     05E2  0871               	movf	?_ADC_Read,w
  1004     05E3  00D8               	movwf	main@_val^(0+384)
  1005     05E4                     l1505:
  1006                           
  1007                           ;main.c: 77:         Lcd_Write_Int(_val);
  1008     05E4  0859               	movf	(main@_val+1)^(0+384),w
  1009     05E5  1283               	bcf	3,5	;RP0=0, select bank0
  1010     05E6  1303               	bcf	3,6	;RP1=0, select bank0
  1011     05E7  00BF               	movwf	Lcd_Write_Int@a+1
  1012     05E8  1683               	bsf	3,5	;RP0=1, select bank3
  1013     05E9  1703               	bsf	3,6	;RP1=1, select bank3
  1014     05EA  0858               	movf	main@_val^(0+384),w
  1015     05EB  1283               	bcf	3,5	;RP0=0, select bank0
  1016     05EC  1303               	bcf	3,6	;RP1=0, select bank0
  1017     05ED  00BE               	movwf	Lcd_Write_Int@a
  1018     05EE  120A  118A  2125  120A  118A  	fcall	_Lcd_Write_Int
  1019     05F3                     l1507:
  1020                           
  1021                           ;main.c: 79:         Lcd_Set_Cursor(2,1);
  1022     05F3  01F5               	clrf	Lcd_Set_Cursor@b
  1023     05F4  0AF5               	incf	Lcd_Set_Cursor@b,f
  1024     05F5  3002               	movlw	2
  1025     05F6  120A  118A  22B2  120A  118A  	fcall	_Lcd_Set_Cursor
  1026     05FB                     l1509:
  1027                           
  1028                           ;main.c: 80:         for(int i = 0; i < 9; i++) {
  1029     05FB  1683               	bsf	3,5	;RP0=1, select bank3
  1030     05FC  1703               	bsf	3,6	;RP1=1, select bank3
  1031     05FD  01DC               	clrf	main@i^(0+384)
  1032     05FE  01DD               	clrf	(main@i+1)^(0+384)
  1033     05FF                     l1515:
  1034                           
  1035                           ;main.c: 81:             *led[i].port = 0x00;
  1036     05FF  1683               	bsf	3,5	;RP0=1, select bank3
  1037     0600  1703               	bsf	3,6	;RP1=1, select bank3
  1038     0601  085C               	movf	main@i^(0+384),w
  1039     0602  1283               	bcf	3,5	;RP0=0, select bank0
  1040     0603  1303               	bcf	3,6	;RP1=0, select bank0
  1041     0604  00D0               	movwf	??_main
  1042     0605  3001               	movlw	1
  1043     0606                     u1225:
  1044     0606  1003               	clrc
  1045     0607  0DD0               	rlf	??_main,f
  1046     0608  3EFF               	addlw	-1
  1047     0609  1D03               	skipz
  1048     060A  2E06               	goto	u1225
  1049     060B  1003               	clrc
  1050     060C  0D50               	rlf	??_main,w
  1051     060D  3EB4               	addlw	(low (main@led| (0+256)))& (0+255)
  1052     060E  0084               	movwf	4
  1053     060F  1783               	bsf	3,7	;select IRP bank3
  1054     0610  0800               	movf	0,w
  1055     0611  00D1               	movwf	??_main+1
  1056     0612  0A84               	incf	4,f
  1057     0613  0800               	movf	0,w
  1058     0614  00D2               	movwf	??_main+2
  1059     0615  0851               	movf	??_main+1,w
  1060     0616  0084               	movwf	4
  1061     0617  1783               	bsf	3,7
  1062     0618  1C52               	btfss	??_main+2,0
  1063     0619  1383               	bcf	3,7
  1064     061A  0180               	clrf	0
  1065     061B                     l1517:
  1066                           
  1067                           ;main.c: 82:         }
  1068     061B  3001               	movlw	1
  1069     061C  1683               	bsf	3,5	;RP0=1, select bank3
  1070     061D  1703               	bsf	3,6	;RP1=1, select bank3
  1071     061E  07DC               	addwf	main@i^(0+384),f
  1072     061F  1803               	skipnc
  1073     0620  0ADD               	incf	(main@i+1)^(0+384),f
  1074     0621  3000               	movlw	0
  1075     0622  07DD               	addwf	(main@i+1)^(0+384),f
  1076     0623                     l1519:
  1077     0623  085D               	movf	(main@i+1)^(0+384),w
  1078     0624  3A80               	xorlw	128
  1079     0625  00FF               	movwf	btemp+1
  1080     0626  3080               	movlw	128
  1081     0627  027F               	subwf	btemp+1,w
  1082     0628  1D03               	skipz
  1083     0629  2E2C               	goto	u1235
  1084     062A  3009               	movlw	9
  1085     062B  025C               	subwf	main@i^(0+384),w
  1086     062C                     u1235:
  1087     062C  1C03               	skipc
  1088     062D  2E2F               	goto	u1231
  1089     062E  2E30               	goto	u1230
  1090     062F                     u1231:
  1091     062F  2DFF               	goto	l1515
  1092     0630                     u1230:
  1093     0630                     l1521:
  1094                           
  1095                           ;main.c: 84:         for(int i = 0; i < 9; i++) {
  1096     0630  1683               	bsf	3,5	;RP0=1, select bank3
  1097     0631  1703               	bsf	3,6	;RP1=1, select bank3
  1098     0632  01E2               	clrf	main@i_166^(0+384)
  1099     0633  01E3               	clrf	(main@i_166+1)^(0+384)
  1100     0634                     l1527:
  1101                           
  1102                           ;main.c: 85:             int val = ADC_Read(i);
  1103     0634  1683               	bsf	3,5	;RP0=1, select bank3
  1104     0635  1703               	bsf	3,6	;RP1=1, select bank3
  1105     0636  0863               	movf	(main@i_166+1)^(0+384),w
  1106     0637  00F2               	movwf	ADC_Read@ANC+1
  1107     0638  0862               	movf	main@i_166^(0+384),w
  1108     0639  00F1               	movwf	ADC_Read@ANC
  1109     063A  120A  118A  2236  120A  118A  	fcall	_ADC_Read
  1110     063F  0872               	movf	?_ADC_Read+1,w
  1111     0640  1683               	bsf	3,5	;RP0=1, select bank3
  1112     0641  1703               	bsf	3,6	;RP1=1, select bank3
  1113     0642  00DB               	movwf	(main@val+1)^(0+384)
  1114     0643  0871               	movf	?_ADC_Read,w
  1115     0644  00DA               	movwf	main@val^(0+384)
  1116     0645                     l1529:
  1117                           
  1118                           ;main.c: 87:             Lcd_Clear();
  1119     0645  120A  118A  20F4  120A  118A  	fcall	_Lcd_Clear
  1120     064A                     l1531:
  1121                           
  1122                           ;main.c: 88:             Lcd_Set_Cursor(1,1);
  1123     064A  01F5               	clrf	Lcd_Set_Cursor@b
  1124     064B  0AF5               	incf	Lcd_Set_Cursor@b,f
  1125     064C  3001               	movlw	1
  1126     064D  120A  118A  22B2  120A  118A  	fcall	_Lcd_Set_Cursor
  1127     0652                     l1533:
  1128                           
  1129                           ;main.c: 89:             Lcd_Write_Int(i);
  1130     0652  1683               	bsf	3,5	;RP0=1, select bank3
  1131     0653  1703               	bsf	3,6	;RP1=1, select bank3
  1132     0654  0863               	movf	(main@i_166+1)^(0+384),w
  1133     0655  1283               	bcf	3,5	;RP0=0, select bank0
  1134     0656  1303               	bcf	3,6	;RP1=0, select bank0
  1135     0657  00BF               	movwf	Lcd_Write_Int@a+1
  1136     0658  1683               	bsf	3,5	;RP0=1, select bank3
  1137     0659  1703               	bsf	3,6	;RP1=1, select bank3
  1138     065A  0862               	movf	main@i_166^(0+384),w
  1139     065B  1283               	bcf	3,5	;RP0=0, select bank0
  1140     065C  1303               	bcf	3,6	;RP1=0, select bank0
  1141     065D  00BE               	movwf	Lcd_Write_Int@a
  1142     065E  120A  118A  2125  120A  118A  	fcall	_Lcd_Write_Int
  1143     0663                     l1535:
  1144                           
  1145                           ;main.c: 90:             Lcd_Write_Char(' ');
  1146     0663  3020               	movlw	32
  1147     0664  120A  118A  2201  120A  118A  	fcall	_Lcd_Write_Char
  1148     0669                     l1537:
  1149                           
  1150                           ;main.c: 91:             Lcd_Write_Int(val);
  1151     0669  1683               	bsf	3,5	;RP0=1, select bank3
  1152     066A  1703               	bsf	3,6	;RP1=1, select bank3
  1153     066B  085B               	movf	(main@val+1)^(0+384),w
  1154     066C  1283               	bcf	3,5	;RP0=0, select bank0
  1155     066D  1303               	bcf	3,6	;RP1=0, select bank0
  1156     066E  00BF               	movwf	Lcd_Write_Int@a+1
  1157     066F  1683               	bsf	3,5	;RP0=1, select bank3
  1158     0670  1703               	bsf	3,6	;RP1=1, select bank3
  1159     0671  085A               	movf	main@val^(0+384),w
  1160     0672  1283               	bcf	3,5	;RP0=0, select bank0
  1161     0673  1303               	bcf	3,6	;RP1=0, select bank0
  1162     0674  00BE               	movwf	Lcd_Write_Int@a
  1163     0675  120A  118A  2125  120A  118A  	fcall	_Lcd_Write_Int
  1164     067A                     l1539:
  1165                           
  1166                           ;main.c: 93:             Lcd_Set_Cursor(2,1);
  1167     067A  01F5               	clrf	Lcd_Set_Cursor@b
  1168     067B  0AF5               	incf	Lcd_Set_Cursor@b,f
  1169     067C  3002               	movlw	2
  1170     067D  120A  118A  22B2  120A  118A  	fcall	_Lcd_Set_Cursor
  1171     0682                     l1541:
  1172                           
  1173                           ;main.c: 94:             if(val > 512) {
  1174     0682  1683               	bsf	3,5	;RP0=1, select bank3
  1175     0683  1703               	bsf	3,6	;RP1=1, select bank3
  1176     0684  085B               	movf	(main@val+1)^(0+384),w
  1177     0685  3A80               	xorlw	128
  1178     0686  00FF               	movwf	btemp+1
  1179     0687  3082               	movlw	130
  1180     0688  027F               	subwf	btemp+1,w
  1181     0689  1D03               	skipz
  1182     068A  2E8D               	goto	u1245
  1183     068B  3001               	movlw	1
  1184     068C  025A               	subwf	main@val^(0+384),w
  1185     068D                     u1245:
  1186     068D  1C03               	skipc
  1187     068E  2E90               	goto	u1241
  1188     068F  2E91               	goto	u1240
  1189     0690                     u1241:
  1190     0690  2FAC               	goto	l1571
  1191     0691                     u1240:
  1192     0691                     l1543:
  1193                           
  1194                           ;main.c: 95:                 for(int j = i; (j < i + 2) && j < 9; j++) {
  1195     0691  1683               	bsf	3,5	;RP0=1, select bank3
  1196     0692  1703               	bsf	3,6	;RP1=1, select bank3
  1197     0693  0863               	movf	(main@i_166+1)^(0+384),w
  1198     0694  00DF               	movwf	(main@j+1)^(0+384)
  1199     0695  0862               	movf	main@i_166^(0+384),w
  1200     0696  00DE               	movwf	main@j^(0+384)
  1201     0697  2EF2               	goto	l1553
  1202     0698                     l1545:
  1203                           
  1204                           ;main.c: 96:                     *led[j].port |= (1 << led[j].pin);
  1205     0698  3001               	movlw	1
  1206     0699  1283               	bcf	3,5	;RP0=0, select bank0
  1207     069A  1303               	bcf	3,6	;RP1=0, select bank0
  1208     069B  00D0               	movwf	??_main
  1209     069C  1683               	bsf	3,5	;RP0=1, select bank3
  1210     069D  1703               	bsf	3,6	;RP1=1, select bank3
  1211     069E  085E               	movf	main@j^(0+384),w
  1212     069F  1283               	bcf	3,5	;RP0=0, select bank0
  1213     06A0  1303               	bcf	3,6	;RP1=0, select bank0
  1214     06A1  00D1               	movwf	??_main+1
  1215     06A2  3001               	movlw	1
  1216     06A3                     u1255:
  1217     06A3  1003               	clrc
  1218     06A4  0DD1               	rlf	??_main+1,f
  1219     06A5  3EFF               	addlw	-1
  1220     06A6  1D03               	skipz
  1221     06A7  2EA3               	goto	u1255
  1222     06A8  1003               	clrc
  1223     06A9  0D51               	rlf	??_main+1,w
  1224     06AA  3E02               	addlw	2
  1225     06AB  3EB4               	addlw	(low (main@led| (0+256)))& (0+255)
  1226     06AC  0084               	movwf	4
  1227     06AD  1783               	bsf	3,7	;select IRP bank3
  1228     06AE  0A00               	incf	0,w
  1229     06AF  2EB2               	goto	u1264
  1230     06B0                     u1265:
  1231     06B0  1003               	clrc
  1232     06B1  0DD0               	rlf	??_main,f
  1233     06B2                     u1264:
  1234     06B2  3EFF               	addlw	-1
  1235     06B3  1D03               	skipz
  1236     06B4  2EB0               	goto	u1265
  1237     06B5  0850               	movf	??_main,w
  1238     06B6  00FF               	movwf	btemp+1
  1239     06B7  1683               	bsf	3,5	;RP0=1, select bank3
  1240     06B8  1703               	bsf	3,6	;RP1=1, select bank3
  1241     06B9  085E               	movf	main@j^(0+384),w
  1242     06BA  1283               	bcf	3,5	;RP0=0, select bank0
  1243     06BB  1303               	bcf	3,6	;RP1=0, select bank0
  1244     06BC  00D2               	movwf	??_main+2
  1245     06BD  3001               	movlw	1
  1246     06BE                     u1275:
  1247     06BE  1003               	clrc
  1248     06BF  0DD2               	rlf	??_main+2,f
  1249     06C0  3EFF               	addlw	-1
  1250     06C1  1D03               	skipz
  1251     06C2  2EBE               	goto	u1275
  1252     06C3  1003               	clrc
  1253     06C4  0D52               	rlf	??_main+2,w
  1254     06C5  3EB4               	addlw	(low (main@led| (0+256)))& (0+255)
  1255     06C6  0084               	movwf	4
  1256     06C7  0800               	movf	0,w
  1257     06C8  00D3               	movwf	??_main+3
  1258     06C9  0A84               	incf	4,f
  1259     06CA  0800               	movf	0,w
  1260     06CB  00D4               	movwf	??_main+4
  1261     06CC  0853               	movf	??_main+3,w
  1262     06CD  0084               	movwf	4
  1263     06CE  1783               	bsf	3,7
  1264     06CF  1C54               	btfss	??_main+4,0
  1265     06D0  1383               	bcf	3,7
  1266     06D1  087F               	movf	btemp+1,w
  1267     06D2  0480               	iorwf	0,f
  1268     06D3                     l1547:
  1269                           
  1270                           ;main.c: 97:                     Lcd_Write_Int(j);
  1271     06D3  1683               	bsf	3,5	;RP0=1, select bank3
  1272     06D4  1703               	bsf	3,6	;RP1=1, select bank3
  1273     06D5  085F               	movf	(main@j+1)^(0+384),w
  1274     06D6  1283               	bcf	3,5	;RP0=0, select bank0
  1275     06D7  1303               	bcf	3,6	;RP1=0, select bank0
  1276     06D8  00BF               	movwf	Lcd_Write_Int@a+1
  1277     06D9  1683               	bsf	3,5	;RP0=1, select bank3
  1278     06DA  1703               	bsf	3,6	;RP1=1, select bank3
  1279     06DB  085E               	movf	main@j^(0+384),w
  1280     06DC  1283               	bcf	3,5	;RP0=0, select bank0
  1281     06DD  1303               	bcf	3,6	;RP1=0, select bank0
  1282     06DE  00BE               	movwf	Lcd_Write_Int@a
  1283     06DF  120A  118A  2125  120A  118A  	fcall	_Lcd_Write_Int
  1284     06E4                     l1549:
  1285                           
  1286                           ;main.c: 98:                     Lcd_Write_Char(' ');
  1287     06E4  3020               	movlw	32
  1288     06E5  120A  118A  2201  120A  118A  	fcall	_Lcd_Write_Char
  1289     06EA                     l1551:
  1290                           
  1291                           ;main.c: 99:                 }
  1292     06EA  3001               	movlw	1
  1293     06EB  1683               	bsf	3,5	;RP0=1, select bank3
  1294     06EC  1703               	bsf	3,6	;RP1=1, select bank3
  1295     06ED  07DE               	addwf	main@j^(0+384),f
  1296     06EE  1803               	skipnc
  1297     06EF  0ADF               	incf	(main@j+1)^(0+384),f
  1298     06F0  3000               	movlw	0
  1299     06F1  07DF               	addwf	(main@j+1)^(0+384),f
  1300     06F2                     l1553:
  1301     06F2  0862               	movf	main@i_166^(0+384),w
  1302     06F3  3E02               	addlw	2
  1303     06F4  1283               	bcf	3,5	;RP0=0, select bank0
  1304     06F5  1303               	bcf	3,6	;RP1=0, select bank0
  1305     06F6  00D0               	movwf	??_main
  1306     06F7  1683               	bsf	3,5	;RP0=1, select bank3
  1307     06F8  1703               	bsf	3,6	;RP1=1, select bank3
  1308     06F9  0863               	movf	(main@i_166+1)^(0+384),w
  1309     06FA  1803               	skipnc
  1310     06FB  3E01               	addlw	1
  1311     06FC  3E00               	addlw	0
  1312     06FD  1283               	bcf	3,5	;RP0=0, select bank0
  1313     06FE  1303               	bcf	3,6	;RP1=0, select bank0
  1314     06FF  00D1               	movwf	??_main+1
  1315     0700  1683               	bsf	3,5	;RP0=1, select bank3
  1316     0701  1703               	bsf	3,6	;RP1=1, select bank3
  1317     0702  085F               	movf	(main@j+1)^(0+384),w
  1318     0703  3A80               	xorlw	128
  1319     0704  1283               	bcf	3,5	;RP0=0, select bank0
  1320     0705  1303               	bcf	3,6	;RP1=0, select bank0
  1321     0706  00D2               	movwf	??_main+2
  1322     0707  0851               	movf	??_main+1,w
  1323     0708  3A80               	xorlw	128
  1324     0709  0252               	subwf	??_main+2,w
  1325     070A  1D03               	skipz
  1326     070B  2F10               	goto	u1285
  1327     070C  0850               	movf	??_main,w
  1328     070D  1683               	bsf	3,5	;RP0=1, select bank3
  1329     070E  1703               	bsf	3,6	;RP1=1, select bank3
  1330     070F  025E               	subwf	main@j^(0+384),w
  1331     0710                     u1285:
  1332     0710  1803               	skipnc
  1333     0711  2F13               	goto	u1281
  1334     0712  2F14               	goto	u1280
  1335     0713                     u1281:
  1336     0713  2F23               	goto	l1557
  1337     0714                     u1280:
  1338     0714                     l1555:
  1339     0714  1683               	bsf	3,5	;RP0=1, select bank3
  1340     0715  1703               	bsf	3,6	;RP1=1, select bank3
  1341     0716  085F               	movf	(main@j+1)^(0+384),w
  1342     0717  3A80               	xorlw	128
  1343     0718  00FF               	movwf	btemp+1
  1344     0719  3080               	movlw	128
  1345     071A  027F               	subwf	btemp+1,w
  1346     071B  1D03               	skipz
  1347     071C  2F1F               	goto	u1295
  1348     071D  3009               	movlw	9
  1349     071E  025E               	subwf	main@j^(0+384),w
  1350     071F                     u1295:
  1351     071F  1C03               	skipc
  1352     0720  2F22               	goto	u1291
  1353     0721  2F23               	goto	u1290
  1354     0722                     u1291:
  1355     0722  2E98               	goto	l1545
  1356     0723                     u1290:
  1357     0723                     l1557:
  1358                           
  1359                           ;main.c: 100:                 for(int j = i; (j < i - 2) && j >= 0; j--) {
  1360     0723  1683               	bsf	3,5	;RP0=1, select bank3
  1361     0724  1703               	bsf	3,6	;RP1=1, select bank3
  1362     0725  0863               	movf	(main@i_166+1)^(0+384),w
  1363     0726  00E1               	movwf	(main@j_169+1)^(0+384)
  1364     0727  0862               	movf	main@i_166^(0+384),w
  1365     0728  00E0               	movwf	main@j_169^(0+384)
  1366     0729  2F84               	goto	l1567
  1367     072A                     l1559:
  1368                           
  1369                           ;main.c: 101:                     *led[j].port |= (1 << led[j].pin);
  1370     072A  3001               	movlw	1
  1371     072B  1283               	bcf	3,5	;RP0=0, select bank0
  1372     072C  1303               	bcf	3,6	;RP1=0, select bank0
  1373     072D  00D0               	movwf	??_main
  1374     072E  1683               	bsf	3,5	;RP0=1, select bank3
  1375     072F  1703               	bsf	3,6	;RP1=1, select bank3
  1376     0730  0860               	movf	main@j_169^(0+384),w
  1377     0731  1283               	bcf	3,5	;RP0=0, select bank0
  1378     0732  1303               	bcf	3,6	;RP1=0, select bank0
  1379     0733  00D1               	movwf	??_main+1
  1380     0734  3001               	movlw	1
  1381     0735                     u1305:
  1382     0735  1003               	clrc
  1383     0736  0DD1               	rlf	??_main+1,f
  1384     0737  3EFF               	addlw	-1
  1385     0738  1D03               	skipz
  1386     0739  2F35               	goto	u1305
  1387     073A  1003               	clrc
  1388     073B  0D51               	rlf	??_main+1,w
  1389     073C  3E02               	addlw	2
  1390     073D  3EB4               	addlw	(low (main@led| (0+256)))& (0+255)
  1391     073E  0084               	movwf	4
  1392     073F  1783               	bsf	3,7	;select IRP bank3
  1393     0740  0A00               	incf	0,w
  1394     0741  2F44               	goto	u1314
  1395     0742                     u1315:
  1396     0742  1003               	clrc
  1397     0743  0DD0               	rlf	??_main,f
  1398     0744                     u1314:
  1399     0744  3EFF               	addlw	-1
  1400     0745  1D03               	skipz
  1401     0746  2F42               	goto	u1315
  1402     0747  0850               	movf	??_main,w
  1403     0748  00FF               	movwf	btemp+1
  1404     0749  1683               	bsf	3,5	;RP0=1, select bank3
  1405     074A  1703               	bsf	3,6	;RP1=1, select bank3
  1406     074B  0860               	movf	main@j_169^(0+384),w
  1407     074C  1283               	bcf	3,5	;RP0=0, select bank0
  1408     074D  1303               	bcf	3,6	;RP1=0, select bank0
  1409     074E  00D2               	movwf	??_main+2
  1410     074F  3001               	movlw	1
  1411     0750                     u1325:
  1412     0750  1003               	clrc
  1413     0751  0DD2               	rlf	??_main+2,f
  1414     0752  3EFF               	addlw	-1
  1415     0753  1D03               	skipz
  1416     0754  2F50               	goto	u1325
  1417     0755  1003               	clrc
  1418     0756  0D52               	rlf	??_main+2,w
  1419     0757  3EB4               	addlw	(low (main@led| (0+256)))& (0+255)
  1420     0758  0084               	movwf	4
  1421     0759  0800               	movf	0,w
  1422     075A  00D3               	movwf	??_main+3
  1423     075B  0A84               	incf	4,f
  1424     075C  0800               	movf	0,w
  1425     075D  00D4               	movwf	??_main+4
  1426     075E  0853               	movf	??_main+3,w
  1427     075F  0084               	movwf	4
  1428     0760  1783               	bsf	3,7
  1429     0761  1C54               	btfss	??_main+4,0
  1430     0762  1383               	bcf	3,7
  1431     0763  087F               	movf	btemp+1,w
  1432     0764  0480               	iorwf	0,f
  1433     0765                     l1561:
  1434                           
  1435                           ;main.c: 102:                     Lcd_Write_Int(j);
  1436     0765  1683               	bsf	3,5	;RP0=1, select bank3
  1437     0766  1703               	bsf	3,6	;RP1=1, select bank3
  1438     0767  0861               	movf	(main@j_169+1)^(0+384),w
  1439     0768  1283               	bcf	3,5	;RP0=0, select bank0
  1440     0769  1303               	bcf	3,6	;RP1=0, select bank0
  1441     076A  00BF               	movwf	Lcd_Write_Int@a+1
  1442     076B  1683               	bsf	3,5	;RP0=1, select bank3
  1443     076C  1703               	bsf	3,6	;RP1=1, select bank3
  1444     076D  0860               	movf	main@j_169^(0+384),w
  1445     076E  1283               	bcf	3,5	;RP0=0, select bank0
  1446     076F  1303               	bcf	3,6	;RP1=0, select bank0
  1447     0770  00BE               	movwf	Lcd_Write_Int@a
  1448     0771  120A  118A  2125  120A  118A  	fcall	_Lcd_Write_Int
  1449     0776                     l1563:
  1450                           
  1451                           ;main.c: 103:                     Lcd_Write_Char(' ');
  1452     0776  3020               	movlw	32
  1453     0777  120A  118A  2201  120A  118A  	fcall	_Lcd_Write_Char
  1454     077C                     l1565:
  1455                           
  1456                           ;main.c: 104:                 }
  1457     077C  30FF               	movlw	255
  1458     077D  1683               	bsf	3,5	;RP0=1, select bank3
  1459     077E  1703               	bsf	3,6	;RP1=1, select bank3
  1460     077F  07E0               	addwf	main@j_169^(0+384),f
  1461     0780  1803               	skipnc
  1462     0781  0AE1               	incf	(main@j_169+1)^(0+384),f
  1463     0782  30FF               	movlw	255
  1464     0783  07E1               	addwf	(main@j_169+1)^(0+384),f
  1465     0784                     l1567:
  1466     0784  0862               	movf	main@i_166^(0+384),w
  1467     0785  3EFE               	addlw	254
  1468     0786  1283               	bcf	3,5	;RP0=0, select bank0
  1469     0787  1303               	bcf	3,6	;RP1=0, select bank0
  1470     0788  00D0               	movwf	??_main
  1471     0789  1683               	bsf	3,5	;RP0=1, select bank3
  1472     078A  1703               	bsf	3,6	;RP1=1, select bank3
  1473     078B  0863               	movf	(main@i_166+1)^(0+384),w
  1474     078C  1803               	skipnc
  1475     078D  3E01               	addlw	1
  1476     078E  3EFF               	addlw	255
  1477     078F  1283               	bcf	3,5	;RP0=0, select bank0
  1478     0790  1303               	bcf	3,6	;RP1=0, select bank0
  1479     0791  00D1               	movwf	??_main+1
  1480     0792  1683               	bsf	3,5	;RP0=1, select bank3
  1481     0793  1703               	bsf	3,6	;RP1=1, select bank3
  1482     0794  0861               	movf	(main@j_169+1)^(0+384),w
  1483     0795  3A80               	xorlw	128
  1484     0796  1283               	bcf	3,5	;RP0=0, select bank0
  1485     0797  1303               	bcf	3,6	;RP1=0, select bank0
  1486     0798  00D2               	movwf	??_main+2
  1487     0799  0851               	movf	??_main+1,w
  1488     079A  3A80               	xorlw	128
  1489     079B  0252               	subwf	??_main+2,w
  1490     079C  1D03               	skipz
  1491     079D  2FA2               	goto	u1335
  1492     079E  0850               	movf	??_main,w
  1493     079F  1683               	bsf	3,5	;RP0=1, select bank3
  1494     07A0  1703               	bsf	3,6	;RP1=1, select bank3
  1495     07A1  0260               	subwf	main@j_169^(0+384),w
  1496     07A2                     u1335:
  1497     07A2  1803               	skipnc
  1498     07A3  2FA5               	goto	u1331
  1499     07A4  2FA6               	goto	u1330
  1500     07A5                     u1331:
  1501     07A5  2FAC               	goto	l1571
  1502     07A6                     u1330:
  1503     07A6                     l1569:
  1504     07A6  1683               	bsf	3,5	;RP0=1, select bank3
  1505     07A7  1703               	bsf	3,6	;RP1=1, select bank3
  1506     07A8  1FE1               	btfss	(main@j_169+1)^(0+384),7
  1507     07A9  2FAB               	goto	u1341
  1508     07AA  2FAC               	goto	u1340
  1509     07AB                     u1341:
  1510     07AB  2F2A               	goto	l1559
  1511     07AC                     u1340:
  1512     07AC                     l1571:
  1513                           
  1514                           ;main.c: 106:             _delay((unsigned long)((1000)*(8000000/4000.0)));
  1515     07AC  300B               	movlw	11
  1516     07AD  1283               	bcf	3,5	;RP0=0, select bank0
  1517     07AE  1303               	bcf	3,6	;RP1=0, select bank0
  1518     07AF  00D2               	movwf	??_main+2
  1519     07B0  3026               	movlw	38
  1520     07B1  00D1               	movwf	??_main+1
  1521     07B2  305D               	movlw	93
  1522     07B3  00D0               	movwf	??_main
  1523     07B4                     u1367:
  1524     07B4  0BD0               	decfsz	??_main,f
  1525     07B5  2FB4               	goto	u1367
  1526     07B6  0BD1               	decfsz	??_main+1,f
  1527     07B7  2FB4               	goto	u1367
  1528     07B8  0BD2               	decfsz	??_main+2,f
  1529     07B9  2FB4               	goto	u1367
  1530                           
  1531                           ;main.c: 107:         }
  1532     07BA  3001               	movlw	1
  1533     07BB  1683               	bsf	3,5	;RP0=1, select bank3
  1534     07BC  1703               	bsf	3,6	;RP1=1, select bank3
  1535     07BD  07E2               	addwf	main@i_166^(0+384),f
  1536     07BE  1803               	skipnc
  1537     07BF  0AE3               	incf	(main@i_166+1)^(0+384),f
  1538     07C0  3000               	movlw	0
  1539     07C1  07E3               	addwf	(main@i_166+1)^(0+384),f
  1540     07C2                     l1573:
  1541     07C2  0863               	movf	(main@i_166+1)^(0+384),w
  1542     07C3  3A80               	xorlw	128
  1543     07C4  00FF               	movwf	btemp+1
  1544     07C5  3080               	movlw	128
  1545     07C6  027F               	subwf	btemp+1,w
  1546     07C7  1D03               	skipz
  1547     07C8  2FCB               	goto	u1355
  1548     07C9  3009               	movlw	9
  1549     07CA  0262               	subwf	main@i_166^(0+384),w
  1550     07CB                     u1355:
  1551     07CB  1C03               	skipc
  1552     07CC  2FCE               	goto	u1351
  1553     07CD  2FCF               	goto	u1350
  1554     07CE                     u1351:
  1555     07CE  2E34               	goto	l1527
  1556     07CF                     u1350:
  1557     07CF  2DBF               	goto	l1497
  1558     07D0  120A  118A  2801   	ljmp	start
  1559     07D3                     __end_of_main:
  1560                           
  1561                           	psect	text1
  1562     0125                     __ptext1:	
  1563 ;; *************** function _Lcd_Write_Int *****************
  1564 ;; Defined at:
  1565 ;;		line 117 in file "./lcd.h"
  1566 ;; Parameters:    Size  Location     Type
  1567 ;;  a               2   30[BANK0 ] int 
  1568 ;; Auto vars:     Size  Location     Type
  1569 ;;  str            16   32[BANK0 ] unsigned char [16]
  1570 ;; Return value:  Size  Location     Type
  1571 ;;                  1    wreg      void 
  1572 ;; Registers used:
  1573 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1574 ;; Tracked objects:
  1575 ;;		On entry : 0/0
  1576 ;;		On exit  : 0/0
  1577 ;;		Unchanged: 0/0
  1578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1579 ;;      Params:         0       2       0       0       0
  1580 ;;      Locals:         0      16       0       0       0
  1581 ;;      Temps:          0       0       0       0       0
  1582 ;;      Totals:         0      18       0       0       0
  1583 ;;Total ram usage:       18 bytes
  1584 ;; Hardware stack levels used: 1
  1585 ;; Hardware stack levels required when called: 5
  1586 ;; This function calls:
  1587 ;;		_Lcd_Write_String
  1588 ;;		_sprintf
  1589 ;; This function is called by:
  1590 ;;		_main
  1591 ;; This function uses a non-reentrant model
  1592 ;;
  1593                           
  1594     0125                     _Lcd_Write_Int:	
  1595                           ;psect for function _Lcd_Write_Int
  1596                           
  1597     0125                     l1449:	
  1598                           ;incstack = 0
  1599                           ; Regs used in _Lcd_Write_Int: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1600                           
  1601                           
  1602                           ;./lcd.h: 118:     char str[16];;./lcd.h: 119:     sprintf(str, "%d", a);
  1603     0125  302B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1604     0126  1283               	bcf	3,5	;RP0=0, select bank0
  1605     0127  1303               	bcf	3,6	;RP1=0, select bank0
  1606     0128  00AE               	movwf	sprintf@fmt
  1607     0129  083F               	movf	Lcd_Write_Int@a+1,w
  1608     012A  00B0               	movwf	?_sprintf+2
  1609     012B  083E               	movf	Lcd_Write_Int@a,w
  1610     012C  00AF               	movwf	?_sprintf+1
  1611     012D  3040               	movlw	(low (Lcd_Write_Int@str| 0))& (0+255)
  1612     012E  120A  118A  2157  120A  118A  	fcall	_sprintf
  1613                           
  1614                           ;./lcd.h: 120:     Lcd_Write_String(str);
  1615     0133  3040               	movlw	(low (Lcd_Write_Int@str| 0))& (0+255)
  1616     0134  00F6               	movwf	Lcd_Write_String@a
  1617     0135  3000               	movlw	0
  1618     0136  00F7               	movwf	Lcd_Write_String@a+1
  1619     0137  120A  118A  2270  120A  118A  	fcall	_Lcd_Write_String
  1620     013C                     l84:
  1621     013C  0008               	return
  1622     013D                     __end_of_Lcd_Write_Int:
  1623                           
  1624                           	psect	text2
  1625     0157                     __ptext2:	
  1626 ;; *************** function _sprintf *****************
  1627 ;; Defined at:
  1628 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_sprintf.c"
  1629 ;; Parameters:    Size  Location     Type
  1630 ;;  s               1    wreg     PTR unsigned char 
  1631 ;;		 -> Lcd_Write_Int@str(16), 
  1632 ;;  fmt             1   14[BANK0 ] PTR const unsigned char 
  1633 ;;		 -> STR_1(3), 
  1634 ;; Auto vars:     Size  Location     Type
  1635 ;;  s               1   18[BANK0 ] PTR unsigned char 
  1636 ;;		 -> Lcd_Write_Int@str(16), 
  1637 ;;  f              11   19[BANK0 ] struct _IO_FILE
  1638 ;;  ret             2    0        int 
  1639 ;;  ap              1   17[BANK0 ] PTR void [1]
  1640 ;;		 -> ?_sprintf(2), 
  1641 ;; Return value:  Size  Location     Type
  1642 ;;                  2   14[BANK0 ] int 
  1643 ;; Registers used:
  1644 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1645 ;; Tracked objects:
  1646 ;;		On entry : 0/0
  1647 ;;		On exit  : 0/0
  1648 ;;		Unchanged: 0/0
  1649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1650 ;;      Params:         0       3       0       0       0
  1651 ;;      Locals:         0      13       0       0       0
  1652 ;;      Temps:          1       0       0       0       0
  1653 ;;      Totals:         1      16       0       0       0
  1654 ;;Total ram usage:       17 bytes
  1655 ;; Hardware stack levels used: 1
  1656 ;; Hardware stack levels required when called: 4
  1657 ;; This function calls:
  1658 ;;		_vfprintf
  1659 ;; This function is called by:
  1660 ;;		_Lcd_Write_Int
  1661 ;; This function uses a non-reentrant model
  1662 ;;
  1663                           
  1664     0157                     _sprintf:	
  1665                           ;psect for function _sprintf
  1666                           
  1667                           
  1668                           ;incstack = 0
  1669                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1670                           ;sprintf@s stored from wreg
  1671     0157  1283               	bcf	3,5	;RP0=0, select bank0
  1672     0158  1303               	bcf	3,6	;RP1=0, select bank0
  1673     0159  00B2               	movwf	sprintf@s
  1674     015A                     l1385:
  1675     015A  302F               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1676     015B  00B1               	movwf	sprintf@ap
  1677     015C  0832               	movf	sprintf@s,w
  1678     015D  00B3               	movwf	sprintf@f
  1679     015E                     l1387:
  1680     015E  01B5               	clrf	sprintf@f+2
  1681     015F  01B6               	clrf	sprintf@f+3
  1682     0160                     l1389:
  1683     0160  01BC               	clrf	sprintf@f+9
  1684     0161  01BD               	clrf	sprintf@f+10
  1685     0162                     l1391:
  1686     0162  082E               	movf	sprintf@fmt,w
  1687     0163  00AA               	movwf	vfprintf@fmt
  1688     0164  3031               	movlw	(low (sprintf@ap| 0))& (0+255)
  1689     0165  00AB               	movwf	vfprintf@ap
  1690     0166  3033               	movlw	(low (sprintf@f| 0))& (0+255)
  1691     0167  120A  118A  2176  120A  118A  	fcall	_vfprintf
  1692     016C                     l1393:
  1693     016C  1283               	bcf	3,5	;RP0=0, select bank0
  1694     016D  1303               	bcf	3,6	;RP1=0, select bank0
  1695     016E  0835               	movf	sprintf@f+2,w
  1696     016F  0732               	addwf	sprintf@s,w
  1697     0170  00FD               	movwf	??_sprintf
  1698     0171  087D               	movf	??_sprintf,w
  1699     0172  0084               	movwf	4
  1700     0173  1383               	bcf	3,7	;select IRP bank0
  1701     0174  0180               	clrf	0
  1702     0175                     l687:
  1703     0175  0008               	return
  1704     0176                     __end_of_sprintf:
  1705                           
  1706                           	psect	text3
  1707     0176                     __ptext3:	
  1708 ;; *************** function _vfprintf *****************
  1709 ;; Defined at:
  1710 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  1711 ;; Parameters:    Size  Location     Type
  1712 ;;  fp              1    wreg     PTR struct _IO_FILE
  1713 ;;		 -> sprintf@f(11), 
  1714 ;;  fmt             1   10[BANK0 ] PTR const unsigned char 
  1715 ;;		 -> STR_1(3), 
  1716 ;;  ap              1   11[BANK0 ] PTR PTR void 
  1717 ;;		 -> sprintf@ap(1), 
  1718 ;; Auto vars:     Size  Location     Type
  1719 ;;  fp              1   12[BANK0 ] PTR struct _IO_FILE
  1720 ;;		 -> sprintf@f(11), 
  1721 ;;  cfmt            1   13[BANK0 ] PTR unsigned char 
  1722 ;;		 -> STR_1(3), 
  1723 ;; Return value:  Size  Location     Type
  1724 ;;                  2   10[BANK0 ] int 
  1725 ;; Registers used:
  1726 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1727 ;; Tracked objects:
  1728 ;;		On entry : 0/0
  1729 ;;		On exit  : 0/0
  1730 ;;		Unchanged: 0/0
  1731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1732 ;;      Params:         0       2       0       0       0
  1733 ;;      Locals:         0       2       0       0       0
  1734 ;;      Temps:          0       0       0       0       0
  1735 ;;      Totals:         0       4       0       0       0
  1736 ;;Total ram usage:        4 bytes
  1737 ;; Hardware stack levels used: 1
  1738 ;; Hardware stack levels required when called: 3
  1739 ;; This function calls:
  1740 ;;		_vfpfcnvrt
  1741 ;; This function is called by:
  1742 ;;		_sprintf
  1743 ;; This function uses a non-reentrant model
  1744 ;;
  1745                           
  1746     0176                     _vfprintf:	
  1747                           ;psect for function _vfprintf
  1748                           
  1749                           
  1750                           ;incstack = 0
  1751                           ; Regs used in _vfprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1752                           ;vfprintf@fp stored from wreg
  1753     0176  1283               	bcf	3,5	;RP0=0, select bank0
  1754     0177  1303               	bcf	3,6	;RP1=0, select bank0
  1755     0178  00AC               	movwf	vfprintf@fp
  1756     0179                     l1357:
  1757                           
  1758                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  1759     0179  082A               	movf	vfprintf@fmt,w
  1760     017A  00AD               	movwf	vfprintf@cfmt
  1761                           
  1762                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1763     017B  2986               	goto	l1361
  1764     017C                     l1359:
  1765                           
  1766                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  1767     017C  302D               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
  1768     017D  00FB               	movwf	vfpfcnvrt@fmt
  1769     017E  082B               	movf	vfprintf@ap,w
  1770     017F  00FC               	movwf	vfpfcnvrt@ap
  1771     0180  082C               	movf	vfprintf@fp,w
  1772     0181  120A  118A  246E  120A  118A  	fcall	_vfpfcnvrt
  1773     0186                     l1361:
  1774                           
  1775                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1776     0186  1283               	bcf	3,5	;RP0=0, select bank0
  1777     0187  1303               	bcf	3,6	;RP1=0, select bank0
  1778     0188  082D               	movf	vfprintf@cfmt,w
  1779     0189  0084               	movwf	4
  1780     018A  120A  118A  200E  120A  118A  	fcall	stringdir
  1781     018F  3A00               	xorlw	0
  1782     0190  1D03               	skipz
  1783     0191  2993               	goto	u1081
  1784     0192  2994               	goto	u1080
  1785     0193                     u1081:
  1786     0193  297C               	goto	l1359
  1787     0194                     u1080:
  1788     0194                     l1363:
  1789                           
  1790                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  1791     0194  01AA               	clrf	?_vfprintf
  1792     0195  01AB               	clrf	?_vfprintf+1
  1793     0196                     l731:
  1794     0196  0008               	return
  1795     0197                     __end_of_vfprintf:
  1796                           
  1797                           	psect	text4
  1798     046E                     __ptext4:	
  1799 ;; *************** function _vfpfcnvrt *****************
  1800 ;; Defined at:
  1801 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  1802 ;; Parameters:    Size  Location     Type
  1803 ;;  fp              1    wreg     PTR struct _IO_FILE
  1804 ;;		 -> sprintf@f(11), 
  1805 ;;  fmt             1   10[COMMON] PTR PTR unsigned char 
  1806 ;;		 -> vfprintf@cfmt(1), 
  1807 ;;  ap              1   11[COMMON] PTR PTR void 
  1808 ;;		 -> sprintf@ap(1), 
  1809 ;; Auto vars:     Size  Location     Type
  1810 ;;  fp              1    3[BANK0 ] PTR struct _IO_FILE
  1811 ;;		 -> sprintf@f(11), 
  1812 ;;  convarg         4    5[BANK0 ] struct .
  1813 ;;  c               1    9[BANK0 ] unsigned char 
  1814 ;;  cp              1    4[BANK0 ] PTR unsigned char 
  1815 ;;		 -> STR_1(3), 
  1816 ;;  done            1    2[BANK0 ] _Bool 
  1817 ;; Return value:  Size  Location     Type
  1818 ;;                  1    wreg      void 
  1819 ;; Registers used:
  1820 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1821 ;; Tracked objects:
  1822 ;;		On entry : 0/0
  1823 ;;		On exit  : 0/0
  1824 ;;		Unchanged: 0/0
  1825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1826 ;;      Params:         2       0       0       0       0
  1827 ;;      Locals:         0       8       0       0       0
  1828 ;;      Temps:          0       2       0       0       0
  1829 ;;      Totals:         2      10       0       0       0
  1830 ;;Total ram usage:       12 bytes
  1831 ;; Hardware stack levels used: 1
  1832 ;; Hardware stack levels required when called: 2
  1833 ;; This function calls:
  1834 ;;		___awdiv
  1835 ;;		___awmod
  1836 ;;		_abs
  1837 ;;		_fputc
  1838 ;; This function is called by:
  1839 ;;		_vfprintf
  1840 ;; This function uses a non-reentrant model
  1841 ;;
  1842                           
  1843     046E                     _vfpfcnvrt:	
  1844                           ;psect for function _vfpfcnvrt
  1845                           
  1846                           
  1847                           ;incstack = 0
  1848                           ; Regs used in _vfpfcnvrt: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1849                           ;vfpfcnvrt@fp stored from wreg
  1850     046E  1283               	bcf	3,5	;RP0=0, select bank0
  1851     046F  1303               	bcf	3,6	;RP1=0, select bank0
  1852     0470  00A3               	movwf	vfpfcnvrt@fp
  1853     0471                     l1285:
  1854                           
  1855                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  1856     0471  087B               	movf	vfpfcnvrt@fmt,w
  1857     0472  0084               	movwf	4
  1858     0473  1383               	bcf	3,7	;select IRP bank0
  1859     0474  0800               	movf	0,w
  1860     0475  0084               	movwf	4
  1861     0476  120A  118A  200E  120A  118A  	fcall	stringdir
  1862     047B  3A25               	xorlw	37
  1863     047C  1D03               	skipz
  1864     047D  2C7F               	goto	u971
  1865     047E  2C80               	goto	u970
  1866     047F                     u971:
  1867     047F  2D41               	goto	l1331
  1868     0480                     u970:
  1869     0480                     l1287:
  1870                           
  1871                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  1872     0480  3001               	movlw	1
  1873     0481  00FF               	movwf	btemp+1
  1874     0482  087B               	movf	vfpfcnvrt@fmt,w
  1875     0483  0084               	movwf	4
  1876     0484  087F               	movf	btemp+1,w
  1877     0485  0780               	addwf	0,f
  1878     0486                     l1289:
  1879                           
  1880                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  1881     0486  01D5               	clrf	_width
  1882     0487  01D6               	clrf	_width+1
  1883     0488  1003               	clrc
  1884     0489  3000               	movlw	0
  1885     048A  1803               	btfsc	3,0
  1886     048B  3001               	movlw	1
  1887     048C  00D9               	movwf	_flags
  1888     048D                     l1291:
  1889                           
  1890                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  1891     048D  30FF               	movlw	255
  1892     048E  00D7               	movwf	_prec
  1893     048F  30FF               	movlw	255
  1894     0490  00D8               	movwf	_prec+1
  1895     0491                     l1293:
  1896                           
  1897                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  1898     0491  087B               	movf	vfpfcnvrt@fmt,w
  1899     0492  0084               	movwf	4
  1900     0493  0800               	movf	0,w
  1901     0494  00A4               	movwf	vfpfcnvrt@cp
  1902     0495                     l1295:
  1903                           
  1904                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  1905     0495  0824               	movf	vfpfcnvrt@cp,w
  1906     0496  0084               	movwf	4
  1907     0497  120A  118A  200E  120A  118A  	fcall	stringdir
  1908     049C  3A64               	xorlw	100
  1909     049D  1903               	skipnz
  1910     049E  2CA0               	goto	u981
  1911     049F  2CA1               	goto	u980
  1912     04A0                     u981:
  1913     04A0  2CAD               	goto	l1299
  1914     04A1                     u980:
  1915     04A1                     l1297:
  1916     04A1  0824               	movf	vfpfcnvrt@cp,w
  1917     04A2  0084               	movwf	4
  1918     04A3  120A  118A  200E  120A  118A  	fcall	stringdir
  1919     04A8  3A69               	xorlw	105
  1920     04A9  1D03               	skipz
  1921     04AA  2CAC               	goto	u991
  1922     04AB  2CAD               	goto	u990
  1923     04AC                     u991:
  1924     04AC  2D39               	goto	l1327
  1925     04AD                     u990:
  1926     04AD                     l1299:
  1927                           
  1928                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  1929     04AD  087C               	movf	vfpfcnvrt@ap,w
  1930     04AE  0084               	movwf	4
  1931     04AF  0800               	movf	0,w
  1932     04B0  00FF               	movwf	btemp+1
  1933     04B1  3002               	movlw	2
  1934     04B2  0780               	addwf	0,f
  1935     04B3  087F               	movf	btemp+1,w
  1936     04B4  0084               	movwf	4
  1937     04B5  0800               	movf	0,w
  1938     04B6  00A5               	movwf	vfpfcnvrt@convarg
  1939     04B7  0A84               	incf	4,f
  1940     04B8  0800               	movf	0,w
  1941     04B9  00A6               	movwf	vfpfcnvrt@convarg+1
  1942     04BA                     l1301:
  1943                           
  1944                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  1945     04BA  087B               	movf	vfpfcnvrt@fmt,w
  1946     04BB  0084               	movwf	4
  1947     04BC  0824               	movf	vfpfcnvrt@cp,w
  1948     04BD  3E01               	addlw	1
  1949     04BE  0080               	movwf	0
  1950     04BF                     l1303:
  1951                           
  1952                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1408:    c = size
      +                          of(dbuf);
  1953     04BF  3020               	movlw	32
  1954     04C0  00A9               	movwf	vfpfcnvrt@c
  1955     04C1                     l1305:
  1956                           
  1957                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1409:    done = c
      +                          onvarg.sint < 0;
  1958     04C1  1BA6               	btfsc	vfpfcnvrt@convarg+1,7
  1959     04C2  2CC4               	goto	u1001
  1960     04C3  2CC6               	goto	u1000
  1961     04C4                     u1001:
  1962     04C4  3001               	movlw	1
  1963     04C5  2CC7               	goto	u1010
  1964     04C6                     u1000:
  1965     04C6  3000               	movlw	0
  1966     04C7                     u1010:
  1967     04C7  00A2               	movwf	vfpfcnvrt@done
  1968     04C8                     l1307:
  1969                           
  1970                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1411:     dbuf[--
      +                          c] = abs(convarg.sint % 10) + '0';
  1971     04C8  3001               	movlw	1
  1972     04C9  02A9               	subwf	vfpfcnvrt@c,f
  1973     04CA  0829               	movf	vfpfcnvrt@c,w
  1974     04CB  3EC4               	addlw	(low (_dbuf| 0))& (0+255)
  1975     04CC  0084               	movwf	4
  1976     04CD  300A               	movlw	10
  1977     04CE  00F1               	movwf	___awmod@divisor
  1978     04CF  3000               	movlw	0
  1979     04D0  00F2               	movwf	___awmod@divisor+1
  1980     04D1  0826               	movf	vfpfcnvrt@convarg+1,w
  1981     04D2  00F4               	movwf	___awmod@dividend+1
  1982     04D3  0825               	movf	vfpfcnvrt@convarg,w
  1983     04D4  00F3               	movwf	___awmod@dividend
  1984     04D5  120A  118A  234E  120A  118A  	fcall	___awmod
  1985     04DA  0872               	movf	?___awmod+1,w
  1986     04DB  00F8               	movwf	abs@a+1
  1987     04DC  0871               	movf	?___awmod,w
  1988     04DD  00F7               	movwf	abs@a
  1989     04DE  120A  118A  2101  120A  118A  	fcall	_abs
  1990     04E3  0877               	movf	?_abs,w
  1991     04E4  3E30               	addlw	48
  1992     04E5  1383               	bcf	3,7	;select IRP bank1
  1993     04E6  0080               	movwf	0
  1994     04E7                     l1309:
  1995                           
  1996                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1412:     convarg
      +                          .sint /= 10;
  1997     04E7  300A               	movlw	10
  1998     04E8  00F1               	movwf	___awdiv@divisor
  1999     04E9  3000               	movlw	0
  2000     04EA  00F2               	movwf	___awdiv@divisor+1
  2001     04EB  1283               	bcf	3,5	;RP0=0, select bank0
  2002     04EC  1303               	bcf	3,6	;RP1=0, select bank0
  2003     04ED  0826               	movf	vfpfcnvrt@convarg+1,w
  2004     04EE  00F4               	movwf	___awdiv@dividend+1
  2005     04EF  0825               	movf	vfpfcnvrt@convarg,w
  2006     04F0  00F3               	movwf	___awdiv@dividend
  2007     04F1  120A  118A  2407  120A  118A  	fcall	___awdiv
  2008     04F6  0872               	movf	?___awdiv+1,w
  2009     04F7  1283               	bcf	3,5	;RP0=0, select bank0
  2010     04F8  1303               	bcf	3,6	;RP1=0, select bank0
  2011     04F9  00A6               	movwf	vfpfcnvrt@convarg+1
  2012     04FA  0871               	movf	?___awdiv,w
  2013     04FB  00A5               	movwf	vfpfcnvrt@convarg
  2014     04FC                     l1311:
  2015                           
  2016                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1416:    } while 
      +                          (convarg.sint != 0 && c != 0);
  2017     04FC  0825               	movf	vfpfcnvrt@convarg,w
  2018     04FD  0426               	iorwf	vfpfcnvrt@convarg+1,w
  2019     04FE  1903               	btfsc	3,2
  2020     04FF  2D01               	goto	u1021
  2021     0500  2D02               	goto	u1020
  2022     0501                     u1021:
  2023     0501  2D07               	goto	l1315
  2024     0502                     u1020:
  2025     0502                     l1313:
  2026     0502  0829               	movf	vfpfcnvrt@c,w
  2027     0503  1D03               	btfss	3,2
  2028     0504  2D06               	goto	u1031
  2029     0505  2D07               	goto	u1030
  2030     0506                     u1031:
  2031     0506  2CC8               	goto	l1307
  2032     0507                     u1030:
  2033     0507                     l1315:
  2034                           
  2035                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1417:    if (c !=
      +                           0 && done) {
  2036     0507  0829               	movf	vfpfcnvrt@c,w
  2037     0508  1903               	btfsc	3,2
  2038     0509  2D0B               	goto	u1041
  2039     050A  2D0C               	goto	u1040
  2040     050B                     u1041:
  2041     050B  2D32               	goto	l1325
  2042     050C                     u1040:
  2043     050C                     l1317:
  2044     050C  0822               	movf	vfpfcnvrt@done,w
  2045     050D  1903               	btfsc	3,2
  2046     050E  2D10               	goto	u1051
  2047     050F  2D11               	goto	u1050
  2048     0510                     u1051:
  2049     0510  2D32               	goto	l1325
  2050     0511                     u1050:
  2051     0511                     l1319:
  2052                           
  2053                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1418:     dbuf[--
      +                          c] = '-';
  2054     0511  3001               	movlw	1
  2055     0512  02A9               	subwf	vfpfcnvrt@c,f
  2056     0513  0829               	movf	vfpfcnvrt@c,w
  2057     0514  3EC4               	addlw	(low (_dbuf| 0))& (0+255)
  2058     0515  0084               	movwf	4
  2059     0516  302D               	movlw	45
  2060     0517  1383               	bcf	3,7	;select IRP bank1
  2061     0518  0080               	movwf	0
  2062     0519  2D32               	goto	l1325
  2063     051A                     l1321:
  2064                           
  2065                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1424:     fputc(d
      +                          buf[c++], fp);
  2066     051A  0829               	movf	vfpfcnvrt@c,w
  2067     051B  3EC4               	addlw	(low (_dbuf| 0))& (0+255)
  2068     051C  0084               	movwf	4
  2069     051D  1383               	bcf	3,7	;select IRP bank1
  2070     051E  0800               	movf	0,w
  2071     051F  00A0               	movwf	??_vfpfcnvrt
  2072     0520  01A1               	clrf	??_vfpfcnvrt+1
  2073     0521  0820               	movf	??_vfpfcnvrt,w
  2074     0522  00F1               	movwf	fputc@c
  2075     0523  0821               	movf	??_vfpfcnvrt+1,w
  2076     0524  00F2               	movwf	fputc@c+1
  2077     0525  0823               	movf	vfpfcnvrt@fp,w
  2078     0526  00F3               	movwf	fputc@fp
  2079     0527  120A  118A  22F8  120A  118A  	fcall	_fputc
  2080     052C                     l1323:
  2081     052C  3001               	movlw	1
  2082     052D  00FF               	movwf	btemp+1
  2083     052E  087F               	movf	btemp+1,w
  2084     052F  1283               	bcf	3,5	;RP0=0, select bank0
  2085     0530  1303               	bcf	3,6	;RP1=0, select bank0
  2086     0531  07A9               	addwf	vfpfcnvrt@c,f
  2087     0532                     l1325:
  2088                           
  2089                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1423:    while (c
      +                           != sizeof(dbuf)) {
  2090     0532  3020               	movlw	32
  2091     0533  0629               	xorwf	vfpfcnvrt@c,w
  2092     0534  1D03               	btfss	3,2
  2093     0535  2D37               	goto	u1061
  2094     0536  2D38               	goto	u1060
  2095     0537                     u1061:
  2096     0537  2D1A               	goto	l1321
  2097     0538                     u1060:
  2098     0538  2D58               	goto	l725
  2099     0539                     l1327:
  2100                           
  2101                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  2102     0539  3001               	movlw	1
  2103     053A  00FF               	movwf	btemp+1
  2104     053B  087B               	movf	vfpfcnvrt@fmt,w
  2105     053C  0084               	movwf	4
  2106     053D  087F               	movf	btemp+1,w
  2107     053E  1383               	bcf	3,7	;select IRP bank0
  2108     053F  0780               	addwf	0,f
  2109     0540  2D58               	goto	l725
  2110     0541                     l1331:
  2111                           
  2112                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  2113     0541  087B               	movf	vfpfcnvrt@fmt,w
  2114     0542  0084               	movwf	4
  2115     0543  0800               	movf	0,w
  2116     0544  0084               	movwf	4
  2117     0545  120A  118A  200E  120A  118A  	fcall	stringdir
  2118     054A  00A0               	movwf	??_vfpfcnvrt
  2119     054B  01A1               	clrf	??_vfpfcnvrt+1
  2120     054C  0820               	movf	??_vfpfcnvrt,w
  2121     054D  00F1               	movwf	fputc@c
  2122     054E  0821               	movf	??_vfpfcnvrt+1,w
  2123     054F  00F2               	movwf	fputc@c+1
  2124     0550  0823               	movf	vfpfcnvrt@fp,w
  2125     0551  00F3               	movwf	fputc@fp
  2126     0552  120A  118A  22F8  120A  118A  	fcall	_fputc
  2127     0557  2D39               	goto	l1327
  2128     0558                     l725:
  2129     0558  0008               	return
  2130     0559                     __end_of_vfpfcnvrt:
  2131                           
  2132                           	psect	text5
  2133     02F8                     __ptext5:	
  2134 ;; *************** function _fputc *****************
  2135 ;; Defined at:
  2136 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputc.c"
  2137 ;; Parameters:    Size  Location     Type
  2138 ;;  c               2    0[COMMON] int 
  2139 ;;  fp              1    2[COMMON] PTR struct _IO_FILE
  2140 ;;		 -> sprintf@f(11), 
  2141 ;; Auto vars:     Size  Location     Type
  2142 ;;		None
  2143 ;; Return value:  Size  Location     Type
  2144 ;;                  2    0[COMMON] int 
  2145 ;; Registers used:
  2146 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2147 ;; Tracked objects:
  2148 ;;		On entry : 0/0
  2149 ;;		On exit  : 0/0
  2150 ;;		Unchanged: 0/0
  2151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2152 ;;      Params:         3       0       0       0       0
  2153 ;;      Locals:         0       0       0       0       0
  2154 ;;      Temps:          5       0       0       0       0
  2155 ;;      Totals:         8       0       0       0       0
  2156 ;;Total ram usage:        8 bytes
  2157 ;; Hardware stack levels used: 1
  2158 ;; Hardware stack levels required when called: 1
  2159 ;; This function calls:
  2160 ;;		_putch
  2161 ;; This function is called by:
  2162 ;;		_vfpfcnvrt
  2163 ;; This function uses a non-reentrant model
  2164 ;;
  2165                           
  2166     02F8                     _fputc:	
  2167                           ;psect for function _fputc
  2168                           
  2169     02F8                     l1253:	
  2170                           ;incstack = 0
  2171                           ; Regs used in _fputc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2172                           
  2173     02F8  0873               	movf	fputc@fp,w
  2174     02F9  1903               	btfsc	3,2
  2175     02FA  2AFC               	goto	u881
  2176     02FB  2AFD               	goto	u880
  2177     02FC                     u881:
  2178     02FC  2B02               	goto	l1257
  2179     02FD                     u880:
  2180     02FD                     l1255:
  2181     02FD  0873               	movf	fputc@fp,w
  2182     02FE  1D03               	btfss	3,2
  2183     02FF  2B01               	goto	u891
  2184     0300  2B02               	goto	u890
  2185     0301                     u891:
  2186     0301  2B09               	goto	l1259
  2187     0302                     u890:
  2188     0302                     l1257:
  2189     0302  0871               	movf	fputc@c,w
  2190     0303  120A  118A  20E2  120A  118A  	fcall	_putch
  2191     0308  2B4D               	goto	l750
  2192     0309                     l1259:
  2193     0309  0873               	movf	fputc@fp,w
  2194     030A  3E09               	addlw	9
  2195     030B  0084               	movwf	4
  2196     030C  1383               	bcf	3,7	;select IRP bank0
  2197     030D  0800               	movf	0,w
  2198     030E  00F4               	movwf	??_fputc
  2199     030F  0A84               	incf	4,f
  2200     0310  0800               	movf	0,w
  2201     0311  00F5               	movwf	??_fputc+1
  2202     0312  0874               	movf	??_fputc,w
  2203     0313  0475               	iorwf	??_fputc+1,w
  2204     0314  1903               	btfsc	3,2
  2205     0315  2B17               	goto	u901
  2206     0316  2B18               	goto	u900
  2207     0317                     u901:
  2208     0317  2B36               	goto	l1263
  2209     0318                     u900:
  2210     0318                     l1261:
  2211     0318  0873               	movf	fputc@fp,w
  2212     0319  3E09               	addlw	9
  2213     031A  0084               	movwf	4
  2214     031B  0800               	movf	0,w
  2215     031C  00F4               	movwf	??_fputc
  2216     031D  0A84               	incf	4,f
  2217     031E  0800               	movf	0,w
  2218     031F  00F5               	movwf	??_fputc+1
  2219     0320  0873               	movf	fputc@fp,w
  2220     0321  3E02               	addlw	2
  2221     0322  0084               	movwf	4
  2222     0323  0800               	movf	0,w
  2223     0324  00F6               	movwf	??_fputc+2
  2224     0325  0A84               	incf	4,f
  2225     0326  0800               	movf	0,w
  2226     0327  00F7               	movwf	??_fputc+3
  2227     0328  0877               	movf	??_fputc+3,w
  2228     0329  3A80               	xorlw	128
  2229     032A  00F8               	movwf	??_fputc+4
  2230     032B  0875               	movf	??_fputc+1,w
  2231     032C  3A80               	xorlw	128
  2232     032D  0278               	subwf	??_fputc+4,w
  2233     032E  1D03               	skipz
  2234     032F  2B32               	goto	u915
  2235     0330  0874               	movf	??_fputc,w
  2236     0331  0276               	subwf	??_fputc+2,w
  2237     0332                     u915:
  2238     0332  1803               	skipnc
  2239     0333  2B35               	goto	u911
  2240     0334  2B36               	goto	u910
  2241     0335                     u911:
  2242     0335  2B4D               	goto	l750
  2243     0336                     u910:
  2244     0336                     l1263:
  2245     0336  0873               	movf	fputc@fp,w
  2246     0337  3E02               	addlw	2
  2247     0338  0084               	movwf	4
  2248     0339  1383               	bcf	3,7	;select IRP bank0
  2249     033A  0800               	movf	0,w
  2250     033B  00F4               	movwf	??_fputc
  2251     033C  0873               	movf	fputc@fp,w
  2252     033D  0084               	movwf	4
  2253     033E  0800               	movf	0,w
  2254     033F  0774               	addwf	??_fputc,w
  2255     0340  00F5               	movwf	??_fputc+1
  2256     0341  0875               	movf	??_fputc+1,w
  2257     0342  0084               	movwf	4
  2258     0343  0871               	movf	fputc@c,w
  2259     0344  0080               	movwf	0
  2260     0345  0873               	movf	fputc@fp,w
  2261     0346  3E02               	addlw	2
  2262     0347  0084               	movwf	4
  2263     0348  3001               	movlw	1
  2264     0349  0780               	addwf	0,f
  2265     034A  0A84               	incf	4,f
  2266     034B  1803               	skipnc
  2267     034C  0A80               	incf	0,f
  2268     034D                     l750:
  2269     034D  0008               	return
  2270     034E                     __end_of_fputc:
  2271                           
  2272                           	psect	text6
  2273     00E2                     __ptext6:	
  2274 ;; *************** function _putch *****************
  2275 ;; Defined at:
  2276 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\putch.c"
  2277 ;; Parameters:    Size  Location     Type
  2278 ;;  c               1    wreg     unsigned char 
  2279 ;; Auto vars:     Size  Location     Type
  2280 ;;  c               1    0[COMMON] unsigned char 
  2281 ;; Return value:  Size  Location     Type
  2282 ;;                  1    wreg      void 
  2283 ;; Registers used:
  2284 ;;		wreg
  2285 ;; Tracked objects:
  2286 ;;		On entry : 0/0
  2287 ;;		On exit  : 0/0
  2288 ;;		Unchanged: 0/0
  2289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2290 ;;      Params:         0       0       0       0       0
  2291 ;;      Locals:         0       0       0       0       0
  2292 ;;      Temps:          0       0       0       0       0
  2293 ;;      Totals:         0       0       0       0       0
  2294 ;;Total ram usage:        0 bytes
  2295 ;; Hardware stack levels used: 1
  2296 ;; This function calls:
  2297 ;;		Nothing
  2298 ;; This function is called by:
  2299 ;;		_fputc
  2300 ;; This function uses a non-reentrant model
  2301 ;;
  2302                           
  2303     00E2                     _putch:	
  2304                           ;psect for function _putch
  2305                           
  2306     00E2                     l761:	
  2307                           ;incstack = 0
  2308                           ; Regs used in _putch: [wreg]
  2309                           
  2310     00E2  0008               	return
  2311     00E3                     __end_of_putch:
  2312                           
  2313                           	psect	text7
  2314     0101                     __ptext7:	
  2315 ;; *************** function _abs *****************
  2316 ;; Defined at:
  2317 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\abs.c"
  2318 ;; Parameters:    Size  Location     Type
  2319 ;;  a               2    6[COMMON] int 
  2320 ;; Auto vars:     Size  Location     Type
  2321 ;;		None
  2322 ;; Return value:  Size  Location     Type
  2323 ;;                  2    6[COMMON] int 
  2324 ;; Registers used:
  2325 ;;		wreg, status,2, status,0
  2326 ;; Tracked objects:
  2327 ;;		On entry : 0/0
  2328 ;;		On exit  : 0/0
  2329 ;;		Unchanged: 0/0
  2330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2331 ;;      Params:         2       0       0       0       0
  2332 ;;      Locals:         0       0       0       0       0
  2333 ;;      Temps:          2       0       0       0       0
  2334 ;;      Totals:         4       0       0       0       0
  2335 ;;Total ram usage:        4 bytes
  2336 ;; Hardware stack levels used: 1
  2337 ;; This function calls:
  2338 ;;		Nothing
  2339 ;; This function is called by:
  2340 ;;		_vfpfcnvrt
  2341 ;; This function uses a non-reentrant model
  2342 ;;
  2343                           
  2344     0101                     _abs:	
  2345                           ;psect for function _abs
  2346                           
  2347     0101                     l1267:	
  2348                           ;incstack = 0
  2349                           ; Regs used in _abs: [wreg+status,2+status,0]
  2350                           
  2351     0101  1BF8               	btfsc	abs@a+1,7
  2352     0102  2904               	goto	u921
  2353     0103  2905               	goto	u920
  2354     0104                     u921:
  2355     0104  2906               	goto	l1271
  2356     0105                     u920:
  2357     0105                     l1269:
  2358     0105  2911               	goto	l738
  2359     0106                     l1271:
  2360     0106  0977               	comf	abs@a,w
  2361     0107  00F9               	movwf	??_abs
  2362     0108  0978               	comf	abs@a+1,w
  2363     0109  00FA               	movwf	??_abs+1
  2364     010A  0AF9               	incf	??_abs,f
  2365     010B  1903               	skipnz
  2366     010C  0AFA               	incf	??_abs+1,f
  2367     010D  0879               	movf	??_abs,w
  2368     010E  00F7               	movwf	?_abs
  2369     010F  087A               	movf	??_abs+1,w
  2370     0110  00F8               	movwf	?_abs+1
  2371     0111                     l738:
  2372     0111  0008               	return
  2373     0112                     __end_of_abs:
  2374                           
  2375                           	psect	text8
  2376     034E                     __ptext8:	
  2377 ;; *************** function ___awmod *****************
  2378 ;; Defined at:
  2379 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awmod.c"
  2380 ;; Parameters:    Size  Location     Type
  2381 ;;  divisor         2    0[COMMON] int 
  2382 ;;  dividend        2    2[COMMON] int 
  2383 ;; Auto vars:     Size  Location     Type
  2384 ;;  sign            1    5[COMMON] unsigned char 
  2385 ;;  counter         1    4[COMMON] unsigned char 
  2386 ;; Return value:  Size  Location     Type
  2387 ;;                  2    0[COMMON] int 
  2388 ;; Registers used:
  2389 ;;		wreg, status,2, status,0, btemp+1
  2390 ;; Tracked objects:
  2391 ;;		On entry : 0/0
  2392 ;;		On exit  : 0/0
  2393 ;;		Unchanged: 0/0
  2394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2395 ;;      Params:         4       0       0       0       0
  2396 ;;      Locals:         2       0       0       0       0
  2397 ;;      Temps:          0       0       0       0       0
  2398 ;;      Totals:         6       0       0       0       0
  2399 ;;Total ram usage:        6 bytes
  2400 ;; Hardware stack levels used: 1
  2401 ;; This function calls:
  2402 ;;		Nothing
  2403 ;; This function is called by:
  2404 ;;		_vfpfcnvrt
  2405 ;; This function uses a non-reentrant model
  2406 ;;
  2407                           
  2408     034E                     ___awmod:	
  2409                           ;psect for function ___awmod
  2410                           
  2411     034E                     l1215:	
  2412                           ;incstack = 0
  2413                           ; Regs used in ___awmod: [wreg+status,2+status,0+btemp+1]
  2414                           
  2415     034E  01F6               	clrf	___awmod@sign
  2416     034F                     l1217:
  2417     034F  1FF4               	btfss	___awmod@dividend+1,7
  2418     0350  2B52               	goto	u791
  2419     0351  2B53               	goto	u790
  2420     0352                     u791:
  2421     0352  2B5A               	goto	l1223
  2422     0353                     u790:
  2423     0353                     l1219:
  2424     0353  09F3               	comf	___awmod@dividend,f
  2425     0354  09F4               	comf	___awmod@dividend+1,f
  2426     0355  0AF3               	incf	___awmod@dividend,f
  2427     0356  1903               	skipnz
  2428     0357  0AF4               	incf	___awmod@dividend+1,f
  2429     0358                     l1221:
  2430     0358  01F6               	clrf	___awmod@sign
  2431     0359  0AF6               	incf	___awmod@sign,f
  2432     035A                     l1223:
  2433     035A  1FF2               	btfss	___awmod@divisor+1,7
  2434     035B  2B5D               	goto	u801
  2435     035C  2B5E               	goto	u800
  2436     035D                     u801:
  2437     035D  2B63               	goto	l1227
  2438     035E                     u800:
  2439     035E                     l1225:
  2440     035E  09F1               	comf	___awmod@divisor,f
  2441     035F  09F2               	comf	___awmod@divisor+1,f
  2442     0360  0AF1               	incf	___awmod@divisor,f
  2443     0361  1903               	skipnz
  2444     0362  0AF2               	incf	___awmod@divisor+1,f
  2445     0363                     l1227:
  2446     0363  0871               	movf	___awmod@divisor,w
  2447     0364  0472               	iorwf	___awmod@divisor+1,w
  2448     0365  1903               	btfsc	3,2
  2449     0366  2B68               	goto	u811
  2450     0367  2B69               	goto	u810
  2451     0368                     u811:
  2452     0368  2B98               	goto	l1245
  2453     0369                     u810:
  2454     0369                     l1229:
  2455     0369  01F5               	clrf	___awmod@counter
  2456     036A  0AF5               	incf	___awmod@counter,f
  2457     036B  2B77               	goto	l1235
  2458     036C                     l1231:
  2459     036C  3001               	movlw	1
  2460     036D                     u825:
  2461     036D  1003               	clrc
  2462     036E  0DF1               	rlf	___awmod@divisor,f
  2463     036F  0DF2               	rlf	___awmod@divisor+1,f
  2464     0370  3EFF               	addlw	-1
  2465     0371  1D03               	skipz
  2466     0372  2B6D               	goto	u825
  2467     0373                     l1233:
  2468     0373  3001               	movlw	1
  2469     0374  00FF               	movwf	btemp+1
  2470     0375  087F               	movf	btemp+1,w
  2471     0376  07F5               	addwf	___awmod@counter,f
  2472     0377                     l1235:
  2473     0377  1FF2               	btfss	___awmod@divisor+1,7
  2474     0378  2B7A               	goto	u831
  2475     0379  2B7B               	goto	u830
  2476     037A                     u831:
  2477     037A  2B6C               	goto	l1231
  2478     037B                     u830:
  2479     037B                     l1237:
  2480     037B  0872               	movf	___awmod@divisor+1,w
  2481     037C  0274               	subwf	___awmod@dividend+1,w
  2482     037D  1D03               	skipz
  2483     037E  2B81               	goto	u845
  2484     037F  0871               	movf	___awmod@divisor,w
  2485     0380  0273               	subwf	___awmod@dividend,w
  2486     0381                     u845:
  2487     0381  1C03               	skipc
  2488     0382  2B84               	goto	u841
  2489     0383  2B85               	goto	u840
  2490     0384                     u841:
  2491     0384  2B8B               	goto	l1241
  2492     0385                     u840:
  2493     0385                     l1239:
  2494     0385  0871               	movf	___awmod@divisor,w
  2495     0386  02F3               	subwf	___awmod@dividend,f
  2496     0387  0872               	movf	___awmod@divisor+1,w
  2497     0388  1C03               	skipc
  2498     0389  03F4               	decf	___awmod@dividend+1,f
  2499     038A  02F4               	subwf	___awmod@dividend+1,f
  2500     038B                     l1241:
  2501     038B  3001               	movlw	1
  2502     038C                     u855:
  2503     038C  1003               	clrc
  2504     038D  0CF2               	rrf	___awmod@divisor+1,f
  2505     038E  0CF1               	rrf	___awmod@divisor,f
  2506     038F  3EFF               	addlw	-1
  2507     0390  1D03               	skipz
  2508     0391  2B8C               	goto	u855
  2509     0392                     l1243:
  2510     0392  3001               	movlw	1
  2511     0393  02F5               	subwf	___awmod@counter,f
  2512     0394  1D03               	btfss	3,2
  2513     0395  2B97               	goto	u861
  2514     0396  2B98               	goto	u860
  2515     0397                     u861:
  2516     0397  2B7B               	goto	l1237
  2517     0398                     u860:
  2518     0398                     l1245:
  2519     0398  0876               	movf	___awmod@sign,w
  2520     0399  1903               	btfsc	3,2
  2521     039A  2B9C               	goto	u871
  2522     039B  2B9D               	goto	u870
  2523     039C                     u871:
  2524     039C  2BA2               	goto	l1249
  2525     039D                     u870:
  2526     039D                     l1247:
  2527     039D  09F3               	comf	___awmod@dividend,f
  2528     039E  09F4               	comf	___awmod@dividend+1,f
  2529     039F  0AF3               	incf	___awmod@dividend,f
  2530     03A0  1903               	skipnz
  2531     03A1  0AF4               	incf	___awmod@dividend+1,f
  2532     03A2                     l1249:
  2533     03A2  0874               	movf	___awmod@dividend+1,w
  2534     03A3  00F2               	movwf	?___awmod+1
  2535     03A4  0873               	movf	___awmod@dividend,w
  2536     03A5  00F1               	movwf	?___awmod
  2537     03A6                     l390:
  2538     03A6  0008               	return
  2539     03A7                     __end_of___awmod:
  2540                           
  2541                           	psect	text9
  2542     0407                     __ptext9:	
  2543 ;; *************** function ___awdiv *****************
  2544 ;; Defined at:
  2545 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
  2546 ;; Parameters:    Size  Location     Type
  2547 ;;  divisor         2    0[COMMON] int 
  2548 ;;  dividend        2    2[COMMON] int 
  2549 ;; Auto vars:     Size  Location     Type
  2550 ;;  quotient        2    6[COMMON] int 
  2551 ;;  sign            1    5[COMMON] unsigned char 
  2552 ;;  counter         1    4[COMMON] unsigned char 
  2553 ;; Return value:  Size  Location     Type
  2554 ;;                  2    0[COMMON] int 
  2555 ;; Registers used:
  2556 ;;		wreg, status,2, status,0, btemp+1
  2557 ;; Tracked objects:
  2558 ;;		On entry : 0/0
  2559 ;;		On exit  : 0/0
  2560 ;;		Unchanged: 0/0
  2561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2562 ;;      Params:         4       0       0       0       0
  2563 ;;      Locals:         4       0       0       0       0
  2564 ;;      Temps:          0       0       0       0       0
  2565 ;;      Totals:         8       0       0       0       0
  2566 ;;Total ram usage:        8 bytes
  2567 ;; Hardware stack levels used: 1
  2568 ;; This function calls:
  2569 ;;		Nothing
  2570 ;; This function is called by:
  2571 ;;		_vfpfcnvrt
  2572 ;; This function uses a non-reentrant model
  2573 ;;
  2574                           
  2575     0407                     ___awdiv:	
  2576                           ;psect for function ___awdiv
  2577                           
  2578     0407                     l1171:	
  2579                           ;incstack = 0
  2580                           ; Regs used in ___awdiv: [wreg+status,2+status,0+btemp+1]
  2581                           
  2582     0407  01F6               	clrf	___awdiv@sign
  2583     0408                     l1173:
  2584     0408  1FF2               	btfss	___awdiv@divisor+1,7
  2585     0409  2C0B               	goto	u691
  2586     040A  2C0C               	goto	u690
  2587     040B                     u691:
  2588     040B  2C13               	goto	l1179
  2589     040C                     u690:
  2590     040C                     l1175:
  2591     040C  09F1               	comf	___awdiv@divisor,f
  2592     040D  09F2               	comf	___awdiv@divisor+1,f
  2593     040E  0AF1               	incf	___awdiv@divisor,f
  2594     040F  1903               	skipnz
  2595     0410  0AF2               	incf	___awdiv@divisor+1,f
  2596     0411                     l1177:
  2597     0411  01F6               	clrf	___awdiv@sign
  2598     0412  0AF6               	incf	___awdiv@sign,f
  2599     0413                     l1179:
  2600     0413  1FF4               	btfss	___awdiv@dividend+1,7
  2601     0414  2C16               	goto	u701
  2602     0415  2C17               	goto	u700
  2603     0416                     u701:
  2604     0416  2C20               	goto	l1185
  2605     0417                     u700:
  2606     0417                     l1181:
  2607     0417  09F3               	comf	___awdiv@dividend,f
  2608     0418  09F4               	comf	___awdiv@dividend+1,f
  2609     0419  0AF3               	incf	___awdiv@dividend,f
  2610     041A  1903               	skipnz
  2611     041B  0AF4               	incf	___awdiv@dividend+1,f
  2612     041C                     l1183:
  2613     041C  3001               	movlw	1
  2614     041D  00FF               	movwf	btemp+1
  2615     041E  087F               	movf	btemp+1,w
  2616     041F  06F6               	xorwf	___awdiv@sign,f
  2617     0420                     l1185:
  2618     0420  01F7               	clrf	___awdiv@quotient
  2619     0421  01F8               	clrf	___awdiv@quotient+1
  2620     0422                     l1187:
  2621     0422  0871               	movf	___awdiv@divisor,w
  2622     0423  0472               	iorwf	___awdiv@divisor+1,w
  2623     0424  1903               	btfsc	3,2
  2624     0425  2C27               	goto	u711
  2625     0426  2C28               	goto	u710
  2626     0427                     u711:
  2627     0427  2C5F               	goto	l1207
  2628     0428                     u710:
  2629     0428                     l1189:
  2630     0428  01F5               	clrf	___awdiv@counter
  2631     0429  0AF5               	incf	___awdiv@counter,f
  2632     042A  2C36               	goto	l1195
  2633     042B                     l1191:
  2634     042B  3001               	movlw	1
  2635     042C                     u725:
  2636     042C  1003               	clrc
  2637     042D  0DF1               	rlf	___awdiv@divisor,f
  2638     042E  0DF2               	rlf	___awdiv@divisor+1,f
  2639     042F  3EFF               	addlw	-1
  2640     0430  1D03               	skipz
  2641     0431  2C2C               	goto	u725
  2642     0432                     l1193:
  2643     0432  3001               	movlw	1
  2644     0433  00FF               	movwf	btemp+1
  2645     0434  087F               	movf	btemp+1,w
  2646     0435  07F5               	addwf	___awdiv@counter,f
  2647     0436                     l1195:
  2648     0436  1FF2               	btfss	___awdiv@divisor+1,7
  2649     0437  2C39               	goto	u731
  2650     0438  2C3A               	goto	u730
  2651     0439                     u731:
  2652     0439  2C2B               	goto	l1191
  2653     043A                     u730:
  2654     043A                     l1197:
  2655     043A  3001               	movlw	1
  2656     043B                     u745:
  2657     043B  1003               	clrc
  2658     043C  0DF7               	rlf	___awdiv@quotient,f
  2659     043D  0DF8               	rlf	___awdiv@quotient+1,f
  2660     043E  3EFF               	addlw	-1
  2661     043F  1D03               	skipz
  2662     0440  2C3B               	goto	u745
  2663     0441  0872               	movf	___awdiv@divisor+1,w
  2664     0442  0274               	subwf	___awdiv@dividend+1,w
  2665     0443  1D03               	skipz
  2666     0444  2C47               	goto	u755
  2667     0445  0871               	movf	___awdiv@divisor,w
  2668     0446  0273               	subwf	___awdiv@dividend,w
  2669     0447                     u755:
  2670     0447  1C03               	skipc
  2671     0448  2C4A               	goto	u751
  2672     0449  2C4B               	goto	u750
  2673     044A                     u751:
  2674     044A  2C52               	goto	l1203
  2675     044B                     u750:
  2676     044B                     l1199:
  2677     044B  0871               	movf	___awdiv@divisor,w
  2678     044C  02F3               	subwf	___awdiv@dividend,f
  2679     044D  0872               	movf	___awdiv@divisor+1,w
  2680     044E  1C03               	skipc
  2681     044F  03F4               	decf	___awdiv@dividend+1,f
  2682     0450  02F4               	subwf	___awdiv@dividend+1,f
  2683     0451                     l1201:
  2684     0451  1477               	bsf	___awdiv@quotient,0
  2685     0452                     l1203:
  2686     0452  3001               	movlw	1
  2687     0453                     u765:
  2688     0453  1003               	clrc
  2689     0454  0CF2               	rrf	___awdiv@divisor+1,f
  2690     0455  0CF1               	rrf	___awdiv@divisor,f
  2691     0456  3EFF               	addlw	-1
  2692     0457  1D03               	skipz
  2693     0458  2C53               	goto	u765
  2694     0459                     l1205:
  2695     0459  3001               	movlw	1
  2696     045A  02F5               	subwf	___awdiv@counter,f
  2697     045B  1D03               	btfss	3,2
  2698     045C  2C5E               	goto	u771
  2699     045D  2C5F               	goto	u770
  2700     045E                     u771:
  2701     045E  2C3A               	goto	l1197
  2702     045F                     u770:
  2703     045F                     l1207:
  2704     045F  0876               	movf	___awdiv@sign,w
  2705     0460  1903               	btfsc	3,2
  2706     0461  2C63               	goto	u781
  2707     0462  2C64               	goto	u780
  2708     0463                     u781:
  2709     0463  2C69               	goto	l1211
  2710     0464                     u780:
  2711     0464                     l1209:
  2712     0464  09F7               	comf	___awdiv@quotient,f
  2713     0465  09F8               	comf	___awdiv@quotient+1,f
  2714     0466  0AF7               	incf	___awdiv@quotient,f
  2715     0467  1903               	skipnz
  2716     0468  0AF8               	incf	___awdiv@quotient+1,f
  2717     0469                     l1211:
  2718     0469  0878               	movf	___awdiv@quotient+1,w
  2719     046A  00F2               	movwf	?___awdiv+1
  2720     046B  0877               	movf	___awdiv@quotient,w
  2721     046C  00F1               	movwf	?___awdiv
  2722     046D                     l377:
  2723     046D  0008               	return
  2724     046E                     __end_of___awdiv:
  2725                           
  2726                           	psect	text10
  2727     0270                     __ptext10:	
  2728 ;; *************** function _Lcd_Write_String *****************
  2729 ;; Defined at:
  2730 ;;		line 110 in file "./lcd.h"
  2731 ;; Parameters:    Size  Location     Type
  2732 ;;  a               2    5[COMMON] PTR unsigned char 
  2733 ;;		 -> STR_4(9), STR_3(16), STR_2(17), Lcd_Write_Int@str(16), 
  2734 ;; Auto vars:     Size  Location     Type
  2735 ;;  i               2   10[COMMON] int 
  2736 ;; Return value:  Size  Location     Type
  2737 ;;                  1    wreg      void 
  2738 ;; Registers used:
  2739 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2740 ;; Tracked objects:
  2741 ;;		On entry : 0/0
  2742 ;;		On exit  : 0/0
  2743 ;;		Unchanged: 0/0
  2744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2745 ;;      Params:         2       0       0       0       0
  2746 ;;      Locals:         2       0       0       0       0
  2747 ;;      Temps:          3       0       0       0       0
  2748 ;;      Totals:         7       0       0       0       0
  2749 ;;Total ram usage:        7 bytes
  2750 ;; Hardware stack levels used: 1
  2751 ;; Hardware stack levels required when called: 2
  2752 ;; This function calls:
  2753 ;;		_Lcd_Write_Char
  2754 ;; This function is called by:
  2755 ;;		_Lcd_Write_Int
  2756 ;;		_main
  2757 ;; This function uses a non-reentrant model
  2758 ;;
  2759                           
  2760     0270                     _Lcd_Write_String:	
  2761                           ;psect for function _Lcd_Write_String
  2762                           
  2763     0270                     l1377:	
  2764                           ;incstack = 0
  2765                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2766                           
  2767                           
  2768                           ;./lcd.h: 110: void Lcd_Write_String(char *a);./lcd.h: 111: {;./lcd.h: 112:  int i;;./lc
      +                          d.h: 113:  for(i=0;a[i]!='\0';i++)
  2769     0270  01FB               	clrf	Lcd_Write_String@i
  2770     0271  01FC               	clrf	Lcd_Write_String@i+1
  2771     0272  2A95               	goto	l1383
  2772     0273                     l1379:
  2773                           
  2774                           ;./lcd.h: 114:     Lcd_Write_Char(a[i]);
  2775     0273  087B               	movf	Lcd_Write_String@i,w
  2776     0274  0776               	addwf	Lcd_Write_String@a,w
  2777     0275  00F9               	movwf	??_Lcd_Write_String+1
  2778     0276  0877               	movf	Lcd_Write_String@a+1,w
  2779     0277  00F8               	movwf	??_Lcd_Write_String
  2780     0278  1803               	skipnc
  2781     0279  0AF8               	incf	??_Lcd_Write_String,f
  2782     027A  1FFB               	btfss	Lcd_Write_String@i,7
  2783     027B  2A7D               	goto	u1090
  2784     027C  03F8               	decf	??_Lcd_Write_String,f
  2785     027D                     u1090:
  2786     027D  0878               	movf	??_Lcd_Write_String,w
  2787     027E  00FA               	movwf	??_Lcd_Write_String+2
  2788     027F  087A               	movf	??_Lcd_Write_String+2,w
  2789     0280  1283               	bcf	3,5	;RP0=0, select bank0
  2790     0281  1303               	bcf	3,6	;RP1=0, select bank0
  2791     0282  00FF               	movwf	btemp+1
  2792     0283  0879               	movf	??_Lcd_Write_String+1,w
  2793     0284  0084               	movwf	4
  2794     0285  120A  118A  2004  120A  118A  	fcall	stringtab
  2795     028A  120A  118A  2201  120A  118A  	fcall	_Lcd_Write_Char
  2796     028F                     l1381:
  2797     028F  3001               	movlw	1
  2798     0290  07FB               	addwf	Lcd_Write_String@i,f
  2799     0291  1803               	skipnc
  2800     0292  0AFC               	incf	Lcd_Write_String@i+1,f
  2801     0293  3000               	movlw	0
  2802     0294  07FC               	addwf	Lcd_Write_String@i+1,f
  2803     0295                     l1383:
  2804     0295  087B               	movf	Lcd_Write_String@i,w
  2805     0296  0776               	addwf	Lcd_Write_String@a,w
  2806     0297  00F9               	movwf	??_Lcd_Write_String+1
  2807     0298  0877               	movf	Lcd_Write_String@a+1,w
  2808     0299  00F8               	movwf	??_Lcd_Write_String
  2809     029A  1803               	skipnc
  2810     029B  0AF8               	incf	??_Lcd_Write_String,f
  2811     029C  1FFB               	btfss	Lcd_Write_String@i,7
  2812     029D  2A9F               	goto	u1100
  2813     029E  03F8               	decf	??_Lcd_Write_String,f
  2814     029F                     u1100:
  2815     029F  0878               	movf	??_Lcd_Write_String,w
  2816     02A0  00FA               	movwf	??_Lcd_Write_String+2
  2817     02A1  087A               	movf	??_Lcd_Write_String+2,w
  2818     02A2  1283               	bcf	3,5	;RP0=0, select bank0
  2819     02A3  1303               	bcf	3,6	;RP1=0, select bank0
  2820     02A4  00FF               	movwf	btemp+1
  2821     02A5  0879               	movf	??_Lcd_Write_String+1,w
  2822     02A6  0084               	movwf	4
  2823     02A7  120A  118A  2004  120A  118A  	fcall	stringtab
  2824     02AC  3A00               	xorlw	0
  2825     02AD  1D03               	skipz
  2826     02AE  2AB0               	goto	u1111
  2827     02AF  2AB1               	goto	u1110
  2828     02B0                     u1111:
  2829     02B0  2A73               	goto	l1379
  2830     02B1                     u1110:
  2831     02B1                     l81:
  2832     02B1  0008               	return
  2833     02B2                     __end_of_Lcd_Write_String:
  2834                           
  2835                           	psect	text11
  2836     0201                     __ptext11:	
  2837 ;; *************** function _Lcd_Write_Char *****************
  2838 ;; Defined at:
  2839 ;;		line 94 in file "./lcd.h"
  2840 ;; Parameters:    Size  Location     Type
  2841 ;;  a               1    wreg     unsigned char 
  2842 ;; Auto vars:     Size  Location     Type
  2843 ;;  a               1    4[COMMON] unsigned char 
  2844 ;;  y               1    3[COMMON] unsigned char 
  2845 ;;  temp            1    2[COMMON] unsigned char 
  2846 ;; Return value:  Size  Location     Type
  2847 ;;                  1    wreg      void 
  2848 ;; Registers used:
  2849 ;;		wreg, status,2, status,0, pclath, cstack
  2850 ;; Tracked objects:
  2851 ;;		On entry : 0/0
  2852 ;;		On exit  : 0/0
  2853 ;;		Unchanged: 0/0
  2854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2855 ;;      Params:         0       0       0       0       0
  2856 ;;      Locals:         3       0       0       0       0
  2857 ;;      Temps:          1       0       0       0       0
  2858 ;;      Totals:         4       0       0       0       0
  2859 ;;Total ram usage:        4 bytes
  2860 ;; Hardware stack levels used: 1
  2861 ;; Hardware stack levels required when called: 1
  2862 ;; This function calls:
  2863 ;;		_Lcd_Port
  2864 ;; This function is called by:
  2865 ;;		_Lcd_Write_String
  2866 ;;		_main
  2867 ;; This function uses a non-reentrant model
  2868 ;;
  2869                           
  2870     0201                     _Lcd_Write_Char:	
  2871                           ;psect for function _Lcd_Write_Char
  2872                           
  2873                           
  2874                           ;incstack = 0
  2875                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  2876                           ;Lcd_Write_Char@a stored from wreg
  2877     0201  00F5               	movwf	Lcd_Write_Char@a
  2878     0202                     l1337:
  2879                           
  2880                           ;./lcd.h: 94: void Lcd_Write_Char(char a);./lcd.h: 95: {;./lcd.h: 96:    char temp,y;;./
      +                          lcd.h: 97:    temp = a&0x0F;
  2881     0202  0875               	movf	Lcd_Write_Char@a,w
  2882     0203  390F               	andlw	15
  2883     0204  00F3               	movwf	Lcd_Write_Char@temp
  2884                           
  2885                           ;./lcd.h: 98:    y = a&0xF0;
  2886     0205  0875               	movf	Lcd_Write_Char@a,w
  2887     0206  39F0               	andlw	240
  2888     0207  00F4               	movwf	Lcd_Write_Char@y
  2889     0208                     l1339:
  2890                           
  2891                           ;./lcd.h: 99:    RD2 = 1;
  2892     0208  1283               	bcf	3,5	;RP0=0, select bank0
  2893     0209  1303               	bcf	3,6	;RP1=0, select bank0
  2894     020A  1508               	bsf	8,2	;volatile
  2895     020B                     l1341:
  2896                           
  2897                           ;./lcd.h: 100:    Lcd_Port(y>>4);
  2898     020B  0874               	movf	Lcd_Write_Char@y,w
  2899     020C  00F2               	movwf	??_Lcd_Write_Char
  2900     020D  3004               	movlw	4
  2901     020E                     u1075:
  2902     020E  1003               	clrc
  2903     020F  0CF2               	rrf	??_Lcd_Write_Char,f
  2904     0210  3EFF               	addlw	-1
  2905     0211  1D03               	skipz
  2906     0212  2A0E               	goto	u1075
  2907     0213  0872               	movf	??_Lcd_Write_Char,w
  2908     0214  120A  118A  2197  120A  118A  	fcall	_Lcd_Port
  2909     0219                     l1343:
  2910                           
  2911                           ;./lcd.h: 101:    RD3 = 1;
  2912     0219  1283               	bcf	3,5	;RP0=0, select bank0
  2913     021A  1303               	bcf	3,6	;RP1=0, select bank0
  2914     021B  1588               	bsf	8,3	;volatile
  2915     021C                     l1345:
  2916                           
  2917                           ;./lcd.h: 102:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  2918     021C  301A               	movlw	26
  2919     021D  00F2               	movwf	??_Lcd_Write_Char
  2920     021E                     u1377:
  2921     021E  0BF2               	decfsz	??_Lcd_Write_Char,f
  2922     021F  2A1E               	goto	u1377
  2923     0220  0000               	nop
  2924     0221                     l1347:
  2925                           
  2926                           ;./lcd.h: 103:    RD3 = 0;
  2927     0221  1283               	bcf	3,5	;RP0=0, select bank0
  2928     0222  1303               	bcf	3,6	;RP1=0, select bank0
  2929     0223  1188               	bcf	8,3	;volatile
  2930     0224                     l1349:
  2931                           
  2932                           ;./lcd.h: 104:    Lcd_Port(temp);
  2933     0224  0873               	movf	Lcd_Write_Char@temp,w
  2934     0225  120A  118A  2197  120A  118A  	fcall	_Lcd_Port
  2935     022A                     l1351:
  2936                           
  2937                           ;./lcd.h: 105:    RD3 = 1;
  2938     022A  1283               	bcf	3,5	;RP0=0, select bank0
  2939     022B  1303               	bcf	3,6	;RP1=0, select bank0
  2940     022C  1588               	bsf	8,3	;volatile
  2941     022D                     l1353:
  2942                           
  2943                           ;./lcd.h: 106:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  2944     022D  301A               	movlw	26
  2945     022E  00F2               	movwf	??_Lcd_Write_Char
  2946     022F                     u1387:
  2947     022F  0BF2               	decfsz	??_Lcd_Write_Char,f
  2948     0230  2A2F               	goto	u1387
  2949     0231  0000               	nop
  2950     0232                     l1355:
  2951                           
  2952                           ;./lcd.h: 107:    RD3 = 0;
  2953     0232  1283               	bcf	3,5	;RP0=0, select bank0
  2954     0233  1303               	bcf	3,6	;RP1=0, select bank0
  2955     0234  1188               	bcf	8,3	;volatile
  2956     0235                     l75:
  2957     0235  0008               	return
  2958     0236                     __end_of_Lcd_Write_Char:
  2959                           
  2960                           	psect	text12
  2961     02B2                     __ptext12:	
  2962 ;; *************** function _Lcd_Set_Cursor *****************
  2963 ;; Defined at:
  2964 ;;		line 52 in file "./lcd.h"
  2965 ;; Parameters:    Size  Location     Type
  2966 ;;  a               1    wreg     unsigned char 
  2967 ;;  b               1    4[COMMON] unsigned char 
  2968 ;; Auto vars:     Size  Location     Type
  2969 ;;  a               1    6[COMMON] unsigned char 
  2970 ;;  temp            1    9[COMMON] unsigned char 
  2971 ;;  y               1    8[COMMON] unsigned char 
  2972 ;;  z               1    7[COMMON] unsigned char 
  2973 ;; Return value:  Size  Location     Type
  2974 ;;                  1    wreg      void 
  2975 ;; Registers used:
  2976 ;;		wreg, status,2, status,0, pclath, cstack
  2977 ;; Tracked objects:
  2978 ;;		On entry : 0/0
  2979 ;;		On exit  : 0/0
  2980 ;;		Unchanged: 0/0
  2981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2982 ;;      Params:         1       0       0       0       0
  2983 ;;      Locals:         4       0       0       0       0
  2984 ;;      Temps:          1       0       0       0       0
  2985 ;;      Totals:         6       0       0       0       0
  2986 ;;Total ram usage:        6 bytes
  2987 ;; Hardware stack levels used: 1
  2988 ;; Hardware stack levels required when called: 2
  2989 ;; This function calls:
  2990 ;;		_Lcd_Cmd
  2991 ;; This function is called by:
  2992 ;;		_main
  2993 ;; This function uses a non-reentrant model
  2994 ;;
  2995                           
  2996     02B2                     _Lcd_Set_Cursor:	
  2997                           ;psect for function _Lcd_Set_Cursor
  2998                           
  2999                           
  3000                           ;incstack = 0
  3001                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  3002                           ;Lcd_Set_Cursor@a stored from wreg
  3003     02B2  00F7               	movwf	Lcd_Set_Cursor@a
  3004     02B3                     l1399:
  3005                           
  3006                           ;./lcd.h: 52: void Lcd_Set_Cursor(char a, char b);./lcd.h: 53: {;./lcd.h: 54:  char temp
      +                          ,z,y;;./lcd.h: 55:  if(a == 1)
  3007     02B3  0377               	decf	Lcd_Set_Cursor@a,w
  3008     02B4  1D03               	btfss	3,2
  3009     02B5  2AB7               	goto	u1121
  3010     02B6  2AB8               	goto	u1120
  3011     02B7                     u1121:
  3012     02B7  2AD5               	goto	l1409
  3013     02B8                     u1120:
  3014     02B8                     l1401:
  3015                           
  3016                           ;./lcd.h: 56:  {;./lcd.h: 57:    temp = 0x80 + b - 1;
  3017     02B8  0875               	movf	Lcd_Set_Cursor@b,w
  3018     02B9  3E7F               	addlw	127
  3019     02BA  00FA               	movwf	Lcd_Set_Cursor@temp
  3020                           
  3021                           ;./lcd.h: 58:   z = temp>>4;
  3022     02BB  087A               	movf	Lcd_Set_Cursor@temp,w
  3023     02BC  00F6               	movwf	??_Lcd_Set_Cursor
  3024     02BD  3004               	movlw	4
  3025     02BE                     u1135:
  3026     02BE  1003               	clrc
  3027     02BF  0CF6               	rrf	??_Lcd_Set_Cursor,f
  3028     02C0  3EFF               	addlw	-1
  3029     02C1  1D03               	skipz
  3030     02C2  2ABE               	goto	u1135
  3031     02C3  0876               	movf	??_Lcd_Set_Cursor,w
  3032     02C4  00F8               	movwf	Lcd_Set_Cursor@z
  3033     02C5                     l1403:
  3034                           
  3035                           ;./lcd.h: 59:   y = temp & 0x0F;
  3036     02C5  087A               	movf	Lcd_Set_Cursor@temp,w
  3037     02C6  390F               	andlw	15
  3038     02C7  00F9               	movwf	Lcd_Set_Cursor@y
  3039     02C8                     l1405:
  3040                           
  3041                           ;./lcd.h: 60:   Lcd_Cmd(z);
  3042     02C8  0878               	movf	Lcd_Set_Cursor@z,w
  3043     02C9  120A  118A  213D  120A  118A  	fcall	_Lcd_Cmd
  3044     02CE                     l1407:
  3045                           
  3046                           ;./lcd.h: 61:   Lcd_Cmd(y);
  3047     02CE  0879               	movf	Lcd_Set_Cursor@y,w
  3048     02CF  120A  118A  213D  120A  118A  	fcall	_Lcd_Cmd
  3049                           
  3050                           ;./lcd.h: 62:  }
  3051     02D4  2AF7               	goto	l69
  3052     02D5                     l1409:
  3053     02D5  3002               	movlw	2
  3054     02D6  0677               	xorwf	Lcd_Set_Cursor@a,w
  3055     02D7  1D03               	btfss	3,2
  3056     02D8  2ADA               	goto	u1141
  3057     02D9  2ADB               	goto	u1140
  3058     02DA                     u1141:
  3059     02DA  2AF7               	goto	l69
  3060     02DB                     u1140:
  3061     02DB                     l1411:
  3062                           
  3063                           ;./lcd.h: 64:  {;./lcd.h: 65:   temp = 0xC0 + b - 1;
  3064     02DB  0875               	movf	Lcd_Set_Cursor@b,w
  3065     02DC  3EBF               	addlw	191
  3066     02DD  00FA               	movwf	Lcd_Set_Cursor@temp
  3067                           
  3068                           ;./lcd.h: 66:   z = temp>>4;
  3069     02DE  087A               	movf	Lcd_Set_Cursor@temp,w
  3070     02DF  00F6               	movwf	??_Lcd_Set_Cursor
  3071     02E0  3004               	movlw	4
  3072     02E1                     u1155:
  3073     02E1  1003               	clrc
  3074     02E2  0CF6               	rrf	??_Lcd_Set_Cursor,f
  3075     02E3  3EFF               	addlw	-1
  3076     02E4  1D03               	skipz
  3077     02E5  2AE1               	goto	u1155
  3078     02E6  0876               	movf	??_Lcd_Set_Cursor,w
  3079     02E7  00F8               	movwf	Lcd_Set_Cursor@z
  3080     02E8                     l1413:
  3081                           
  3082                           ;./lcd.h: 67:   y = temp & 0x0F;
  3083     02E8  087A               	movf	Lcd_Set_Cursor@temp,w
  3084     02E9  390F               	andlw	15
  3085     02EA  00F9               	movwf	Lcd_Set_Cursor@y
  3086     02EB                     l1415:
  3087                           
  3088                           ;./lcd.h: 68:   Lcd_Cmd(z);
  3089     02EB  0878               	movf	Lcd_Set_Cursor@z,w
  3090     02EC  120A  118A  213D  120A  118A  	fcall	_Lcd_Cmd
  3091     02F1                     l1417:
  3092                           
  3093                           ;./lcd.h: 69:   Lcd_Cmd(y);
  3094     02F1  0879               	movf	Lcd_Set_Cursor@y,w
  3095     02F2  120A  118A  213D  120A  118A  	fcall	_Lcd_Cmd
  3096     02F7                     l69:
  3097     02F7  0008               	return
  3098     02F8                     __end_of_Lcd_Set_Cursor:
  3099                           
  3100                           	psect	text13
  3101     03A7                     __ptext13:	
  3102 ;; *************** function _Lcd_Init *****************
  3103 ;; Defined at:
  3104 ;;		line 73 in file "./lcd.h"
  3105 ;; Parameters:    Size  Location     Type
  3106 ;;		None
  3107 ;; Auto vars:     Size  Location     Type
  3108 ;;		None
  3109 ;; Return value:  Size  Location     Type
  3110 ;;                  1    wreg      void 
  3111 ;; Registers used:
  3112 ;;		wreg, status,2, status,0, pclath, cstack
  3113 ;; Tracked objects:
  3114 ;;		On entry : 0/0
  3115 ;;		On exit  : 0/0
  3116 ;;		Unchanged: 0/0
  3117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3118 ;;      Params:         0       0       0       0       0
  3119 ;;      Locals:         0       0       0       0       0
  3120 ;;      Temps:          2       0       0       0       0
  3121 ;;      Totals:         2       0       0       0       0
  3122 ;;Total ram usage:        2 bytes
  3123 ;; Hardware stack levels used: 1
  3124 ;; Hardware stack levels required when called: 2
  3125 ;; This function calls:
  3126 ;;		_Lcd_Cmd
  3127 ;;		_Lcd_Port
  3128 ;; This function is called by:
  3129 ;;		_main
  3130 ;; This function uses a non-reentrant model
  3131 ;;
  3132                           
  3133     03A7                     _Lcd_Init:	
  3134                           ;psect for function _Lcd_Init
  3135                           
  3136     03A7                     l1419:	
  3137                           ;incstack = 0
  3138                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  3139                           
  3140                           
  3141                           ;./lcd.h: 75:     TRISD = 0x00;
  3142     03A7  1683               	bsf	3,5	;RP0=1, select bank1
  3143     03A8  1303               	bcf	3,6	;RP1=0, select bank1
  3144     03A9  0188               	clrf	8	;volatile
  3145     03AA                     l1421:
  3146                           
  3147                           ;./lcd.h: 77:     Lcd_Port(0x00);
  3148     03AA  3000               	movlw	0
  3149     03AB  120A  118A  2197  120A  118A  	fcall	_Lcd_Port
  3150     03B0                     l1423:
  3151                           
  3152                           ;./lcd.h: 78:    _delay((unsigned long)((20)*(8000000/4000.0)));
  3153     03B0  3034               	movlw	52
  3154     03B1  00F6               	movwf	??_Lcd_Init+1
  3155     03B2  30F1               	movlw	241
  3156     03B3  00F5               	movwf	??_Lcd_Init
  3157     03B4                     u1397:
  3158     03B4  0BF5               	decfsz	??_Lcd_Init,f
  3159     03B5  2BB4               	goto	u1397
  3160     03B6  0BF6               	decfsz	??_Lcd_Init+1,f
  3161     03B7  2BB4               	goto	u1397
  3162     03B8  2BB9               	nop2
  3163     03B9                     l1425:
  3164                           
  3165                           ;./lcd.h: 79:   Lcd_Cmd(0x03);
  3166     03B9  3003               	movlw	3
  3167     03BA  120A  118A  213D  120A  118A  	fcall	_Lcd_Cmd
  3168     03BF                     l1427:
  3169                           
  3170                           ;./lcd.h: 80:  _delay((unsigned long)((5)*(8000000/4000.0)));
  3171     03BF  300D               	movlw	13
  3172     03C0  00F6               	movwf	??_Lcd_Init+1
  3173     03C1  30FB               	movlw	251
  3174     03C2  00F5               	movwf	??_Lcd_Init
  3175     03C3                     u1407:
  3176     03C3  0BF5               	decfsz	??_Lcd_Init,f
  3177     03C4  2BC3               	goto	u1407
  3178     03C5  0BF6               	decfsz	??_Lcd_Init+1,f
  3179     03C6  2BC3               	goto	u1407
  3180     03C7  2BC8               	nop2
  3181     03C8                     l1429:
  3182                           
  3183                           ;./lcd.h: 81:   Lcd_Cmd(0x03);
  3184     03C8  3003               	movlw	3
  3185     03C9  120A  118A  213D  120A  118A  	fcall	_Lcd_Cmd
  3186     03CE                     l1431:
  3187                           
  3188                           ;./lcd.h: 82:  _delay((unsigned long)((11)*(8000000/4000.0)));
  3189     03CE  301D               	movlw	29
  3190     03CF  00F6               	movwf	??_Lcd_Init+1
  3191     03D0  3091               	movlw	145
  3192     03D1  00F5               	movwf	??_Lcd_Init
  3193     03D2                     u1417:
  3194     03D2  0BF5               	decfsz	??_Lcd_Init,f
  3195     03D3  2BD2               	goto	u1417
  3196     03D4  0BF6               	decfsz	??_Lcd_Init+1,f
  3197     03D5  2BD2               	goto	u1417
  3198     03D6                     l1433:
  3199                           
  3200                           ;./lcd.h: 83:   Lcd_Cmd(0x03);
  3201     03D6  3003               	movlw	3
  3202     03D7  120A  118A  213D  120A  118A  	fcall	_Lcd_Cmd
  3203     03DC                     l1435:
  3204                           
  3205                           ;./lcd.h: 85:   Lcd_Cmd(0x02);
  3206     03DC  3002               	movlw	2
  3207     03DD  120A  118A  213D  120A  118A  	fcall	_Lcd_Cmd
  3208     03E2                     l1437:
  3209                           
  3210                           ;./lcd.h: 86:   Lcd_Cmd(0x02);
  3211     03E2  3002               	movlw	2
  3212     03E3  120A  118A  213D  120A  118A  	fcall	_Lcd_Cmd
  3213     03E8                     l1439:
  3214                           
  3215                           ;./lcd.h: 87:   Lcd_Cmd(0x08);
  3216     03E8  3008               	movlw	8
  3217     03E9  120A  118A  213D  120A  118A  	fcall	_Lcd_Cmd
  3218     03EE                     l1441:
  3219                           
  3220                           ;./lcd.h: 88:   Lcd_Cmd(0x00);
  3221     03EE  3000               	movlw	0
  3222     03EF  120A  118A  213D  120A  118A  	fcall	_Lcd_Cmd
  3223     03F4                     l1443:
  3224                           
  3225                           ;./lcd.h: 89:   Lcd_Cmd(0x0C);
  3226     03F4  300C               	movlw	12
  3227     03F5  120A  118A  213D  120A  118A  	fcall	_Lcd_Cmd
  3228     03FA                     l1445:
  3229                           
  3230                           ;./lcd.h: 90:   Lcd_Cmd(0x00);
  3231     03FA  3000               	movlw	0
  3232     03FB  120A  118A  213D  120A  118A  	fcall	_Lcd_Cmd
  3233     0400                     l1447:
  3234                           
  3235                           ;./lcd.h: 91:   Lcd_Cmd(0x06);
  3236     0400  3006               	movlw	6
  3237     0401  120A  118A  213D  120A  118A  	fcall	_Lcd_Cmd
  3238     0406                     l72:
  3239     0406  0008               	return
  3240     0407                     __end_of_Lcd_Init:
  3241                           
  3242                           	psect	text14
  3243     00F4                     __ptext14:	
  3244 ;; *************** function _Lcd_Clear *****************
  3245 ;; Defined at:
  3246 ;;		line 46 in file "./lcd.h"
  3247 ;; Parameters:    Size  Location     Type
  3248 ;;		None
  3249 ;; Auto vars:     Size  Location     Type
  3250 ;;		None
  3251 ;; Return value:  Size  Location     Type
  3252 ;;                  1    wreg      void 
  3253 ;; Registers used:
  3254 ;;		wreg, status,2, status,0, pclath, cstack
  3255 ;; Tracked objects:
  3256 ;;		On entry : 0/0
  3257 ;;		On exit  : 0/0
  3258 ;;		Unchanged: 0/0
  3259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3260 ;;      Params:         0       0       0       0       0
  3261 ;;      Locals:         0       0       0       0       0
  3262 ;;      Temps:          0       0       0       0       0
  3263 ;;      Totals:         0       0       0       0       0
  3264 ;;Total ram usage:        0 bytes
  3265 ;; Hardware stack levels used: 1
  3266 ;; Hardware stack levels required when called: 2
  3267 ;; This function calls:
  3268 ;;		_Lcd_Cmd
  3269 ;; This function is called by:
  3270 ;;		_main
  3271 ;; This function uses a non-reentrant model
  3272 ;;
  3273                           
  3274     00F4                     _Lcd_Clear:	
  3275                           ;psect for function _Lcd_Clear
  3276                           
  3277     00F4                     l1397:	
  3278                           ;incstack = 0
  3279                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  3280                           
  3281                           
  3282                           ;./lcd.h: 48:  Lcd_Cmd(0);
  3283     00F4  3000               	movlw	0
  3284     00F5  120A  118A  213D  120A  118A  	fcall	_Lcd_Cmd
  3285                           
  3286                           ;./lcd.h: 49:  Lcd_Cmd(1);
  3287     00FA  3001               	movlw	1
  3288     00FB  120A  118A  213D  120A  118A  	fcall	_Lcd_Cmd
  3289     0100                     l63:
  3290     0100  0008               	return
  3291     0101                     __end_of_Lcd_Clear:
  3292                           
  3293                           	psect	text15
  3294     013D                     __ptext15:	
  3295 ;; *************** function _Lcd_Cmd *****************
  3296 ;; Defined at:
  3297 ;;		line 37 in file "./lcd.h"
  3298 ;; Parameters:    Size  Location     Type
  3299 ;;  a               1    wreg     unsigned char 
  3300 ;; Auto vars:     Size  Location     Type
  3301 ;;  a               1    3[COMMON] unsigned char 
  3302 ;; Return value:  Size  Location     Type
  3303 ;;                  1    wreg      void 
  3304 ;; Registers used:
  3305 ;;		wreg, status,2, status,0, pclath, cstack
  3306 ;; Tracked objects:
  3307 ;;		On entry : 0/0
  3308 ;;		On exit  : 0/0
  3309 ;;		Unchanged: 0/0
  3310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3311 ;;      Params:         0       0       0       0       0
  3312 ;;      Locals:         1       0       0       0       0
  3313 ;;      Temps:          2       0       0       0       0
  3314 ;;      Totals:         3       0       0       0       0
  3315 ;;Total ram usage:        3 bytes
  3316 ;; Hardware stack levels used: 1
  3317 ;; Hardware stack levels required when called: 1
  3318 ;; This function calls:
  3319 ;;		_Lcd_Port
  3320 ;; This function is called by:
  3321 ;;		_Lcd_Clear
  3322 ;;		_Lcd_Set_Cursor
  3323 ;;		_Lcd_Init
  3324 ;;		_Lcd_Shift_Right
  3325 ;;		_Lcd_Shift_Left
  3326 ;; This function uses a non-reentrant model
  3327 ;;
  3328                           
  3329     013D                     _Lcd_Cmd:	
  3330                           ;psect for function _Lcd_Cmd
  3331                           
  3332                           
  3333                           ;incstack = 0
  3334                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  3335                           ;Lcd_Cmd@a stored from wreg
  3336     013D  00F4               	movwf	Lcd_Cmd@a
  3337     013E                     l1367:
  3338                           
  3339                           ;./lcd.h: 37: void Lcd_Cmd(char a);./lcd.h: 38: {;./lcd.h: 39:  RD2 = 0;
  3340     013E  1283               	bcf	3,5	;RP0=0, select bank0
  3341     013F  1303               	bcf	3,6	;RP1=0, select bank0
  3342     0140  1108               	bcf	8,2	;volatile
  3343     0141                     l1369:
  3344                           
  3345                           ;./lcd.h: 40:  Lcd_Port(a);
  3346     0141  0874               	movf	Lcd_Cmd@a,w
  3347     0142  120A  118A  2197  120A  118A  	fcall	_Lcd_Port
  3348     0147                     l1371:
  3349                           
  3350                           ;./lcd.h: 41:  RD3 = 1;
  3351     0147  1283               	bcf	3,5	;RP0=0, select bank0
  3352     0148  1303               	bcf	3,6	;RP1=0, select bank0
  3353     0149  1588               	bsf	8,3	;volatile
  3354     014A                     l1373:
  3355                           
  3356                           ;./lcd.h: 42:         _delay((unsigned long)((4)*(8000000/4000.0)));
  3357     014A  300B               	movlw	11
  3358     014B  00F3               	movwf	??_Lcd_Cmd+1
  3359     014C  3062               	movlw	98
  3360     014D  00F2               	movwf	??_Lcd_Cmd
  3361     014E                     u1427:
  3362     014E  0BF2               	decfsz	??_Lcd_Cmd,f
  3363     014F  294E               	goto	u1427
  3364     0150  0BF3               	decfsz	??_Lcd_Cmd+1,f
  3365     0151  294E               	goto	u1427
  3366     0152  0000               	nop
  3367     0153                     l1375:
  3368                           
  3369                           ;./lcd.h: 43:         RD3 = 0;
  3370     0153  1283               	bcf	3,5	;RP0=0, select bank0
  3371     0154  1303               	bcf	3,6	;RP1=0, select bank0
  3372     0155  1188               	bcf	8,3	;volatile
  3373     0156                     l60:
  3374     0156  0008               	return
  3375     0157                     __end_of_Lcd_Cmd:
  3376                           
  3377                           	psect	text16
  3378     0197                     __ptext16:	
  3379 ;; *************** function _Lcd_Port *****************
  3380 ;; Defined at:
  3381 ;;		line 15 in file "./lcd.h"
  3382 ;; Parameters:    Size  Location     Type
  3383 ;;  a               1    wreg     unsigned char 
  3384 ;; Auto vars:     Size  Location     Type
  3385 ;;  a               1    0[COMMON] unsigned char 
  3386 ;; Return value:  Size  Location     Type
  3387 ;;                  1    wreg      void 
  3388 ;; Registers used:
  3389 ;;		wreg
  3390 ;; Tracked objects:
  3391 ;;		On entry : 0/0
  3392 ;;		On exit  : 0/0
  3393 ;;		Unchanged: 0/0
  3394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3395 ;;      Params:         0       0       0       0       0
  3396 ;;      Locals:         1       0       0       0       0
  3397 ;;      Temps:          0       0       0       0       0
  3398 ;;      Totals:         1       0       0       0       0
  3399 ;;Total ram usage:        1 bytes
  3400 ;; Hardware stack levels used: 1
  3401 ;; This function calls:
  3402 ;;		Nothing
  3403 ;; This function is called by:
  3404 ;;		_Lcd_Cmd
  3405 ;;		_Lcd_Init
  3406 ;;		_Lcd_Write_Char
  3407 ;; This function uses a non-reentrant model
  3408 ;;
  3409                           
  3410     0197                     _Lcd_Port:	
  3411                           ;psect for function _Lcd_Port
  3412                           
  3413                           
  3414                           ;incstack = 0
  3415                           ; Regs used in _Lcd_Port: [wreg]
  3416                           ;Lcd_Port@a stored from wreg
  3417     0197  00F1               	movwf	Lcd_Port@a
  3418     0198                     l1275:
  3419                           
  3420                           ;./lcd.h: 15: void Lcd_Port(char a);./lcd.h: 16: {;./lcd.h: 17:  if(a & 1)
  3421     0198  1C71               	btfss	Lcd_Port@a,0
  3422     0199  299B               	goto	u931
  3423     019A  299C               	goto	u930
  3424     019B                     u931:
  3425     019B  29A0               	goto	l49
  3426     019C                     u930:
  3427     019C                     l1277:
  3428                           
  3429                           ;./lcd.h: 18:   RD4 = 1;
  3430     019C  1283               	bcf	3,5	;RP0=0, select bank0
  3431     019D  1303               	bcf	3,6	;RP1=0, select bank0
  3432     019E  1608               	bsf	8,4	;volatile
  3433     019F  29A3               	goto	l50
  3434     01A0                     l49:	
  3435                           ;./lcd.h: 19:  else
  3436                           
  3437                           
  3438                           ;./lcd.h: 20:   RD4 = 0;
  3439     01A0  1283               	bcf	3,5	;RP0=0, select bank0
  3440     01A1  1303               	bcf	3,6	;RP1=0, select bank0
  3441     01A2  1208               	bcf	8,4	;volatile
  3442     01A3                     l50:
  3443                           
  3444                           ;./lcd.h: 22:  if(a & 2)
  3445     01A3  1CF1               	btfss	Lcd_Port@a,1
  3446     01A4  29A6               	goto	u941
  3447     01A5  29A7               	goto	u940
  3448     01A6                     u941:
  3449     01A6  29A9               	goto	l51
  3450     01A7                     u940:
  3451     01A7                     l1279:
  3452                           
  3453                           ;./lcd.h: 23:   RD5 = 1;
  3454     01A7  1688               	bsf	8,5	;volatile
  3455     01A8  29AA               	goto	l52
  3456     01A9                     l51:	
  3457                           ;./lcd.h: 24:  else
  3458                           
  3459                           
  3460                           ;./lcd.h: 25:   RD5 = 0;
  3461     01A9  1288               	bcf	8,5	;volatile
  3462     01AA                     l52:
  3463                           
  3464                           ;./lcd.h: 27:  if(a & 4)
  3465     01AA  1D71               	btfss	Lcd_Port@a,2
  3466     01AB  29AD               	goto	u951
  3467     01AC  29AE               	goto	u950
  3468     01AD                     u951:
  3469     01AD  29B0               	goto	l53
  3470     01AE                     u950:
  3471     01AE                     l1281:
  3472                           
  3473                           ;./lcd.h: 28:   RD6 = 1;
  3474     01AE  1708               	bsf	8,6	;volatile
  3475     01AF  29B1               	goto	l54
  3476     01B0                     l53:	
  3477                           ;./lcd.h: 29:  else
  3478                           
  3479                           
  3480                           ;./lcd.h: 30:   RD6 = 0;
  3481     01B0  1308               	bcf	8,6	;volatile
  3482     01B1                     l54:
  3483                           
  3484                           ;./lcd.h: 32:  if(a & 8)
  3485     01B1  1DF1               	btfss	Lcd_Port@a,3
  3486     01B2  29B4               	goto	u961
  3487     01B3  29B5               	goto	u960
  3488     01B4                     u961:
  3489     01B4  29B7               	goto	l55
  3490     01B5                     u960:
  3491     01B5                     l1283:
  3492                           
  3493                           ;./lcd.h: 33:   RD7 = 1;
  3494     01B5  1788               	bsf	8,7	;volatile
  3495     01B6  29B8               	goto	l57
  3496     01B7                     l55:	
  3497                           ;./lcd.h: 34:  else
  3498                           
  3499                           
  3500                           ;./lcd.h: 35:   RD7 = 0;
  3501     01B7  1388               	bcf	8,7	;volatile
  3502     01B8                     l57:
  3503     01B8  0008               	return
  3504     01B9                     __end_of_Lcd_Port:
  3505                           
  3506                           	psect	text17
  3507     0236                     __ptext17:	
  3508 ;; *************** function _ADC_Read *****************
  3509 ;; Defined at:
  3510 ;;		line 38 in file "./analog.h"
  3511 ;; Parameters:    Size  Location     Type
  3512 ;;  ANC             2    0[COMMON] int 
  3513 ;; Auto vars:     Size  Location     Type
  3514 ;;		None
  3515 ;; Return value:  Size  Location     Type
  3516 ;;                  2    0[COMMON] int 
  3517 ;; Registers used:
  3518 ;;		wreg, status,2, status,0, btemp+1
  3519 ;; Tracked objects:
  3520 ;;		On entry : 0/0
  3521 ;;		On exit  : 0/0
  3522 ;;		Unchanged: 0/0
  3523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3524 ;;      Params:         2       0       0       0       0
  3525 ;;      Locals:         0       0       0       0       0
  3526 ;;      Temps:          1       0       0       0       0
  3527 ;;      Totals:         3       0       0       0       0
  3528 ;;Total ram usage:        3 bytes
  3529 ;; Hardware stack levels used: 1
  3530 ;; This function calls:
  3531 ;;		Nothing
  3532 ;; This function is called by:
  3533 ;;		_main
  3534 ;; This function uses a non-reentrant model
  3535 ;;
  3536                           
  3537     0236                     _ADC_Read:	
  3538                           ;psect for function _ADC_Read
  3539                           
  3540     0236                     l1453:	
  3541                           ;incstack = 0
  3542                           ; Regs used in _ADC_Read: [wreg+status,2+status,0+btemp+1]
  3543                           
  3544                           
  3545                           ;./analog.h: 38: int ADC_Read(int ANC);./analog.h: 39: {;./analog.h: 40:     if(ANC<0 ||
      +                           ANC>7)
  3546     0236  1BF2               	btfsc	ADC_Read@ANC+1,7
  3547     0237  2A39               	goto	u1161
  3548     0238  2A3A               	goto	u1160
  3549     0239                     u1161:
  3550     0239  2A47               	goto	l1457
  3551     023A                     u1160:
  3552     023A                     l1455:
  3553     023A  0872               	movf	ADC_Read@ANC+1,w
  3554     023B  3A80               	xorlw	128
  3555     023C  00FF               	movwf	btemp+1
  3556     023D  3080               	movlw	128
  3557     023E  027F               	subwf	btemp+1,w
  3558     023F  1D03               	skipz
  3559     0240  2A43               	goto	u1175
  3560     0241  3008               	movlw	8
  3561     0242  0271               	subwf	ADC_Read@ANC,w
  3562     0243                     u1175:
  3563     0243  1C03               	skipc
  3564     0244  2A46               	goto	u1171
  3565     0245  2A47               	goto	u1170
  3566     0246                     u1171:
  3567     0246  2A4A               	goto	l1461
  3568     0247                     u1170:
  3569     0247                     l1457:
  3570                           
  3571                           ;./analog.h: 41:     { return 0;}
  3572     0247  01F1               	clrf	?_ADC_Read
  3573     0248  01F2               	clrf	?_ADC_Read+1
  3574     0249  2A6F               	goto	l105
  3575     024A                     l1461:
  3576                           
  3577                           ;./analog.h: 42:     ADCON0 &= 0b11000101;
  3578     024A  30C5               	movlw	197
  3579     024B  00FF               	movwf	btemp+1
  3580     024C  087F               	movf	btemp+1,w
  3581     024D  1283               	bcf	3,5	;RP0=0, select bank0
  3582     024E  1303               	bcf	3,6	;RP1=0, select bank0
  3583     024F  059F               	andwf	31,f	;volatile
  3584                           
  3585                           ;./analog.h: 43:     ADCON0 |= ANC<<3;
  3586     0250  0871               	movf	ADC_Read@ANC,w	;volatile
  3587     0251  00F3               	movwf	??_ADC_Read
  3588     0252  3002               	movlw	2
  3589     0253                     u1185:
  3590     0253  1003               	clrc
  3591     0254  0DF3               	rlf	??_ADC_Read,f
  3592     0255  3EFF               	addlw	-1
  3593     0256  1D03               	skipz
  3594     0257  2A53               	goto	u1185
  3595     0258  1003               	clrc
  3596     0259  0D73               	rlf	??_ADC_Read,w
  3597     025A  00FF               	movwf	btemp+1
  3598     025B  087F               	movf	btemp+1,w
  3599     025C  049F               	iorwf	31,f	;volatile
  3600     025D                     l1463:
  3601                           
  3602                           ;./analog.h: 45:     _delay((unsigned long)((30)*(8000000/4000000.0)));
  3603     025D  3013               	movlw	19
  3604     025E  00F3               	movwf	??_ADC_Read
  3605     025F                     u1437:
  3606     025F  0BF3               	decfsz	??_ADC_Read,f
  3607     0260  2A5F               	goto	u1437
  3608     0261  2A62               	nop2
  3609     0262                     l1465:
  3610                           
  3611                           ;./analog.h: 46:     GO_DONE = 1;
  3612     0262  1283               	bcf	3,5	;RP0=0, select bank0
  3613     0263  1303               	bcf	3,6	;RP1=0, select bank0
  3614     0264  151F               	bsf	31,2	;volatile
  3615     0265                     l106:	
  3616                           ;./analog.h: 47:     while(ADCON0bits.GO_DONE);
  3617                           
  3618     0265  191F               	btfsc	31,2	;volatile
  3619     0266  2A68               	goto	u1191
  3620     0267  2A69               	goto	u1190
  3621     0268                     u1191:
  3622     0268  2A65               	goto	l106
  3623     0269                     u1190:
  3624     0269                     l1467:
  3625                           
  3626                           ;./analog.h: 49:     return ((ADRESH << 8) + ADRESL);
  3627     0269  081E               	movf	30,w	;volatile
  3628     026A  00F2               	movwf	?_ADC_Read+1
  3629     026B  1683               	bsf	3,5	;RP0=1, select bank1
  3630     026C  1303               	bcf	3,6	;RP1=0, select bank1
  3631     026D  081E               	movf	30,w	;volatile
  3632     026E  00F1               	movwf	?_ADC_Read
  3633     026F                     l105:
  3634     026F  0008               	return
  3635     0270                     __end_of_ADC_Read:
  3636                           
  3637                           	psect	text18
  3638     00EB                     __ptext18:	
  3639 ;; *************** function _ADC_Init *****************
  3640 ;; Defined at:
  3641 ;;		line 15 in file "./analog.h"
  3642 ;; Parameters:    Size  Location     Type
  3643 ;;		None
  3644 ;; Auto vars:     Size  Location     Type
  3645 ;;		None
  3646 ;; Return value:  Size  Location     Type
  3647 ;;                  1    wreg      void 
  3648 ;; Registers used:
  3649 ;;		wreg
  3650 ;; Tracked objects:
  3651 ;;		On entry : 0/0
  3652 ;;		On exit  : 0/0
  3653 ;;		Unchanged: 0/0
  3654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3655 ;;      Params:         0       0       0       0       0
  3656 ;;      Locals:         0       0       0       0       0
  3657 ;;      Temps:          0       0       0       0       0
  3658 ;;      Totals:         0       0       0       0       0
  3659 ;;Total ram usage:        0 bytes
  3660 ;; Hardware stack levels used: 1
  3661 ;; This function calls:
  3662 ;;		Nothing
  3663 ;; This function is called by:
  3664 ;;		_main
  3665 ;; This function uses a non-reentrant model
  3666 ;;
  3667                           
  3668     00EB                     _ADC_Init:	
  3669                           ;psect for function _ADC_Init
  3670                           
  3671     00EB                     l1451:	
  3672                           ;incstack = 0
  3673                           ; Regs used in _ADC_Init: [wreg]
  3674                           
  3675                           
  3676                           ;./analog.h: 19:     ADCON0 = 0x41;
  3677     00EB  3041               	movlw	65
  3678     00EC  1283               	bcf	3,5	;RP0=0, select bank0
  3679     00ED  1303               	bcf	3,6	;RP1=0, select bank0
  3680     00EE  009F               	movwf	31	;volatile
  3681                           
  3682                           ;./analog.h: 20:     ADCON1 = 0x80;
  3683     00EF  3080               	movlw	128
  3684     00F0  1683               	bsf	3,5	;RP0=1, select bank1
  3685     00F1  1303               	bcf	3,6	;RP1=0, select bank1
  3686     00F2  009F               	movwf	31	;volatile
  3687     00F3                     l99:
  3688     00F3  0008               	return
  3689     00F4                     __end_of_ADC_Init:
  3690     007E                     btemp	set	126	;btemp
  3691     007E                     wtemp0	set	126
  3692                           
  3693                           	psect	config
  3694                           
  3695                           ;Config register CONFIG @ 0x2007
  3696                           ;	Oscillator Selection bits
  3697                           ;	FOSC = HS, HS oscillator
  3698                           ;	Watchdog Timer Enable bit
  3699                           ;	WDTE = OFF, WDT disabled
  3700                           ;	Power-up Timer Enable bit
  3701                           ;	PWRTE = OFF, PWRT disabled
  3702                           ;	Brown-out Reset Enable bit
  3703                           ;	BOREN = ON, BOR enabled
  3704                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  3705                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  3706                           ;	Data EEPROM Memory Code Protection bit
  3707                           ;	CPD = OFF, Data EEPROM code protection off
  3708                           ;	Flash Program Memory Write Enable bits
  3709                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  3710                           ;	In-Circuit Debugger Mode bit
  3711                           ;	DEBUG = 0x1, unprogrammed default
  3712                           ;	Flash Program Memory Code Protection bit
  3713                           ;	CP = OFF, Code protection off
  3714     2007                     	org	8199
  3715     2007  3F7A               	dw	16250

Data Sizes:
    Strings     45
    Constant    0
    Data        72
    BSS         37
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           13     13      13
    BANK0            80     53      58
    BANK1            80      0      68
    BANK3            85     84      84
    BANK2            96      0      36

Pointer List with Targets:

    f$.$buffer	PTR unsigned char  size(1) Largest target is 0

    f$.$source	PTR const unsigned char  size(1) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp$.$buffer	PTR unsigned char  size(1) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(1) Largest target is 0

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 17
		 -> Lcd_Write_Int@str(BANK0[16]), STR_2(CODE[17]), STR_3(CODE[16]), STR_4(CODE[9]), 

    main@F1529$port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), PORTB(SFR0[1]), PORTC(SFR0[1]), PORTE(SFR0[1]), 

    main@F1531$port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), PORTB(SFR0[1]), PORTC(SFR0[1]), PORTE(SFR0[1]), 

    main@led$port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), PORTB(SFR0[1]), PORTC(SFR0[1]), PORTE(SFR0[1]), 

    S611$buffer	PTR unsigned char  size(1) Largest target is 0

    S611$source	PTR const unsigned char  size(1) Largest target is 0

    S97_Pin$port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), PORTB(SFR0[1]), PORTC(SFR0[1]), PORTE(SFR0[1]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_1(CODE[3]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 16
		 -> Lcd_Write_Int@str(BANK0[16]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 3
		 -> STR_1(CODE[3]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(BANK0[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 3
		 -> STR_1(CODE[3]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_1(CODE[3]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(BANK0[11]), 


Critical Paths under _main in COMMON

    _Lcd_Write_Int->_sprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_abs
    _abs->___awmod
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    _main->_Lcd_Write_Int
    _Lcd_Write_Int->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                91    91      0    6949
                                             48 BANK0      5     5      0
                                              0 BANK3     84    84      0
                           _ADC_Init
                           _ADC_Read
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                      _Lcd_Write_Int
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_Int                                       18    16      2    4182
                                             30 BANK0     18    16      2
                   _Lcd_Write_String
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             19    16      3    3158
                                             12 COMMON     1     1      0
                                             14 BANK0     16    13      3
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             4     2      2    2850
                                             10 BANK0      4     2      2
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           12    10      2    2543
                                             10 COMMON     2     0      2
                                              0 BANK0     10    10      0
                            ___awdiv
                            ___awmod
                                _abs
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                8     5      3     782
                                              0 COMMON     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                              6 COMMON     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4     448
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4     452
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2     572
                                              5 COMMON     7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       6     5      1     836
                                              4 COMMON     6     5      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_Read                                             3     1      2     218
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (1) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Init
   _ADC_Read
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
   _Lcd_Write_Char
     _Lcd_Port
   _Lcd_Write_Int
     _Lcd_Write_String
       _Lcd_Write_Char
     _sprintf
       _vfprintf
         _vfpfcnvrt
           ___awdiv
           ___awmod
           _abs
             ___awmod (ARG)
           _fputc
             _putch
   _Lcd_Write_String

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               55     54      54       9       98.8%
BITBANK3            55      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0      24      11       37.5%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      44       7       85.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     35      3A       5       72.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               D      D       D       1      100.0%
BITCOMMON            D      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     103      12        0.0%
ABS                  0      0     103       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Wed Dec 27 02:36:30 2023

                       pc 0002                        l50 01A3                        l51 01A9  
                      l52 01AA                        l60 0156                        l53 01B0  
                      l54 01B1                        l55 01B7                        l63 0100  
                      l72 0406                        l57 01B8                        l49 01A0  
                      l81 02B1                        l75 0235                        l84 013C  
                      l69 02F7                        l99 00F3              ___awdiv@sign 0076  
                      fsr 0004                       l105 026F                       l106 0265  
                     l390 03A6                       l377 046D                       l731 0196  
                     l725 0558                       l750 034D                       l761 00E2  
                     l738 0111                       l687 0175                       _RC0 0038  
                     _RD2 0042                       _RD3 0043                       _RD4 0044  
                     _RD5 0045                       _RD6 0046                       _RD7 0047  
                     u700 0417                       u701 0416                       u710 0428  
                     u711 0427                       u800 035E                       u801 035D  
                     u730 043A                       u810 0369                       u731 0439  
                     u811 0368                       u900 0318                       u725 042C  
                     u901 0317                       u750 044B                       u830 037B  
                     u910 0336                       u751 044A                       u831 037A  
                     u911 0335                       u840 0385                       u920 0105  
                     u745 043B                       u841 0384                       u825 036D  
                     u921 0104                       u930 019C                       u770 045F  
                     u690 040C                       u931 019B                       u771 045E  
                     u755 0447                       u691 040B                       u915 0332  
                     u940 01A7                       u780 0464                       u860 0398  
                     u941 01A6                       u781 0463                       u765 0453  
                     u861 0397                       u845 0381                       u950 01AE  
                     u870 039D                       u790 0353                       u951 01AD  
                     u871 039C                       u855 038C                       u791 0352  
                     u960 01B5                       u880 02FD                       u961 01B4  
                     u881 02FC                       u890 0302                       u970 0480  
                     u891 0301                       u971 047F                       u980 04A1  
                     u981 04A0                       u990 04AD                       u991 04AC  
                     _abs 0101                       fsr0 0004                       indf 0000  
            ___awmod@sign 0076                      l1201 0451                      l1211 0469  
                    l1203 0452                      ?_abs 0077                      l1205 0459  
                    l1221 0358                      l1301 04BA                      l1207 045F  
                    l1231 036C                      l1223 035A                      l1215 034E  
                    l1311 04FC                      l1303 04BF                      l1401 02B8  
                    l1209 0464                      l1241 038B                      l1233 0373  
                    l1225 035E                      l1217 034F                      l1321 051A  
                    l1313 0502                      l1305 04C1                      l1411 02DB  
                    l1403 02C5                      l1171 0407                      l1243 0392  
                    l1235 0377                      l1227 0363                      l1219 0353  
                    l1323 052C                      l1315 0507                      l1307 04C8  
                    l1331 0541                      l1421 03AA                      l1413 02E8  
                    l1405 02C8                      l1341 020B                      l1181 0417  
                    l1173 0408                      l1237 037B                      l1229 0369  
                    l1245 0398                      l1261 0318                      l1253 02F8  
                    l1317 050C                      l1325 0532                      l1309 04E7  
                    l1501 05CC                      l1431 03CE                      l1423 03B0  
                    l1415 02EB                      l1407 02CE                      l1351 022A  
                    l1343 0219                      l1191 042B                      l1183 041C  
                    l1175 040C                      l1247 039D                      l1239 0385  
                    l1271 0106                      l1263 0336                      l1255 02FD  
                    l1319 0511                      l1327 0539                      l1503 05D5  
                    l1281 01AE                      l1441 03EE                      l1433 03D6  
                    l1425 03B9                      l1417 02F1                      l1409 02D5  
                    l1353 022D                      l1345 021C                      l1337 0202  
                    l1193 0432                      l1185 0420                      l1177 0411  
                    l1249 03A2                      l1257 0302                      l1361 0186  
                    l1521 0630                      l1505 05E4                      l1451 00EB  
                    l1283 01B5                      l1275 0198                      l1371 0147  
                    l1443 03F4                      l1435 03DC                      l1427 03BF  
                    l1419 03A7                      l1355 0232                      l1347 0221  
                    l1339 0208                      l1195 0436                      l1187 0422  
                    l1179 0413                      l1267 0101                      l1259 0309  
                    l1291 048D                      l1363 0194                      l1531 064A  
                    l1515 05FF                      l1507 05F3                      l1461 024A  
                    l1453 0236                      l1277 019C                      l1373 014A  
                    l1445 03FA                      l1437 03E2                      l1429 03C8  
                    l1349 0224                      l1381 028F                      l1197 043A  
                    l1189 0428                      l1269 0105                      l1293 0491  
                    l1285 0471                      l1357 0179                      l1541 0682  
                    l1533 0652                      l1517 061B                      l1509 05FB  
                    l1463 025D                      l1455 023A                      l1279 01A7  
                    l1375 0153                      l1367 013E                      l1447 0400  
                    l1439 03E8                      l1383 0295                      l1199 044B  
                    l1295 0495                      l1287 0480                      l1359 017C  
                    l1391 0162                      l1551 06EA                      l1543 0691  
                    l1535 0663                      l1527 0634                      l1519 0623  
                    l1465 0262                      l1457 0247                      l1369 0141  
                    l1377 0270                      l1297 04A1                      l1289 0486  
                    l1393 016C                      l1385 015A                      l1449 0125  
                    l1561 0765                      l1545 0698                      l1553 06F2  
                    l1537 0669                      l1529 0645                      l1481 0585  
                    l1467 0269                      l1379 0273                      l1299 04AD  
                    l1387 015E                      l1563 0776                      l1555 0714  
                    l1547 06D3                      l1571 07AC                      l1539 067A  
                    l1491 0593                      l1483 058A                      l1475 0559  
                    l1397 00F4                      l1389 0160                      l1573 07C2  
                    l1565 077C                      l1557 0723                      l1549 06E4  
                    l1493 0594                      l1485 058E                      l1477 056B  
                    l1399 02B3                      l1559 072A                      l1567 0784  
                    l1495 05AA                      l1487 058F                      l1479 0574  
                    l1569 07A6                      l1497 05BF                      l1489 0590  
                    l1499 05C4                      STR_1 003E                      STR_2 0014  
                    STR_3 0025                      STR_4 0035                      u1000 04C6  
                    u1001 04C4                      u1010 04C7                      u1100 029F  
                    u1020 0502                      u1021 0501                      u1110 02B1  
                    u1030 0507                      u1111 02B0                      u1031 0506  
                    u1120 02B8                      u1040 050C                      u1200 059C  
                    u1121 02B7                      u1041 050B                      u1050 0511  
                    u1210 05B2                      u1051 0510                      u1140 02DB  
                    u1060 0538                      u1141 02DA                      u1061 0537  
                    u1230 0630                      u1135 02BE                      u1231 062F  
                    u1160 023A                      u1080 0194                      u1240 0691  
                    u1161 0239                      u1081 0193                      u1305 0735  
                    u1241 0690                      u1225 0606                      u1170 0247  
                    u1090 027D                      u1330 07A6                      u1314 0744  
                    u1171 0246                      u1155 02E1                      u1075 020E  
                    u1331 07A5                      u1315 0742                      u1235 062C  
                    u1340 07AC                      u1341 07AB                      u1325 0750  
                    u1245 068D                      u1190 0269                      u1350 07CF  
                    u1191 0268                      u1175 0243                      u1407 03C3  
                    u1351 07CE                      u1335 07A2                      u1255 06A3  
                    u1280 0714                      u1264 06B2                      u1185 0253  
                    u1417 03D2                      u1281 0713                      u1265 06B0  
                    u1290 0723                      u1427 014E                      u1355 07CB  
                    u1291 0722                      u1275 06BE                      u1437 025F  
                    u1285 0710                      u1367 07B4                      u1295 071F  
                    u1377 021E                      u1387 022F                      u1397 03B4  
                    abs@a 0077         ?_Lcd_Write_String 0076                      _dbuf 00C4  
                    _main 0559                      _prec 0057                      btemp 007E  
        __end_of_ADC_Init 00F4          __end_of_ADC_Read 0270                      start 0001  
      ??_Lcd_Write_String 0078           __end_of_Lcd_Cmd 0157                     ??_abs 0079  
                   ?_main 0071           __end_of___awdiv 046E           __end_of___awmod 03A7  
         ___awdiv@divisor 0071           ___awdiv@counter 0075              vfpfcnvrt@fmt 007B  
                   _PORTA 0005                     _PORTB 0006                     _PORTC 0007  
                   _PORTE 0009                     _TRISA 0085                     _TRISB 0086  
                   _TRISD 0088                     _flags 0059                     _fputc 02F8  
                   _width 0055                     _putch 00E2                     main@i 01DC  
                   main@j 01DE                     main@s 0190                     pclath 000A  
                   status 0003                     wtemp0 007E           __end_of_sprintf 0176  
        __end_of_Lcd_Init 0407          __end_of_Lcd_Port 01B9           __initialization 07D3  
            __end_of_main 07D3                    ??_main 0050                    _ADCON0 001F  
                  _ADCON1 009F                    ?_fputc 0071                    _ADRESH 001E  
                  _ADRESL 009E          ___awdiv@dividend 0073                    ?_putch 0071  
               ??_Lcd_Cmd 0072             vfpfcnvrt@done 0022                    _TRISC0 0438  
            vfprintf@cfmt 002D                 ??___awdiv 0075                 ??___awmod 0075  
        ___awdiv@quotient 0077           ___awmod@divisor 0071           ___awmod@counter 0075  
   __end_of_Lcd_Write_Int 013D                    fputc@c 0071                 ?_ADC_Init 0071  
               ?_ADC_Read 0071                    putch@c 0071          __end_of_vfprintf 0197  
        Lcd_Write_Int@str 0040                 ??_sprintf 007D           Lcd_Set_Cursor@a 0077  
         Lcd_Set_Cursor@b 0075           Lcd_Set_Cursor@y 0079           Lcd_Set_Cursor@z 0078  
 __end_of__initialization 07FC         __end_of_Lcd_Clear 0101            __pcstackCOMMON 0071  
            __pidataBANK1 01DD              __pidataBANK2 01B9             __end_of_fputc 034E  
           __end_of_putch 00E3            _Lcd_Set_Cursor 02B2                ??_ADC_Init 0071  
              ??_ADC_Read 0073                 ?_Lcd_Init 0071                 ?_Lcd_Port 0071  
                 ??_fputc 0074            Lcd_Write_Int@a 003E                   ??_putch 0071  
              __pbssBANK0 0055                __pbssBANK1 00C4                __pmaintext 0559  
  __end_of_Lcd_Set_Cursor 02F8                   _GO_DONE 00FA                ??_Lcd_Init 0075  
              ??_Lcd_Port 0071                __stringtab 0004            _Lcd_Write_Char 0201  
                 _Lcd_Cmd 013D                   ___awdiv 0407                   ___awmod 034E  
               ?_vfprintf 002A           ?_Lcd_Set_Cursor 0075                   __ptext1 0125  
                 __ptext2 0157                   __ptext3 0176                   __ptext4 046E  
                 __ptext5 02F8                   __ptext6 00E2                   __ptext7 0101  
                 __ptext8 034E                   __ptext9 0407          ___awmod@dividend 0073  
                 main@led 01B4                   _sprintf 0157                   clrloop0 00E4  
                 main@val 01DA    __end_of_Lcd_Write_Char 0236      end_of_initialization 07FC  
                 fputc@fp 0073         __end_of_vfpfcnvrt 0559          vfpfcnvrt@convarg 0025  
               Lcd_Port@a 0071                ??_vfprintf 007D           ?_Lcd_Write_Char 0071  
       Lcd_Write_String@a 0076         Lcd_Write_String@i 007B                 _Lcd_Clear 00F4  
             vfpfcnvrt@ap 007C               vfpfcnvrt@cp 0024               vfpfcnvrt@fp 0023  
        _Lcd_Write_String 0270       start_initialization 07D3               __end_of_abs 0112  
             vfprintf@fmt 002A                ?_Lcd_Clear 0071                init_fetch0 0112  
             __pdataBANK1 00A0               __pdataBANK2 0110           Lcd_Write_Char@a 0075  
         Lcd_Write_Char@y 0074                 ___latbits 0002             __pcstackBANK0 0020  
           __pcstackBANK3 0190                  ?_Lcd_Cmd 0071          ??_Lcd_Set_Cursor 0076  
                ?___awdiv 0071                  ?___awmod 0071                 __pstrings 0004  
           _Lcd_Write_Int 0125                  _ADC_Init 00EB                  _ADC_Read 0236  
             ADC_Read@ANC 0071                  ?_sprintf 002E                 clear_ram0 00E3  
                Lcd_Cmd@a 0074               ??_Lcd_Clear 0075                 main@F1531 0110  
               main@F1529 00A0                 _vfpfcnvrt 046E                _ADCON0bits 001F  
             __stringbase 0013                 main@i_166 01E2                 main@j_169 01E0  
          ?_Lcd_Write_Int 003E          ??_Lcd_Write_Char 0072                  _Lcd_Init 03A7  
                _Lcd_Port 0197                vfpfcnvrt@c 0029  __end_of_Lcd_Write_String 02B2  
              vfprintf@ap 002B                vfprintf@fp 002C                ?_vfpfcnvrt 007B  
      __end_of__stringtab 0014                sprintf@fmt 002E                  __ptext10 0270  
                __ptext11 0201                  __ptext12 02B2                  __ptext13 03A7  
                __ptext14 00F4                  __ptext15 013D                  __ptext16 0197  
                __ptext17 0236                  __ptext18 00EB                  _vfprintf 0176  
                main@_val 01D8           ??_Lcd_Write_Int 007E                  init_ram0 0116  
      Lcd_Write_Char@temp 0073                 sprintf@ap 0031                 stringcode 000E  
             ??_vfpfcnvrt 0020        Lcd_Set_Cursor@temp 007A                  sprintf@f 0033  
                sprintf@s 0032                  stringdir 000E                  stringtab 0004  
